
TGR2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800a490  0800a490  0001a490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa30  0800aa30  0001aa30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006e4  20000000  0800aa38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008a8  200006e4  0800b11c  000206e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f8c  0800b11c  00020f8c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003962c  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000066a6  00000000  00000000  00059d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001dc18  00000000  00000000  000603e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001f28  00000000  00000000  0007e000  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024a8  00000000  00000000  0007ff28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001119c  00000000  00000000  000823d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c46e  00000000  00000000  0009356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009f9da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006de0  00000000  00000000  0009fa58  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000a6838  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000a68d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e4 	.word	0x200006e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a474 	.word	0x0800a474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e8 	.word	0x200006e8
 80001cc:	0800a474 	.word	0x0800a474

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	2244      	movs	r2, #68	; 0x44
 8000eb8:	2100      	movs	r1, #0
 8000eba:	a805      	add	r0, sp, #20
 8000ebc:	f006 fd2d 	bl	800791a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	4622      	mov	r2, r4
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4668      	mov	r0, sp
 8000ec6:	f006 fd28 	bl	800791a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2288      	movs	r2, #136	; 0x88
 8000ece:	a816      	add	r0, sp, #88	; 0x58
 8000ed0:	f006 fd23 	bl	800791a <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed4:	f004 ff00 	bl	8005cd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ed8:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <SystemClock_Config+0xb4>)
 8000eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000ede:	f023 0318 	bic.w	r3, r3, #24
 8000ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ee6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee8:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000eec:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000eee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ef0:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ef2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ef4:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ef8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000efa:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000efc:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000efe:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f02:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f04:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f06:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f08:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0a:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f005 f846 	bl	8005f9c <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f10:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f12:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f16:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f22:	f005 fa61 	bl	80063e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <SystemClock_Config+0xb8>)
 8000f28:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f2e:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000f30:	2318      	movs	r3, #24
 8000f32:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000f36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f3a:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f3c:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f3e:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f40:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f42:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f44:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f46:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f48:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f4a:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f4c:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f4e:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f005 fc0c 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f58:	f004 fece 	bl	8005cf8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f5c:	f005 fdee 	bl	8006b3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f60:	b039      	add	sp, #228	; 0xe4
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	0001208d 	.word	0x0001208d

08000f6c <main>:
{
 8000f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f70:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8000f72:	f003 fe5b 	bl	8004c2c <HAL_Init>
  SystemClock_Config();
 8000f76:	f7ff ff9b 	bl	8000eb0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	2214      	movs	r2, #20
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	a807      	add	r0, sp, #28
 8000f80:	f006 fccb 	bl	800791a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f84:	4baf      	ldr	r3, [pc, #700]	; (8001244 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000f86:	48b0      	ldr	r0, [pc, #704]	; (8001248 <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8001280 <main+0x314>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	f042 0210 	orr.w	r2, r2, #16
 8000f92:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f96:	f002 0210 	and.w	r2, r2, #16
 8000f9a:	9202      	str	r2, [sp, #8]
 8000f9c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa0:	f042 0204 	orr.w	r2, r2, #4
 8000fa4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa8:	f002 0204 	and.w	r2, r2, #4
 8000fac:	9203      	str	r2, [sp, #12]
 8000fae:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fba:	f002 0201 	and.w	r2, r2, #1
 8000fbe:	9204      	str	r2, [sp, #16]
 8000fc0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc4:	f042 0202 	orr.w	r2, r2, #2
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fcc:	f002 0202 	and.w	r2, r2, #2
 8000fd0:	9205      	str	r2, [sp, #20]
 8000fd2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000fec:	f004 f8ee 	bl	80051cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f248 1104 	movw	r1, #33028	; 0x8104
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f004 f8e7 	bl	80051cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000ffe:	2200      	movs	r2, #0
 8001000:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001004:	4891      	ldr	r0, [pc, #580]	; (800124c <main+0x2e0>)
 8001006:	f004 f8e1 	bl	80051cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f243 0181 	movw	r1, #12417	; 0x3081
 8001010:	488f      	ldr	r0, [pc, #572]	; (8001250 <main+0x2e4>)
 8001012:	f004 f8db 	bl	80051cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7110 	mov.w	r1, #576	; 0x240
 800101c:	488d      	ldr	r0, [pc, #564]	; (8001254 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001020:	f004 f8d4 	bl	80051cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001026:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102a:	a907      	add	r1, sp, #28
 800102c:	4886      	ldr	r0, [pc, #536]	; (8001248 <main+0x2dc>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800102e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001036:	f003 ff53 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800103a:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	a907      	add	r1, sp, #28
 800103e:	4882      	ldr	r0, [pc, #520]	; (8001248 <main+0x2dc>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001040:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001048:	f003 ff4a 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001052:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001054:	4b80      	ldr	r3, [pc, #512]	; (8001258 <main+0x2ec>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001056:	487f      	ldr	r0, [pc, #508]	; (8001254 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001058:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800105a:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001060:	f003 ff3e 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8001064:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	a907      	add	r1, sp, #28
 8001068:	487a      	ldr	r0, [pc, #488]	; (8001254 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800106a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800106c:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f003 ff35 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001076:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	a907      	add	r1, sp, #28
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001082:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001084:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f003 ff27 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001092:	a907      	add	r1, sp, #28
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001098:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010a0:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f003 ff1c 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010a8:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010aa:	a907      	add	r1, sp, #28
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80010b2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b4:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ba:	f04f 0b05 	mov.w	fp, #5
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80010be:	f003 ff0f 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80010c2:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	a907      	add	r1, sp, #28
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80010ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f003 ff03 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010da:	a907      	add	r1, sp, #28
 80010dc:	485b      	ldr	r0, [pc, #364]	; (800124c <main+0x2e0>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80010de:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f003 fefb 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010ea:	a907      	add	r1, sp, #28
 80010ec:	4857      	ldr	r0, [pc, #348]	; (800124c <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ee:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010f4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f003 fef3 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80010fa:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	a907      	add	r1, sp, #28
 8001100:	4852      	ldr	r0, [pc, #328]	; (800124c <main+0x2e0>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001102:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f003 fee9 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800110e:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	a907      	add	r1, sp, #28
 8001114:	484e      	ldr	r0, [pc, #312]	; (8001250 <main+0x2e4>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8001116:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001118:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f003 fedf 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001122:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	a907      	add	r1, sp, #28
 8001128:	4849      	ldr	r0, [pc, #292]	; (8001250 <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800112a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f003 fed5 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001136:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	a907      	add	r1, sp, #28
 800113c:	4845      	ldr	r0, [pc, #276]	; (8001254 <main+0x2e8>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800113e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001146:	f003 fecb 	bl	8004ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800114a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	a907      	add	r1, sp, #28
 8001150:	4840      	ldr	r0, [pc, #256]	; (8001254 <main+0x2e8>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001152:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f003 fec1 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800115e:	a907      	add	r1, sp, #28
 8001160:	483b      	ldr	r0, [pc, #236]	; (8001250 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	9409      	str	r4, [sp, #36]	; 0x24
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001164:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800116a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001172:	f003 feb5 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001176:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	a907      	add	r1, sp, #28
 800117a:	4835      	ldr	r0, [pc, #212]	; (8001250 <main+0x2e4>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800117c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001182:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001186:	f44f 7a40 	mov.w	sl, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f003 fea8 	bl	8004ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001196:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	482c      	ldr	r0, [pc, #176]	; (800124c <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80011a0:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f003 fe9c 	bl	8004ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011a8:	4622      	mov	r2, r4
 80011aa:	4621      	mov	r1, r4
 80011ac:	2017      	movs	r0, #23
 80011ae:	f003 fd7b 	bl	8004ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b2:	2017      	movs	r0, #23
 80011b4:	f003 fdac 	bl	8004d10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b8:	4621      	mov	r1, r4
 80011ba:	4622      	mov	r2, r4
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f003 fd73 	bl	8004ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f003 fda4 	bl	8004d10 <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011c8:	4824      	ldr	r0, [pc, #144]	; (800125c <main+0x2f0>)
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <main+0x2f4>)
 80011cc:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011ce:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 80011d4:	4e23      	ldr	r6, [pc, #140]	; (8001264 <main+0x2f8>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011d6:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011d8:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011da:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011dc:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011de:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011e0:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011e2:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80011e4:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011e8:	6304      	str	r4, [r0, #48]	; 0x30
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011ea:	60c7      	str	r7, [r0, #12]
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80011ec:	f003 fdde 	bl	8004dac <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <main+0x2fc>)
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <main+0x300>)
  hi2c2.Init.OwnAddress1 = 0;
 80011f4:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f6:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 80011f8:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	60f5      	str	r5, [r6, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fe:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001200:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001202:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001208:	f004 f976 	bl	80054f8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120c:	4621      	mov	r1, r4
 800120e:	4630      	mov	r0, r6
 8001210:	f004 fc7c 	bl	8005b0c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001214:	4621      	mov	r1, r4
 8001216:	4630      	mov	r0, r6
 8001218:	f004 fc9e 	bl	8005b58 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Init.ClockPrescaler = 255;
 800121c:	4914      	ldr	r1, [pc, #80]	; (8001270 <main+0x304>)
  hqspi.Instance = QUADSPI;
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <main+0x308>)
  hqspi.Init.ClockPrescaler = 255;
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.FifoThreshold = 1;
 8001226:	6085      	str	r5, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001228:	60c4      	str	r4, [r0, #12]
  hqspi.Init.FlashSize = 1;
 800122a:	6105      	str	r5, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800122c:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800122e:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001230:	f004 fdc6 	bl	8005dc0 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 8001234:	4810      	ldr	r0, [pc, #64]	; (8001278 <main+0x30c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <main+0x310>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001238:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800123a:	f44f 7582 	mov.w	r5, #260	; 0x104
 800123e:	e880 0028 	stmia.w	r0, {r3, r5}
 8001242:	e01f      	b.n	8001284 <main+0x318>
 8001244:	40021000 	.word	0x40021000
 8001248:	48001000 	.word	0x48001000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000c00 	.word	0x48000c00
 8001254:	48000800 	.word	0x48000800
 8001258:	10210000 	.word	0x10210000
 800125c:	20000754 	.word	0x20000754
 8001260:	40016020 	.word	0x40016020
 8001264:	20000c10 	.word	0x20000c10
 8001268:	40005800 	.word	0x40005800
 800126c:	10909cec 	.word	0x10909cec
 8001270:	a0001000 	.word	0xa0001000
 8001274:	20000e38 	.word	0x20000e38
 8001278:	20000c5c 	.word	0x20000c5c
 800127c:	40003c00 	.word	0x40003c00
 8001280:	10110000 	.word	0x10110000
  huart1.Instance = USART1;
 8001284:	4db7      	ldr	r5, [pc, #732]	; (8001564 <main+0x5f8>)
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	6104      	str	r4, [r0, #16]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001288:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	6144      	str	r4, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800128e:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001290:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001292:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001294:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001298:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800129c:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800129e:	f8c0 8034 	str.w	r8, [r0, #52]	; 0x34
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a2:	f8c0 a00c 	str.w	sl, [r0, #12]
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012a6:	f005 fc51 	bl	8006b4c <HAL_SPI_Init>
  huart1.Init.BaudRate = 9600;
 80012aa:	4baf      	ldr	r3, [pc, #700]	; (8001568 <main+0x5fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ac:	60ac      	str	r4, [r5, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ae:	f04f 080c 	mov.w	r8, #12
  huart1.Init.BaudRate = 9600;
 80012b2:	f44f 5916 	mov.w	r9, #9600	; 0x2580
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b6:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 9600;
 80012b8:	e885 0208 	stmia.w	r5, {r3, r9}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	612c      	str	r4, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c0:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c2:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c4:	622c      	str	r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	626c      	str	r4, [r5, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	f8c5 8014 	str.w	r8, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012cc:	f006 f962 	bl	8007594 <HAL_UART_Init>
  huart3.Instance = USART3;
 80012d0:	48a6      	ldr	r0, [pc, #664]	; (800156c <main+0x600>)
  huart3.Init.BaudRate = 115200;
 80012d2:	4ba7      	ldr	r3, [pc, #668]	; (8001570 <main+0x604>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d4:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 80012d6:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 80012da:	e880 0048 	stmia.w	r0, {r3, r6}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012de:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e0:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e8:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ea:	f8c0 8014 	str.w	r8, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ee:	f006 f951 	bl	8007594 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f2:	48a0      	ldr	r0, [pc, #640]	; (8001574 <main+0x608>)
  htim6.Instance = TIM6;
 80012f4:	4ea0      	ldr	r6, [pc, #640]	; (8001578 <main+0x60c>)
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80012f6:	6144      	str	r4, [r0, #20]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012f8:	f04f 0e06 	mov.w	lr, #6
 80012fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001300:	e880 4008 	stmia.w	r0, {r3, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001304:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001306:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001308:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800130a:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800130c:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800130e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001310:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001312:	6187      	str	r7, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001314:	f004 fc45 	bl	8005ba2 <HAL_PCD_Init>
  htim6.Init.Prescaler = 1999;
 8001318:	4b98      	ldr	r3, [pc, #608]	; (800157c <main+0x610>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131a:	9407      	str	r4, [sp, #28]
  htim6.Init.Prescaler = 1999;
 800131c:	f240 7ccf 	movw	ip, #1999	; 0x7cf
 8001320:	e886 1008 	stmia.w	r6, {r3, ip}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001324:	4630      	mov	r0, r6
  htim6.Init.Period = 40000;
 8001326:	f649 4340 	movw	r3, #40000	; 0x9c40
 800132a:	60f3      	str	r3, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	9408      	str	r4, [sp, #32]
 800132e:	9409      	str	r4, [sp, #36]	; 0x24
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	60b4      	str	r4, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001334:	f005 fd8e 	bl	8006e54 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001338:	a907      	add	r1, sp, #28
 800133a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001340:	f005 fda2 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
  huart4.Instance = UART4;
 8001344:	4b8e      	ldr	r3, [pc, #568]	; (8001580 <main+0x614>)
 8001346:	488f      	ldr	r0, [pc, #572]	; (8001584 <main+0x618>)
  huart4.Init.BaudRate = 9600;
 8001348:	e880 0208 	stmia.w	r0, {r3, r9}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800134c:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800134e:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001350:	6104      	str	r4, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	6204      	str	r4, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	6244      	str	r4, [r0, #36]	; 0x24
  huart4.Init.Mode = UART_MODE_TX_RX;
 800135a:	f8c0 8014 	str.w	r8, [r0, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800135e:	f006 f919 	bl	8007594 <HAL_UART_Init>
  BSP_PSENSOR_Init();
 8001362:	f000 fd2b 	bl	8001dbc <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 8001366:	f000 fc79 	bl	8001c5c <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 800136a:	f000 fd3b 	bl	8001de4 <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 800136e:	f000 fc4d 	bl	8001c0c <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8001372:	f000 fc5f 	bl	8001c34 <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8001376:	f000 fc8d 	bl	8001c94 <BSP_MAGNETO_Init>
  VL53L0X_PROXIMITY_Init();
 800137a:	f000 fcd9 	bl	8001d30 <VL53L0X_PROXIMITY_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 800137e:	4630      	mov	r0, r6
 8001380:	f005 fc36 	bl	8006bf0 <HAL_TIM_Base_Start_IT>
  sprintf(str,"Hello\r\n");
 8001384:	4980      	ldr	r1, [pc, #512]	; (8001588 <main+0x61c>)
 8001386:	4881      	ldr	r0, [pc, #516]	; (800158c <main+0x620>)
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 8001388:	4c80      	ldr	r4, [pc, #512]	; (800158c <main+0x620>)
  sprintf(str,"Hello\r\n");
 800138a:	f006 ffdb 	bl	8008344 <strcpy>
  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 800138e:	487f      	ldr	r0, [pc, #508]	; (800158c <main+0x620>)
 8001390:	f7fe ff1e 	bl	80001d0 <strlen>
 8001394:	f241 3388 	movw	r3, #5000	; 0x1388
 8001398:	b282      	uxth	r2, r0
 800139a:	497c      	ldr	r1, [pc, #496]	; (800158c <main+0x620>)
 800139c:	4628      	mov	r0, r5
 800139e:	f006 f870 	bl	8007482 <HAL_UART_Transmit>
  __HAL_UART_ENABLE_IT(&huart1 , UART_IT_RXNE);
 80013a2:	682a      	ldr	r2, [r5, #0]
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f043 0320 	orr.w	r3, r3, #32
 80013aa:	6013      	str	r3, [r2, #0]
	  Temperature_Value = BSP_TSENSOR_ReadTemp();
 80013ac:	4f78      	ldr	r7, [pc, #480]	; (8001590 <main+0x624>)
	  Distance_Value[0] = Distance_Value[1];
 80013ae:	4e79      	ldr	r6, [pc, #484]	; (8001594 <main+0x628>)
	  Humidity_Value = BSP_HSENSOR_ReadHumidity();
 80013b0:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80015bc <main+0x650>
	  Temperature_Value = BSP_TSENSOR_ReadTemp();
 80013b4:	f000 fd28 	bl	8001e08 <BSP_TSENSOR_ReadTemp>
 80013b8:	ed87 0a00 	vstr	s0, [r7]
	  Humidity_Value = BSP_HSENSOR_ReadHumidity();
 80013bc:	f000 fc62 	bl	8001c84 <BSP_HSENSOR_ReadHumidity>
	  Distance_Value[0] = Distance_Value[1];
 80013c0:	8873      	ldrh	r3, [r6, #2]
 80013c2:	8033      	strh	r3, [r6, #0]
	  Humidity_Value = BSP_HSENSOR_ReadHumidity();
 80013c4:	ed88 0a00 	vstr	s0, [r8]
	  Distance_Value[1] = VL53L0X_PROXIMITY_GetDistance();
 80013c8:	f000 fc88 	bl	8001cdc <VL53L0X_PROXIMITY_GetDistance>
	  if(abs(Distance_Value[0] - Distance_Value[1]) < 20)
 80013cc:	8833      	ldrh	r3, [r6, #0]
	  Distance_Value[1] = VL53L0X_PROXIMITY_GetDistance();
 80013ce:	b282      	uxth	r2, r0
	  if(abs(Distance_Value[0] - Distance_Value[1]) < 20)
 80013d0:	1a98      	subs	r0, r3, r2
 80013d2:	3013      	adds	r0, #19
 80013d4:	2826      	cmp	r0, #38	; 0x26
	  Distance_Value[1] = VL53L0X_PROXIMITY_GetDistance();
 80013d6:	8072      	strh	r2, [r6, #2]
	  if(abs(Distance_Value[0] - Distance_Value[1]) < 20)
 80013d8:	f200 80a8 	bhi.w	800152c <main+0x5c0>
		  Door_State[0]++;
 80013dc:	4a6e      	ldr	r2, [pc, #440]	; (8001598 <main+0x62c>)
 80013de:	7813      	ldrb	r3, [r2, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	7013      	strb	r3, [r2, #0]
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7fe fef3 	bl	80001d0 <strlen>
	  sprintf(str,".",trigger_1sec);
 80013ea:	4e6c      	ldr	r6, [pc, #432]	; (800159c <main+0x630>)
		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 80013ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f0:	b282      	uxth	r2, r0
 80013f2:	4621      	mov	r1, r4
 80013f4:	4628      	mov	r0, r5
 80013f6:	f006 f844 	bl	8007482 <HAL_UART_Transmit>
	  sprintf(str,".",trigger_1sec);
 80013fa:	7832      	ldrb	r2, [r6, #0]
 80013fc:	4968      	ldr	r1, [pc, #416]	; (80015a0 <main+0x634>)
 80013fe:	4620      	mov	r0, r4
 8001400:	f006 ff7c 	bl	80082fc <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 8001404:	4620      	mov	r0, r4
 8001406:	f7fe fee3 	bl	80001d0 <strlen>
 800140a:	f241 3388 	movw	r3, #5000	; 0x1388
 800140e:	b282      	uxth	r2, r0
 8001410:	4621      	mov	r1, r4
 8001412:	4628      	mov	r0, r5
 8001414:	f006 f835 	bl	8007482 <HAL_UART_Transmit>
	  if(trigger_1sec == 1)
 8001418:	f896 e000 	ldrb.w	lr, [r6]
 800141c:	f1be 0f01 	cmp.w	lr, #1
 8001420:	d1c5      	bne.n	80013ae <main+0x442>
		  Temperature_Cayenne = (int16_t)(Temperature_Value*10);
 8001422:	edd7 7a00 	vldr	s15, [r7]
 8001426:	4b5f      	ldr	r3, [pc, #380]	; (80015a4 <main+0x638>)
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001428:	4f5b      	ldr	r7, [pc, #364]	; (8001598 <main+0x62c>)
		  Temperature_Cayenne = (int16_t)(Temperature_Value*10);
 800142a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
		  Cayenne_Frame[1] = (uint8_t)(0x67); //Temp Type
 8001432:	2067      	movs	r0, #103	; 0x67
		  Temperature_Cayenne = (int16_t)(Temperature_Value*10);
 8001434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001438:	f897 c001 	ldrb.w	ip, [r7, #1]
		  Temperature_Cayenne = (int16_t)(Temperature_Value*10);
 800143c:	edcd 7a01 	vstr	s15, [sp, #4]
		  Humidity_Cayenne = (uint16_t)(Humidity_Value*2);
 8001440:	edd8 7a00 	vldr	s15, [r8]
		  Temperature_Cayenne = (int16_t)(Temperature_Value*10);
 8001444:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001448:	8019      	strh	r1, [r3, #0]
		  Humidity_Cayenne = (uint16_t)(Humidity_Value*2);
 800144a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <main+0x63c>)
 8001450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		  Cayenne_Frame[0] = (uint8_t)(0x00); //Temp Channel
 8001454:	f04f 0800 	mov.w	r8, #0
		  Humidity_Cayenne = (uint16_t)(Humidity_Value*2);
 8001458:	edcd 7a01 	vstr	s15, [sp, #4]
 800145c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001460:	801a      	strh	r2, [r3, #0]
		  Cayenne_Frame[0] = (uint8_t)(0x00); //Temp Channel
 8001462:	4b52      	ldr	r3, [pc, #328]	; (80015ac <main+0x640>)
		  Cayenne_Frame[1] = (uint8_t)(0x67); //Temp Type
 8001464:	7058      	strb	r0, [r3, #1]
		  Cayenne_Frame[3] = (uint8_t)(Temperature_Cayenne);
 8001466:	70d9      	strb	r1, [r3, #3]
		  Cayenne_Frame[2] = (uint8_t)(Temperature_Cayenne >> 8);
 8001468:	1208      	asrs	r0, r1, #8
		  Cayenne_Frame[5] = (uint8_t)(0x68); //Humid Type
 800146a:	2168      	movs	r1, #104	; 0x68
 800146c:	7159      	strb	r1, [r3, #5]
		  Cayenne_Frame[6] = (uint8_t)(Humidity_Cayenne >> 8);
 800146e:	0a11      	lsrs	r1, r2, #8
 8001470:	7199      	strb	r1, [r3, #6]
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001472:	494f      	ldr	r1, [pc, #316]	; (80015b0 <main+0x644>)
		  Cayenne_Frame[2] = (uint8_t)(Temperature_Cayenne >> 8);
 8001474:	7098      	strb	r0, [r3, #2]
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001476:	78b8      	ldrb	r0, [r7, #2]
		  Cayenne_Frame[7] = (uint8_t)(Humidity_Cayenne);
 8001478:	71da      	strb	r2, [r3, #7]
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 800147a:	780a      	ldrb	r2, [r1, #0]
		  Cayenne_Frame[0] = (uint8_t)(0x00); //Temp Channel
 800147c:	f883 8000 	strb.w	r8, [r3]
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001480:	ebac 0900 	sub.w	r9, ip, r0
 8001484:	fab2 f282 	clz	r2, r2
 8001488:	f1b9 0f02 	cmp.w	r9, #2
		  Cayenne_Frame[4] = (uint8_t)(0x01); //Humid Channel
 800148c:	f883 e004 	strb.w	lr, [r3, #4]
		  if((isStateUsed == 0) & ((Door_State[1] - Door_State[2]) > 2))
 8001490:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8001494:	4699      	mov	r9, r3
 8001496:	dd56      	ble.n	8001546 <main+0x5da>
 8001498:	2a00      	cmp	r2, #0
 800149a:	d054      	beq.n	8001546 <main+0x5da>
			  Cayenne_Frame[8] = (uint8_t)(0x01); //Entry
 800149c:	f883 e008 	strb.w	lr, [r3, #8]
			  Cayenne_Frame[9] = (uint8_t)(0x00); //Exit
 80014a0:	f883 8009 	strb.w	r8, [r3, #9]
			  isStateUsed = 1;
 80014a4:	f881 e000 	strb.w	lr, [r1]
	  	  HAL_UART_Transmit(&huart4,(uint8_t*)Cayenne_Frame,8,5000);
 80014a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ac:	2208      	movs	r2, #8
 80014ae:	493f      	ldr	r1, [pc, #252]	; (80015ac <main+0x640>)
 80014b0:	4834      	ldr	r0, [pc, #208]	; (8001584 <main+0x618>)
	  		  sprintf(str," %x,",Cayenne_Frame[i]);
 80014b2:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80015c0 <main+0x654>
	  	  HAL_UART_Transmit(&huart4,(uint8_t*)Cayenne_Frame,8,5000);
 80014b6:	f005 ffe4 	bl	8007482 <HAL_UART_Transmit>
	  	  sprintf(str,"\r\nCAYENNE PLL is =");
 80014ba:	493e      	ldr	r1, [pc, #248]	; (80015b4 <main+0x648>)
 80014bc:	4620      	mov	r0, r4
 80014be:	f006 ff41 	bl	8008344 <strcpy>
	  	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7fe fe84 	bl	80001d0 <strlen>
 80014c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014cc:	b282      	uxth	r2, r0
 80014ce:	4621      	mov	r1, r4
 80014d0:	4628      	mov	r0, r5
 80014d2:	f005 ffd6 	bl	8007482 <HAL_UART_Transmit>
	  	  for(int i = 0; i < 10; i++)
 80014d6:	f04f 0800 	mov.w	r8, #0
	  		  sprintf(str," %x,",Cayenne_Frame[i]);
 80014da:	f819 2008 	ldrb.w	r2, [r9, r8]
 80014de:	4651      	mov	r1, sl
 80014e0:	4620      	mov	r0, r4
 80014e2:	f006 ff0b 	bl	80082fc <siprintf>
	  		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7fe fe72 	bl	80001d0 <strlen>
	  	  for(int i = 0; i < 10; i++)
 80014ec:	f108 0801 	add.w	r8, r8, #1
	  		  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 80014f0:	b282      	uxth	r2, r0
 80014f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80014f6:	4621      	mov	r1, r4
 80014f8:	4628      	mov	r0, r5
 80014fa:	f005 ffc2 	bl	8007482 <HAL_UART_Transmit>
	  	  for(int i = 0; i < 10; i++)
 80014fe:	f1b8 0f0a 	cmp.w	r8, #10
 8001502:	d1ea      	bne.n	80014da <main+0x56e>
	  	  sprintf(str,"\r\n");
 8001504:	492c      	ldr	r1, [pc, #176]	; (80015b8 <main+0x64c>)
 8001506:	4620      	mov	r0, r4
 8001508:	f006 ff1c 	bl	8008344 <strcpy>
	  	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),5000);
 800150c:	4620      	mov	r0, r4
 800150e:	f7fe fe5f 	bl	80001d0 <strlen>
 8001512:	f241 3388 	movw	r3, #5000	; 0x1388
 8001516:	b282      	uxth	r2, r0
 8001518:	4621      	mov	r1, r4
 800151a:	4628      	mov	r0, r5
 800151c:	f005 ffb1 	bl	8007482 <HAL_UART_Transmit>
	  	Door_State[0] = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	703b      	strb	r3, [r7, #0]
		Door_State[1] = 0;
 8001524:	707b      	strb	r3, [r7, #1]
		Door_State[2] = 0;
 8001526:	70bb      	strb	r3, [r7, #2]
		trigger_1sec = 0;
 8001528:	7033      	strb	r3, [r6, #0]
 800152a:	e73f      	b.n	80013ac <main+0x440>
	  else if(Distance_Value[0] < Distance_Value[1])
 800152c:	429a      	cmp	r2, r3
 800152e:	d904      	bls.n	800153a <main+0x5ce>
		  Door_State[1]++;
 8001530:	4a19      	ldr	r2, [pc, #100]	; (8001598 <main+0x62c>)
 8001532:	7853      	ldrb	r3, [r2, #1]
 8001534:	3301      	adds	r3, #1
 8001536:	7053      	strb	r3, [r2, #1]
 8001538:	e754      	b.n	80013e4 <main+0x478>
		  Door_State[2]++;
 800153a:	bf3f      	itttt	cc
 800153c:	4a16      	ldrcc	r2, [pc, #88]	; (8001598 <main+0x62c>)
 800153e:	7893      	ldrbcc	r3, [r2, #2]
 8001540:	3301      	addcc	r3, #1
 8001542:	7093      	strbcc	r3, [r2, #2]
 8001544:	e74e      	b.n	80013e4 <main+0x478>
		  else if((isStateUsed == 0) & ((Door_State[2] - Door_State[1]) > 2))
 8001546:	eba0 000c 	sub.w	r0, r0, ip
 800154a:	2802      	cmp	r0, #2
 800154c:	f04f 0000 	mov.w	r0, #0
			  Cayenne_Frame[8] = (uint8_t)(0x00); //Entry
 8001550:	7218      	strb	r0, [r3, #8]
		  else if((isStateUsed == 0) & ((Door_State[2] - Door_State[1]) > 2))
 8001552:	dd04      	ble.n	800155e <main+0x5f2>
 8001554:	b11a      	cbz	r2, 800155e <main+0x5f2>
			  Cayenne_Frame[9] = (uint8_t)(0x01); //Exit
 8001556:	2201      	movs	r2, #1
 8001558:	725a      	strb	r2, [r3, #9]
			  isStateUsed = 1;
 800155a:	700a      	strb	r2, [r1, #0]
 800155c:	e7a4      	b.n	80014a8 <main+0x53c>
		  	  Cayenne_Frame[9] = (uint8_t)(0x00); //Exit
 800155e:	7258      	strb	r0, [r3, #9]
		  	  isStateUsed = 0;
 8001560:	7008      	strb	r0, [r1, #0]
 8001562:	e7a1      	b.n	80014a8 <main+0x53c>
 8001564:	20000cc8 	.word	0x20000cc8
 8001568:	40013800 	.word	0x40013800
 800156c:	20000790 	.word	0x20000790
 8001570:	40004800 	.word	0x40004800
 8001574:	20000808 	.word	0x20000808
 8001578:	20000d4c 	.word	0x20000d4c
 800157c:	40001000 	.word	0x40001000
 8001580:	40004c00 	.word	0x40004c00
 8001584:	20000d8c 	.word	0x20000d8c
 8001588:	0800a490 	.word	0x0800a490
 800158c:	20000e06 	.word	0x20000e06
 8001590:	20000cc4 	.word	0x20000cc4
 8001594:	20000000 	.word	0x20000000
 8001598:	20000700 	.word	0x20000700
 800159c:	20000704 	.word	0x20000704
 80015a0:	0800a498 	.word	0x0800a498
 80015a4:	20000cc0 	.word	0x20000cc0
 80015a8:	20000e04 	.word	0x20000e04
 80015ac:	20000d40 	.word	0x20000d40
 80015b0:	20000703 	.word	0x20000703
 80015b4:	0800a49a 	.word	0x0800a49a
 80015b8:	0800a495 	.word	0x0800a495
 80015bc:	2000078c 	.word	0x2000078c
 80015c0:	0800a4ad 	.word	0x0800a4ad

080015c4 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	BSP_LED_Toggle(LED2);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 bac5 	b.w	8001b54 <BSP_LED_Toggle>
	...

080015cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_MspInit+0x2c>)
 80015ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	661a      	str	r2, [r3, #96]	; 0x60
 80015d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80015d8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	f002 0201 	and.w	r2, r2, #1
 80015de:	9200      	str	r2, [sp, #0]
 80015e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f4:	b002      	add	sp, #8
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015fc:	b500      	push	{lr}
 80015fe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	2214      	movs	r2, #20
 8001602:	2100      	movs	r1, #0
 8001604:	a803      	add	r0, sp, #12
 8001606:	f006 f988 	bl	800791a <memset>
  if(DFSDM1_Init == 0)
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_DFSDM_ChannelMspInit+0x5c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	bb03      	cbnz	r3, 8001652 <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001614:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001618:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800161a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800161e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001622:	661a      	str	r2, [r3, #96]	; 0x60
 8001624:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001626:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001630:	f042 0210 	orr.w	r2, r2, #16
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001640:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001644:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800164a:	2306      	movs	r3, #6
 800164c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f003 fc47 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001652:	b009      	add	sp, #36	; 0x24
 8001654:	f85d fb04 	ldr.w	pc, [sp], #4
 8001658:	20000708 	.word	0x20000708
 800165c:	48001000 	.word	0x48001000

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b510      	push	{r4, lr}
 8001662:	4604      	mov	r4, r0
 8001664:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	2214      	movs	r2, #20
 8001668:	2100      	movs	r1, #0
 800166a:	a803      	add	r0, sp, #12
 800166c:	f006 f955 	bl	800791a <memset>
  if(hi2c->Instance==I2C2)
 8001670:	6822      	ldr	r2, [r4, #0]
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_I2C_MspInit+0x60>)
 8001674:	429a      	cmp	r2, r3
 8001676:	d121      	bne.n	80016bc <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001678:	4c12      	ldr	r4, [pc, #72]	; (80016c4 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001684:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800168e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001692:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016a2:	2304      	movs	r3, #4
 80016a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f003 fc1b 	bl	8004ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80016b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016bc:	b008      	add	sp, #32
 80016be:	bd10      	pop	{r4, pc}
 80016c0:	40005800 	.word	0x40005800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 80016cc:	6802      	ldr	r2, [r0, #0]
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_I2C_MspDeInit+0x20>)
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d109      	bne.n	80016e8 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 80016d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80016da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80016e0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80016e4:	f003 bcd8 	b.w	8005098 <HAL_GPIO_DeInit>
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40005800 	.word	0x40005800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	48000400 	.word	0x48000400

080016f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016f8:	b510      	push	{r4, lr}
 80016fa:	4604      	mov	r4, r0
 80016fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	2214      	movs	r2, #20
 8001700:	2100      	movs	r1, #0
 8001702:	a803      	add	r0, sp, #12
 8001704:	f006 f909 	bl	800791a <memset>
  if(hqspi->Instance==QUADSPI)
 8001708:	6822      	ldr	r2, [r4, #0]
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_QSPI_MspInit+0x64>)
 800170c:	429a      	cmp	r2, r3
 800170e:	d122      	bne.n	8001756 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001710:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8001714:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 800171a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800171e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
 8001724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001726:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800172a:	9201      	str	r2, [sp, #4]
 800172c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800172e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	64da      	str	r2, [r3, #76]	; 0x4c
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001740:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001744:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800174e:	230a      	movs	r3, #10
 8001750:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001752:	f003 fbc5 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001756:	b008      	add	sp, #32
 8001758:	bd10      	pop	{r4, pc}
 800175a:	bf00      	nop
 800175c:	a0001000 	.word	0xa0001000
 8001760:	48001000 	.word	0x48001000

08001764 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001764:	b510      	push	{r4, lr}
 8001766:	4604      	mov	r4, r0
 8001768:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	2214      	movs	r2, #20
 800176c:	2100      	movs	r1, #0
 800176e:	a803      	add	r0, sp, #12
 8001770:	f006 f8d3 	bl	800791a <memset>
  if(hspi->Instance==SPI3)
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_SPI_MspInit+0x60>)
 8001778:	429a      	cmp	r2, r3
 800177a:	d120      	bne.n	80017be <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800177c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001782:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
 800178c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800178e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001798:	f042 0204 	orr.w	r2, r2, #4
 800179c:	64da      	str	r2, [r3, #76]	; 0x4c
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80017a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b6:	2306      	movs	r3, #6
 80017b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f003 fb91 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017be:	b008      	add	sp, #32
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	bf00      	nop
 80017c4:	40003c00 	.word	0x40003c00
 80017c8:	48000800 	.word	0x48000800

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_TIM_Base_MspInit+0x38>)
 80017d0:	6802      	ldr	r2, [r0, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d112      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017d6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80017da:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017de:	f042 0210 	orr.w	r2, r2, #16
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80017f2:	f003 fa59 	bl	8004ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017f6:	2036      	movs	r0, #54	; 0x36
 80017f8:	f003 fa8a 	bl	8004d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017fc:	b003      	add	sp, #12
 80017fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001802:	bf00      	nop
 8001804:	40001000 	.word	0x40001000

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	4604      	mov	r4, r0
 800180c:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	2214      	movs	r2, #20
 8001810:	2100      	movs	r1, #0
 8001812:	a807      	add	r0, sp, #28
 8001814:	f006 f881 	bl	800791a <memset>
  if(huart->Instance==UART4)
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <HAL_UART_MspInit+0xf4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11f      	bne.n	8001860 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001820:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_UART_MspInit+0xf8>)
 8001822:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001824:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
 800182a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800182c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001830:	9201      	str	r2, [sp, #4]
 8001832:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	64da      	str	r2, [r3, #76]	; 0x4c
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	9b02      	ldr	r3, [sp, #8]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001846:	2303      	movs	r3, #3
 8001848:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800184e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001852:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	a907      	add	r1, sp, #28
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f003 fb41 	bl	8004ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800185e:	e029      	b.n	80018b4 <HAL_UART_MspInit+0xac>
  else if(huart->Instance==USART1)
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <HAL_UART_MspInit+0xfc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d128      	bne.n	80018b8 <HAL_UART_MspInit+0xb0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	4827      	ldr	r0, [pc, #156]	; (8001908 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800186a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800186c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001870:	661a      	str	r2, [r3, #96]	; 0x60
 8001872:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001874:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001878:	9203      	str	r2, [sp, #12]
 800187a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800187e:	f042 0202 	orr.w	r2, r2, #2
 8001882:	64da      	str	r2, [r3, #76]	; 0x4c
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	9304      	str	r3, [sp, #16]
 800188c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800188e:	23c0      	movs	r3, #192	; 0xc0
 8001890:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189a:	2307      	movs	r3, #7
 800189c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f003 fb1e 	bl	8004ee0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80018a4:	2025      	movs	r0, #37	; 0x25
 80018a6:	2200      	movs	r2, #0
 80018a8:	4621      	mov	r1, r4
 80018aa:	f003 f9fd 	bl	8004ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018ae:	2025      	movs	r0, #37	; 0x25
 80018b0:	f003 fa2e 	bl	8004d10 <HAL_NVIC_EnableIRQ>
}
 80018b4:	b00c      	add	sp, #48	; 0x30
 80018b6:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_UART_MspInit+0x104>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d1fa      	bne.n	80018b4 <HAL_UART_MspInit+0xac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_UART_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <HAL_UART_MspInit+0x108>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80018c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
 80018ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80018d0:	9205      	str	r2, [sp, #20]
 80018d2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d6:	f042 0208 	orr.w	r2, r2, #8
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	9306      	str	r3, [sp, #24]
 80018e4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80018e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f4:	2307      	movs	r3, #7
 80018f6:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	a907      	add	r1, sp, #28
 80018fa:	e7ae      	b.n	800185a <HAL_UART_MspInit+0x52>
 80018fc:	40004c00 	.word	0x40004c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40013800 	.word	0x40013800
 8001908:	48000400 	.word	0x48000400
 800190c:	40004800 	.word	0x40004800
 8001910:	48000c00 	.word	0x48000c00

08001914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001914:	b510      	push	{r4, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	2214      	movs	r2, #20
 800191c:	2100      	movs	r1, #0
 800191e:	a803      	add	r0, sp, #12
 8001920:	f005 fffb 	bl	800791a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192a:	d13c      	bne.n	80019a6 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4c20      	ldr	r4, [pc, #128]	; (80019b0 <HAL_PCD_MspInit+0x9c>)
 800192e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001936:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001940:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001942:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800194a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800194c:	f003 fac8 	bl	8004ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001950:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001954:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001964:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800196a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f003 fab8 	bl	8004ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001970:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001972:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001976:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001978:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	d410      	bmi.n	80019aa <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800198a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800199a:	f004 f9e3 	bl	8005d64 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a4:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019a6:	b008      	add	sp, #32
 80019a8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80019aa:	f004 f9db 	bl	8005d64 <HAL_PWREx_EnableVddUSB>
}
 80019ae:	e7fa      	b.n	80019a6 <HAL_PCD_MspInit+0x92>
 80019b0:	40021000 	.word	0x40021000

080019b4 <NMI_Handler>:
 80019b4:	4770      	bx	lr

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	e7fe      	b.n	80019bc <UsageFault_Handler>

080019be <SVC_Handler>:
 80019be:	4770      	bx	lr

080019c0 <DebugMon_Handler>:
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	4770      	bx	lr

080019c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f003 b942 	b.w	8004c4c <HAL_IncTick>

080019c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019ca:	2020      	movs	r0, #32
 80019cc:	f003 fc08 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80019d0:	2040      	movs	r0, #64	; 0x40
 80019d2:	f003 fc05 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80019d6:	2080      	movs	r0, #128	; 0x80
 80019d8:	f003 fc02 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019dc:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019e4:	f003 bbfc 	b.w	80051e0 <HAL_GPIO_EXTI_IRQHandler>

080019e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <USART1_IRQHandler+0x14>)
 80019ec:	f005 fa8c 	bl	8006f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  RX_BUFF[0] = USART1->RDR;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <USART1_IRQHandler+0x18>)
 80019f2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <USART1_IRQHandler+0x1c>)
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	bd08      	pop	{r3, pc}
 80019fa:	bf00      	nop
 80019fc:	20000cc8 	.word	0x20000cc8
 8001a00:	40013800 	.word	0x40013800
 8001a04:	20000e7c 	.word	0x20000e7c

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a0e:	f003 fbe7 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001a12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a16:	f003 fbe3 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a1e:	f003 fbdf 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a26:	f003 fbdb 	bl	80051e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001a32:	f003 bbd5 	b.w	80051e0 <HAL_GPIO_EXTI_IRQHandler>
	...

08001a38 <TIM6_DAC_IRQHandler>:
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  trigger_1sec = 1;
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <TIM6_DAC_IRQHandler+0xc>)
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <TIM6_DAC_IRQHandler+0x10>)
  trigger_1sec = 1;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	f005 b8f2 	b.w	8006c28 <HAL_TIM_IRQHandler>
 8001a44:	20000704 	.word	0x20000704
 8001a48:	20000d4c 	.word	0x20000d4c

08001a4c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	490f      	ldr	r1, [pc, #60]	; (8001a8c <SystemInit+0x40>)
 8001a4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <SystemInit+0x44>)
 8001a5c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a5e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001a60:	f042 0201 	orr.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001a66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001a6e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001a72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a80:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a82:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a88:	608b      	str	r3, [r1, #8]
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	40021000 	.word	0x40021000

08001a94 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8001a96:	482a      	ldr	r0, [pc, #168]	; (8001b40 <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001a98:	4c2a      	ldr	r4, [pc, #168]	; (8001b44 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001a9c:	4d2b      	ldr	r5, [pc, #172]	; (8001b4c <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001a9e:	4f2c      	ldr	r7, [pc, #176]	; (8001b50 <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001aaa:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001aac:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001aae:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ab0:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ab2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001aba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8001abc:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ac6:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001acc:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ace:	2312      	movs	r3, #18
 8001ad0:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ad6:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001ad8:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ada:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001adc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ade:	f003 f9ff 	bl	8004ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ae2:	a903      	add	r1, sp, #12
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	f003 f9fb 	bl	8004ee0 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001aea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001af0:	65ab      	str	r3, [r5, #88]	; 0x58
 8001af2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8001afc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b02:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b06:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b0a:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	210f      	movs	r1, #15
 8001b10:	2021      	movs	r0, #33	; 0x21
 8001b12:	f003 f8c9 	bl	8004ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b16:	2021      	movs	r0, #33	; 0x21
 8001b18:	f003 f8fa 	bl	8004d10 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001b1c:	4632      	mov	r2, r6
 8001b1e:	210f      	movs	r1, #15
 8001b20:	2022      	movs	r0, #34	; 0x22
 8001b22:	f003 f8c1 	bl	8004ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001b26:	2022      	movs	r0, #34	; 0x22
 8001b28:	f003 f8f2 	bl	8004d10 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f003 fce3 	bl	80054f8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001b32:	4631      	mov	r1, r6
 8001b34:	4620      	mov	r0, r4
 8001b36:	f003 ffe9 	bl	8005b0c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001b3a:	b009      	add	sp, #36	; 0x24
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40005800 	.word	0x40005800
 8001b44:	20000ef8 	.word	0x20000ef8
 8001b48:	00702681 	.word	0x00702681
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <BSP_LED_Toggle+0x10>)
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001b5e:	f003 bb3a 	b.w	80051d6 <HAL_GPIO_TogglePin>
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008

08001b68 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8001b68:	f7ff bf94 	b.w	8001a94 <I2Cx_Init.constprop.8>

08001b6c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001b76:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	460a      	mov	r2, r1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	4601      	mov	r1, r0
 8001b84:	9400      	str	r4, [sp, #0]
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <SENSOR_IO_Write+0x30>)
 8001b88:	f003 fe4a 	bl	8005820 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001b8c:	b120      	cbz	r0, 8001b98 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8001b8e:	4803      	ldr	r0, [pc, #12]	; (8001b9c <SENSOR_IO_Write+0x30>)
 8001b90:	f003 fd03 	bl	800559a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001b94:	f7ff ff7e 	bl	8001a94 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8001b98:	b006      	add	sp, #24
 8001b9a:	bd10      	pop	{r4, pc}
 8001b9c:	20000ef8 	.word	0x20000ef8

08001ba0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8001ba2:	aa06      	add	r2, sp, #24
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <SENSOR_IO_Read+0x38>)
 8001bbc:	f003 fee8 	bl	8005990 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001bc0:	b120      	cbz	r0, 8001bcc <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <SENSOR_IO_Read+0x38>)
 8001bc4:	f003 fce9 	bl	800559a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001bc8:	f7ff ff64 	bl	8001a94 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8001bcc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001bd0:	b007      	add	sp, #28
 8001bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bd6:	bf00      	nop
 8001bd8:	20000ef8 	.word	0x20000ef8

08001bdc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001bde:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001be2:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8001be6:	460a      	mov	r2, r1
 8001be8:	2301      	movs	r3, #1
 8001bea:	4601      	mov	r1, r0
 8001bec:	4806      	ldr	r0, [pc, #24]	; (8001c08 <SENSOR_IO_ReadMultiple+0x2c>)
 8001bee:	f003 fecf 	bl	8005990 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	b120      	cbz	r0, 8001c00 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <SENSOR_IO_ReadMultiple+0x2c>)
 8001bf8:	f003 fccf 	bl	800559a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001bfc:	f7ff ff4a 	bl	8001a94 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001c00:	4620      	mov	r0, r4
 8001c02:	b004      	add	sp, #16
 8001c04:	bd10      	pop	{r4, pc}
 8001c06:	bf00      	nop
 8001c08:	20000ef8 	.word	0x20000ef8

08001c0c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001c0c:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001c0e:	4c07      	ldr	r4, [pc, #28]	; (8001c2c <BSP_ACCELERO_Init+0x20>)
 8001c10:	68a3      	ldr	r3, [r4, #8]
 8001c12:	4798      	blx	r3
 8001c14:	286a      	cmp	r0, #106	; 0x6a
 8001c16:	d107      	bne.n	8001c28 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c1a:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001c1e:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001c24:	2000      	movs	r0, #0
 8001c26:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8001c28:	2001      	movs	r0, #1
  }  

  return ret;
}
 8001c2a:	bd10      	pop	{r4, pc}
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	2000070c 	.word	0x2000070c

08001c34 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001c34:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001c36:	4c07      	ldr	r4, [pc, #28]	; (8001c54 <BSP_GYRO_Init+0x20>)
 8001c38:	68a3      	ldr	r3, [r4, #8]
 8001c3a:	4798      	blx	r3
 8001c3c:	286a      	cmp	r0, #106	; 0x6a
 8001c3e:	d107      	bne.n	8001c50 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001c42:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001c46:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 8001c50:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001c52:	bd10      	pop	{r4, pc}
 8001c54:	20000224 	.word	0x20000224
 8001c58:	20000710 	.word	0x20000710

08001c5c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001c5c:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001c5e:	4c07      	ldr	r4, [pc, #28]	; (8001c7c <BSP_HSENSOR_Init+0x20>)
 8001c60:	20be      	movs	r0, #190	; 0xbe
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	4798      	blx	r3
 8001c66:	28bc      	cmp	r0, #188	; 0xbc
 8001c68:	d106      	bne.n	8001c78 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c6c:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 8001c6e:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c74:	2000      	movs	r0, #0
 8001c76:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8001c78:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001c7a:	bd10      	pop	{r4, pc}
 8001c7c:	20000194 	.word	0x20000194
 8001c80:	20000714 	.word	0x20000714

08001c84 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <BSP_HSENSOR_ReadHumidity+0xc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	20be      	movs	r0, #190	; 0xbe
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4718      	bx	r3
 8001c8e:	bf00      	nop
 8001c90:	20000714 	.word	0x20000714

08001c94 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001c96:	4d0f      	ldr	r5, [pc, #60]	; (8001cd4 <BSP_MAGNETO_Init+0x40>)
 8001c98:	68ab      	ldr	r3, [r5, #8]
 8001c9a:	4798      	blx	r3
 8001c9c:	283d      	cmp	r0, #61	; 0x3d
 8001c9e:	d117      	bne.n	8001cd0 <BSP_MAGNETO_Init+0x3c>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <BSP_MAGNETO_Init+0x44>)
 8001ca2:	601d      	str	r5, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001ca4:	2358      	movs	r3, #88	; 0x58
 8001ca6:	f88d 3000 	strb.w	r3, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001caa:	2308      	movs	r3, #8
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001cac:	2400      	movs	r4, #0
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001cae:	f88d 3003 	strb.w	r3, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001cb8:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001cbc:	f88d 4002 	strb.w	r4, [sp, #2]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001cc0:	aa02      	add	r2, sp, #8
 8001cc2:	e912 0003 	ldmdb	r2, {r0, r1}
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001cca:	4620      	mov	r0, r4
  } 

  return ret;  
}
 8001ccc:	b003      	add	sp, #12
 8001cce:	bd30      	pop	{r4, r5, pc}
    ret = MAGNETO_ERROR;
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	e7fb      	b.n	8001ccc <BSP_MAGNETO_Init+0x38>
 8001cd4:	200001b0 	.word	0x200001b0
 8001cd8:	20000718 	.word	0x20000718

08001cdc <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8001cdc:	b500      	push	{lr}
 8001cde:	b089      	sub	sp, #36	; 0x24
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8001ce0:	a901      	add	r1, sp, #4
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <VL53L0X_PROXIMITY_GetDistance+0x18>)
 8001ce4:	f000 ff85 	bl	8002bf2 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
}
 8001ce8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8001cec:	b009      	add	sp, #36	; 0x24
 8001cee:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	4d0c      	ldr	r5, [pc, #48]	; (8001d2c <VL53L0X_PROXIMITY_MspInit+0x34>)
{
 8001cfc:	b086      	sub	sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cfe:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001d02:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001d04:	a901      	add	r1, sp, #4
 8001d06:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001d0a:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f003 f8e6 	bl	8004ee0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8001d14:	4622      	mov	r2, r4
 8001d16:	4631      	mov	r1, r6
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f003 fa57 	bl	80051cc <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8001d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d22:	f002 ffa1 	bl	8004c68 <HAL_Delay>
}
 8001d26:	b006      	add	sp, #24
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	bf00      	nop
 8001d2c:	48000800 	.word	0x48000800

08001d30 <VL53L0X_PROXIMITY_Init>:
{
 8001d30:	b510      	push	{r4, lr}
 8001d32:	b0f8      	sub	sp, #480	; 0x1e0
  uint16_t vl53l0x_id = 0;
 8001d34:	2400      	movs	r4, #0
 8001d36:	f8ad 417a 	strh.w	r4, [sp, #378]	; 0x17a
  SENSOR_IO_Init();
 8001d3a:	f7ff ff15 	bl	8001b68 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8001d3e:	f7ff ffdb 	bl	8001cf8 <VL53L0X_PROXIMITY_MspInit>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8001d42:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8001d44:	4c19      	ldr	r4, [pc, #100]	; (8001dac <VL53L0X_PROXIMITY_Init+0x7c>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8001d46:	2263      	movs	r2, #99	; 0x63
 8001d48:	a85f      	add	r0, sp, #380	; 0x17c
 8001d4a:	f005 fde6 	bl	800791a <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8001d4e:	a95f      	add	r1, sp, #380	; 0x17c
 8001d50:	4620      	mov	r0, r4
 8001d52:	f000 fb59 	bl	8002408 <VL53L0X_GetDeviceInfo>
 8001d56:	bb30      	cbnz	r0, 8001da6 <VL53L0X_PROXIMITY_Init+0x76>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8001d58:	f50d 72bd 	add.w	r2, sp, #378	; 0x17a
 8001d5c:	21c0      	movs	r1, #192	; 0xc0
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f002 fe44 	bl	80049ec <VL53L0X_RdWord>
 8001d64:	b9e8      	cbnz	r0, 8001da2 <VL53L0X_PROXIMITY_Init+0x72>
      if (vl53l0x_id == VL53L0X_ID)
 8001d66:	f8bd 217a 	ldrh.w	r2, [sp, #378]	; 0x17a
 8001d6a:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d111      	bne.n	8001d96 <VL53L0X_PROXIMITY_Init+0x66>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8001d72:	4620      	mov	r0, r4
 8001d74:	f000 fd28 	bl	80027c8 <VL53L0X_DataInit>
 8001d78:	b978      	cbnz	r0, 8001d9a <VL53L0X_PROXIMITY_Init+0x6a>
          Dev.Present = 1;
 8001d7a:	2301      	movs	r3, #1
          SetupSingleShot(Dev);
 8001d7c:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001d80:	f104 0110 	add.w	r1, r4, #16
 8001d84:	4668      	mov	r0, sp
          Dev.Present = 1;
 8001d86:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
          SetupSingleShot(Dev);
 8001d8a:	f005 fdbb 	bl	8007904 <memcpy>
 8001d8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d92:	f002 feaf 	bl	8004af4 <SetupSingleShot>
}
 8001d96:	b078      	add	sp, #480	; 0x1e0
 8001d98:	bd10      	pop	{r4, pc}
          printf("VL53L0X Time of Flight Failed to send its ID!\n\r");
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <VL53L0X_PROXIMITY_Init+0x80>)
    printf("VL53L0X Time of Flight Failed to get infos!\n\r");
 8001d9c:	f006 fa32 	bl	8008204 <iprintf>
}
 8001da0:	e7f9      	b.n	8001d96 <VL53L0X_PROXIMITY_Init+0x66>
      printf("VL53L0X Time of Flight Failed to Initialize!\n\r");
 8001da2:	4804      	ldr	r0, [pc, #16]	; (8001db4 <VL53L0X_PROXIMITY_Init+0x84>)
 8001da4:	e7fa      	b.n	8001d9c <VL53L0X_PROXIMITY_Init+0x6c>
    printf("VL53L0X Time of Flight Failed to get infos!\n\r");
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <VL53L0X_PROXIMITY_Init+0x88>)
 8001da8:	e7f8      	b.n	8001d9c <VL53L0X_PROXIMITY_Init+0x6c>
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c
 8001db0:	0800a4fc 	.word	0x0800a4fc
 8001db4:	0800a52c 	.word	0x0800a52c
 8001db8:	0800a55b 	.word	0x0800a55b

08001dbc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001dbc:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001dbe:	4c07      	ldr	r4, [pc, #28]	; (8001ddc <BSP_PSENSOR_Init+0x20>)
 8001dc0:	20ba      	movs	r0, #186	; 0xba
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	28b1      	cmp	r0, #177	; 0xb1
 8001dc8:	d106      	bne.n	8001dd8 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001dcc:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8001dce:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 8001dd8:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001dda:	bd10      	pop	{r4, pc}
 8001ddc:	200001e4 	.word	0x200001e4
 8001de0:	2000071c 	.word	0x2000071c

08001de4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001de4:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001de6:	4c06      	ldr	r4, [pc, #24]	; (8001e00 <BSP_TSENSOR_Init+0x1c>)
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <BSP_TSENSOR_Init+0x20>)
 8001dea:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001dec:	f7ff febc 	bl	8001b68 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	20be      	movs	r0, #190	; 0xbe
 8001df8:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	bd10      	pop	{r4, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000720 	.word	0x20000720
 8001e04:	200001a0 	.word	0x200001a0

08001e08 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <BSP_TSENSOR_ReadTemp+0xc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	20be      	movs	r0, #190	; 0xbe
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4718      	bx	r3
 8001e12:	bf00      	nop
 8001e14:	20000720 	.word	0x20000720

08001e18 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001e18:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e1a:	b2c4      	uxtb	r4, r0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7ff febe 	bl	8001ba0 <SENSOR_IO_Read>
 8001e24:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e28:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	2120      	movs	r1, #32
}
 8001e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e34:	f7ff be9a 	b.w	8001b6c <SENSOR_IO_Write>

08001e38 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e38:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001e3a:	b2c4      	uxtb	r4, r0
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4620      	mov	r0, r4
 8001e40:	f7ff feae 	bl	8001ba0 <SENSOR_IO_Read>
 8001e44:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e48:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	2120      	movs	r1, #32
}
 8001e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001e54:	f7ff be8a 	b.w	8001b6c <SENSOR_IO_Write>

08001e58 <HTS221_H_ReadID>:
{  
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8001e5c:	f7ff fe84 	bl	8001b68 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001e60:	b2e0      	uxtb	r0, r4
 8001e62:	210f      	movs	r1, #15
}
 8001e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001e68:	f7ff be9a 	b.w	8001ba0 <SENSOR_IO_Read>

08001e6c <HTS221_H_ReadHumidity>:
{
 8001e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001e70:	fa5f f880 	uxtb.w	r8, r0
 8001e74:	2302      	movs	r3, #2
 8001e76:	aa01      	add	r2, sp, #4
 8001e78:	21b0      	movs	r1, #176	; 0xb0
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	f7ff feae 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001e80:	2302      	movs	r3, #2
 8001e82:	aa01      	add	r2, sp, #4
 8001e84:	21b6      	movs	r1, #182	; 0xb6
 8001e86:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8001e88:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8001e8c:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001e90:	f7ff fea4 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e94:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8001e98:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001e9c:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e9e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001ea2:	aa01      	add	r2, sp, #4
 8001ea4:	21ba      	movs	r1, #186	; 0xba
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	f7ff fe98 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001eac:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001eae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001eb2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001eb6:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001eb8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001ebc:	21a8      	movs	r1, #168	; 0xa8
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	4640      	mov	r0, r8
 8001ec2:	f7ff fe8b 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ec6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001eca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ece:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	1bdb      	subs	r3, r3, r7
 8001ed6:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 8001eda:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8001edc:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001ede:	1bab      	subs	r3, r5, r6
 8001ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee4:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001ee8:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	1be4      	subs	r4, r4, r7
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	ee07 4a10 	vmov	s14, r4
 8001ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001efc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001f00:	ee07 6a90 	vmov	s15, r6
 8001f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f08:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f44 <HTS221_H_ReadHumidity+0xd8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001f0c:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001f10:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001f14:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	dc0d      	bgt.n	8001f3e <HTS221_H_ReadHumidity+0xd2>
        : tmp_f;
 8001f22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001f48 <HTS221_H_ReadHumidity+0xdc>
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	bf48      	it	mi
 8001f30:	eef0 7a47 	vmovmi.f32	s15, s14
}
 8001f34:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001f38:	b002      	add	sp, #8
 8001f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        : ( tmp_f <    0.0f ) ?    0.0f
 8001f3e:	eef0 7a47 	vmov.f32	s15, s14
 8001f42:	e7f7      	b.n	8001f34 <HTS221_H_ReadHumidity+0xc8>
 8001f44:	447a0000 	.word	0x447a0000
 8001f48:	00000000 	.word	0x00000000

08001f4c <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f50:	fa5f f880 	uxtb.w	r8, r0
 8001f54:	aa01      	add	r2, sp, #4
 8001f56:	2302      	movs	r3, #2
 8001f58:	21b2      	movs	r1, #178	; 0xb2
 8001f5a:	4640      	mov	r0, r8
 8001f5c:	f7ff fe3e 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f60:	2135      	movs	r1, #53	; 0x35
 8001f62:	4640      	mov	r0, r8
 8001f64:	f7ff fe1c 	bl	8001ba0 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f68:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f6a:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f6e:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f72:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f74:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f78:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f7c:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f7e:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f80:	2304      	movs	r3, #4
 8001f82:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f86:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f88:	21bc      	movs	r1, #188	; 0xbc
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	f7ff fe26 	bl	8001bdc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f90:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001f94:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f98:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f9c:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fa0:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fa4:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fa6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001faa:	21aa      	movs	r1, #170	; 0xaa
 8001fac:	2302      	movs	r3, #2
 8001fae:	4640      	mov	r0, r8
 8001fb0:	f7ff fe14 	bl	8001bdc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001fb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fc0:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 8001fc6:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	1bab      	subs	r3, r5, r6
 8001fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd2:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fd6:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	1be4      	subs	r4, r4, r7
 8001fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe2:	ee07 4a10 	vmov	s14, r4
 8001fe6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fee:	ee07 6a90 	vmov	s15, r6
 8001ff2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 8001ff6:	ee36 0a80 	vadd.f32	s0, s13, s0
 8001ffa:	b002      	add	sp, #8
 8001ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002000 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002000:	b507      	push	{r0, r1, r2, lr}
 8002002:	ab02      	add	r3, sp, #8
 8002004:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002008:	2120      	movs	r1, #32
 800200a:	f89d 2000 	ldrb.w	r2, [sp]
 800200e:	203c      	movs	r0, #60	; 0x3c
 8002010:	f7ff fdac 	bl	8001b6c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002014:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002018:	2121      	movs	r1, #33	; 0x21
 800201a:	203c      	movs	r0, #60	; 0x3c
 800201c:	f7ff fda6 	bl	8001b6c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002020:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002024:	2122      	movs	r1, #34	; 0x22
 8002026:	203c      	movs	r0, #60	; 0x3c
 8002028:	f7ff fda0 	bl	8001b6c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800202c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002030:	2123      	movs	r1, #35	; 0x23
 8002032:	203c      	movs	r0, #60	; 0x3c
 8002034:	f7ff fd9a 	bl	8001b6c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002038:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800203c:	2124      	movs	r1, #36	; 0x24
 800203e:	203c      	movs	r0, #60	; 0x3c
}
 8002040:	b003      	add	sp, #12
 8002042:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002046:	f7ff bd91 	b.w	8001b6c <SENSOR_IO_Write>

0800204a <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800204a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800204c:	2122      	movs	r1, #34	; 0x22
 800204e:	203c      	movs	r0, #60	; 0x3c
 8002050:	f7ff fda6 	bl	8001ba0 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002054:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002058:	f042 0203 	orr.w	r2, r2, #3
 800205c:	2122      	movs	r1, #34	; 0x22
 800205e:	203c      	movs	r0, #60	; 0x3c
}
 8002060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002064:	f7ff bd82 	b.w	8001b6c <SENSOR_IO_Write>

08002068 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002068:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800206a:	2122      	movs	r1, #34	; 0x22
{  
 800206c:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800206e:	203c      	movs	r0, #60	; 0x3c
 8002070:	f7ff fd96 	bl	8001ba0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002074:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8002078:	b10c      	cbz	r4, 800207e <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800207a:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800207e:	2122      	movs	r1, #34	; 0x22
 8002080:	203c      	movs	r0, #60	; 0x3c
}
 8002082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002086:	f7ff bd71 	b.w	8001b6c <SENSOR_IO_Write>

0800208a <LIS3MDL_MagReadID>:
{
 800208a:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800208c:	f7ff fd6c 	bl	8001b68 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002090:	210f      	movs	r1, #15
 8002092:	203c      	movs	r0, #60	; 0x3c
}
 8002094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002098:	f7ff bd82 	b.w	8001ba0 <SENSOR_IO_Read>

0800209c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800209c:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800209e:	2121      	movs	r1, #33	; 0x21
{
 80020a0:	b085      	sub	sp, #20
 80020a2:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80020a4:	203c      	movs	r0, #60	; 0x3c
 80020a6:	f7ff fd7b 	bl	8001ba0 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80020aa:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80020ac:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80020ae:	aa02      	add	r2, sp, #8
 80020b0:	21a8      	movs	r1, #168	; 0xa8
 80020b2:	203c      	movs	r0, #60	; 0x3c
 80020b4:	f7ff fd92 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80020b8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80020bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80020c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80020c4:	f8ad 3000 	strh.w	r3, [sp]
 80020c8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80020cc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80020d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80020d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80020d8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80020dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80020e0:	f004 0460 	and.w	r4, r4, #96	; 0x60
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80020e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  switch(ctrlm & 0x60)
 80020e8:	2c20      	cmp	r4, #32
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80020ea:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 80020ee:	d021      	beq.n	8002134 <LIS3MDL_MagReadXYZ+0x98>
 80020f0:	d803      	bhi.n	80020fa <LIS3MDL_MagReadXYZ+0x5e>
 80020f2:	b14c      	cbz	r4, 8002108 <LIS3MDL_MagReadXYZ+0x6c>
  float sensitivity = 0;
 80020f4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002140 <LIS3MDL_MagReadXYZ+0xa4>
 80020f8:	e008      	b.n	800210c <LIS3MDL_MagReadXYZ+0x70>
  switch(ctrlm & 0x60)
 80020fa:	2c40      	cmp	r4, #64	; 0x40
 80020fc:	d01d      	beq.n	800213a <LIS3MDL_MagReadXYZ+0x9e>
 80020fe:	2c60      	cmp	r4, #96	; 0x60
 8002100:	d1f8      	bne.n	80020f4 <LIS3MDL_MagReadXYZ+0x58>
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002102:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002144 <LIS3MDL_MagReadXYZ+0xa8>
    break;    
 8002106:	e001      	b.n	800210c <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002108:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002148 <LIS3MDL_MagReadXYZ+0xac>
 800210c:	2200      	movs	r2, #0
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800210e:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002122:	ee17 3a90 	vmov	r3, s15
 8002126:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 800212a:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 800212c:	2a03      	cmp	r2, #3
 800212e:	d1ee      	bne.n	800210e <LIS3MDL_MagReadXYZ+0x72>
  }
}
 8002130:	b005      	add	sp, #20
 8002132:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002134:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800214c <LIS3MDL_MagReadXYZ+0xb0>
    break;
 8002138:	e7e8      	b.n	800210c <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800213a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002150 <LIS3MDL_MagReadXYZ+0xb4>
    break;
 800213e:	e7e5      	b.n	800210c <LIS3MDL_MagReadXYZ+0x70>
 8002140:	00000000 	.word	0x00000000
 8002144:	3f147ae1 	.word	0x3f147ae1
 8002148:	3e0f5c29 	.word	0x3e0f5c29
 800214c:	3e947ae1 	.word	0x3e947ae1
 8002150:	3edc28f6 	.word	0x3edc28f6

08002154 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002154:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002156:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002158:	b2c6      	uxtb	r6, r0
 800215a:	ad01      	add	r5, sp, #4
 800215c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8002160:	b2c9      	uxtb	r1, r1
 8002162:	4630      	mov	r0, r6
 8002164:	f7ff fd1c 	bl	8001ba0 <SENSOR_IO_Read>
 8002168:	5528      	strb	r0, [r5, r4]
 800216a:	3401      	adds	r4, #1
  for(i = 0; i < 3; i++)
 800216c:	2c03      	cmp	r4, #3
 800216e:	d1f5      	bne.n	800215c <LPS22HB_P_ReadPressure+0x8>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002170:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002174:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800217e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8002182:	4313      	orrs	r3, r2

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002184:	021a      	lsls	r2, r3, #8
    tmp |= 0xFF000000;
 8002186:	bf48      	it	mi
 8002188:	f043 437f 	orrmi.w	r3, r3, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800218c:	2264      	movs	r2, #100	; 0x64
 800218e:	4353      	muls	r3, r2
 8002190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002194:	fb93 f3f2 	sdiv	r3, r3, r2

  return (float)((float)raw_press / 100.0f);
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 80021a0:	eddf 7a02 	vldr	s15, [pc, #8]	; 80021ac <LPS22HB_P_ReadPressure+0x58>
 80021a4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80021a8:	b002      	add	sp, #8
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	42c80000 	.word	0x42c80000

080021b0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80021b0:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80021b2:	b2c4      	uxtb	r4, r0
 80021b4:	211a      	movs	r1, #26
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fcf2 	bl	8001ba0 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80021bc:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	4620      	mov	r0, r4
 80021c6:	211a      	movs	r1, #26
 80021c8:	f7ff fcd0 	bl	8001b6c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80021cc:	2110      	movs	r1, #16
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff fce6 	bl	8001ba0 <SENSOR_IO_Read>
 80021d4:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80021d8:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80021dc:	4620      	mov	r0, r4
 80021de:	2110      	movs	r1, #16
}  
 80021e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80021e4:	f7ff bcc2 	b.w	8001b6c <SENSOR_IO_Write>

080021e8 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 80021e8:	f7ff bfe2 	b.w	80021b0 <LPS22HB_Init>

080021ec <LPS22HB_P_ReadID>:
{  
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 80021f0:	f7ff fcba 	bl	8001b68 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80021f4:	b2e0      	uxtb	r0, r4
 80021f6:	210f      	movs	r1, #15
}
 80021f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80021fc:	f7ff bcd0 	b.w	8001ba0 <SENSOR_IO_Read>

08002200 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002200:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002202:	2110      	movs	r1, #16
{  
 8002204:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002206:	20d4      	movs	r0, #212	; 0xd4
 8002208:	f7ff fcca 	bl	8001ba0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 800220c:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8002210:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	2110      	movs	r1, #16
 8002216:	20d4      	movs	r0, #212	; 0xd4
 8002218:	f7ff fca8 	bl	8001b6c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800221c:	2112      	movs	r1, #18
 800221e:	20d4      	movs	r0, #212	; 0xd4
 8002220:	f7ff fcbe 	bl	8001ba0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002224:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002228:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 800222c:	2112      	movs	r1, #18
 800222e:	20d4      	movs	r0, #212	; 0xd4
}
 8002230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002234:	f7ff bc9a 	b.w	8001b6c <SENSOR_IO_Write>

08002238 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002238:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800223a:	2110      	movs	r1, #16
 800223c:	20d4      	movs	r0, #212	; 0xd4
 800223e:	f7ff fcaf 	bl	8001ba0 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002242:	2110      	movs	r1, #16
 8002244:	f000 020f 	and.w	r2, r0, #15
}
 8002248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800224c:	20d4      	movs	r0, #212	; 0xd4
 800224e:	f7ff bc8d 	b.w	8001b6c <SENSOR_IO_Write>

08002252 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002252:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002254:	2115      	movs	r1, #21
{
 8002256:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002258:	20d4      	movs	r0, #212	; 0xd4
 800225a:	f7ff fca1 	bl	8001ba0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800225e:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002262:	b10c      	cbz	r4, 8002268 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002264:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002268:	2115      	movs	r1, #21
 800226a:	20d4      	movs	r0, #212	; 0xd4
}
 800226c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002270:	f7ff bc7c 	b.w	8001b6c <SENSOR_IO_Write>

08002274 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002274:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002276:	2111      	movs	r1, #17
{  
 8002278:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800227a:	20d4      	movs	r0, #212	; 0xd4
 800227c:	f7ff fc90 	bl	8001ba0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8002280:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8002284:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	2111      	movs	r1, #17
 800228a:	20d4      	movs	r0, #212	; 0xd4
 800228c:	f7ff fc6e 	bl	8001b6c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002290:	2112      	movs	r1, #18
 8002292:	20d4      	movs	r0, #212	; 0xd4
 8002294:	f7ff fc84 	bl	8001ba0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8002298:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800229c:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80022a0:	2112      	movs	r1, #18
 80022a2:	20d4      	movs	r0, #212	; 0xd4
}
 80022a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80022a8:	f7ff bc60 	b.w	8001b6c <SENSOR_IO_Write>

080022ac <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80022ac:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80022ae:	2111      	movs	r1, #17
 80022b0:	20d4      	movs	r0, #212	; 0xd4
 80022b2:	f7ff fc75 	bl	8001ba0 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80022b6:	2111      	movs	r1, #17
 80022b8:	f000 020f 	and.w	r2, r0, #15
}
 80022bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80022c0:	20d4      	movs	r0, #212	; 0xd4
 80022c2:	f7ff bc53 	b.w	8001b6c <SENSOR_IO_Write>

080022c6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80022c6:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80022c8:	2116      	movs	r1, #22
{  
 80022ca:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80022cc:	20d4      	movs	r0, #212	; 0xd4
 80022ce:	f7ff fc67 	bl	8001ba0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80022d2:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 80022d6:	b10c      	cbz	r4, 80022dc <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80022d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80022dc:	2116      	movs	r1, #22
 80022de:	20d4      	movs	r0, #212	; 0xd4
}
 80022e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80022e4:	f7ff bc42 	b.w	8001b6c <SENSOR_IO_Write>

080022e8 <LSM6DSL_GyroReadID>:
{
 80022e8:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 80022ea:	f7ff fc3d 	bl	8001b68 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80022ee:	210f      	movs	r1, #15
 80022f0:	20d4      	movs	r0, #212	; 0xd4
}
 80022f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80022f6:	f7ff bc53 	b.w	8001ba0 <SENSOR_IO_Read>

080022fa <LSM6DSL_AccReadID>:
 80022fa:	f7ff bff5 	b.w	80022e8 <LSM6DSL_GyroReadID>
	...

08002300 <LSM6DSL_AccReadXYZ>:
{
 8002300:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002302:	2110      	movs	r1, #16
{
 8002304:	b085      	sub	sp, #20
 8002306:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002308:	20d4      	movs	r0, #212	; 0xd4
 800230a:	f7ff fc49 	bl	8001ba0 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800230e:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002310:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002312:	aa02      	add	r2, sp, #8
 8002314:	2128      	movs	r1, #40	; 0x28
 8002316:	20d4      	movs	r0, #212	; 0xd4
 8002318:	f7ff fc60 	bl	8001bdc <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800231c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002320:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002324:	4817      	ldr	r0, [pc, #92]	; (8002384 <LSM6DSL_AccReadXYZ+0x84>)
 8002326:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800232a:	f8ad 3000 	strh.w	r3, [sp]
 800232e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002332:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002336:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800233a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800233e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002342:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002346:	f004 040c 	and.w	r4, r4, #12
 800234a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800234e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002352:	ed90 7a00 	vldr	s14, [r0]
 8002356:	f8ad 3004 	strh.w	r3, [sp, #4]
 800235a:	2200      	movs	r2, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800235c:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8002378:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 800237a:	2a03      	cmp	r2, #3
 800237c:	d1ee      	bne.n	800235c <LSM6DSL_AccReadXYZ+0x5c>
}
 800237e:	b005      	add	sp, #20
 8002380:	bd30      	pop	{r4, r5, pc}
 8002382:	bf00      	nop
 8002384:	0800a58c 	.word	0x0800a58c

08002388 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002388:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800238a:	2111      	movs	r1, #17
{
 800238c:	b085      	sub	sp, #20
 800238e:	4604      	mov	r4, r0
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002390:	20d4      	movs	r0, #212	; 0xd4
 8002392:	f7ff fc05 	bl	8001ba0 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002396:	2306      	movs	r3, #6
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002398:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800239a:	aa02      	add	r2, sp, #8
 800239c:	2122      	movs	r1, #34	; 0x22
 800239e:	20d4      	movs	r0, #212	; 0xd4
 80023a0:	f7ff fc1c 	bl	8001bdc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80023a4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80023a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80023ac:	4815      	ldr	r0, [pc, #84]	; (8002404 <LSM6DSL_GyroReadXYZAngRate+0x7c>)
 80023ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023b2:	f8ad 3000 	strh.w	r3, [sp]
 80023b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80023ba:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80023be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023c2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80023c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80023ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80023ce:	f005 050c 	and.w	r5, r5, #12
 80023d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80023da:	f8ad 3004 	strh.w	r3, [sp, #4]
 80023de:	ed90 7a00 	vldr	s14, [r0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	4620      	mov	r0, r4
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80023e6:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 80023ea:	ee07 2a90 	vmov	s15, r2
 80023ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f2:	3301      	adds	r3, #1
 80023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 80023f8:	2b03      	cmp	r3, #3
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80023fa:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 80023fe:	d1f2      	bne.n	80023e6 <LSM6DSL_GyroReadXYZAngRate+0x5e>
  }
}
 8002400:	b005      	add	sp, #20
 8002402:	bd30      	pop	{r4, r5, pc}
 8002404:	0800a5c0 	.word	0x0800a5c0

08002408 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8002408:	f002 ba46 	b.w	8004898 <VL53L0X_get_device_info>

0800240c <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800240c:	2915      	cmp	r1, #21
 800240e:	d807      	bhi.n	8002420 <VL53L0X_SetDeviceMode+0x14>
 8002410:	2201      	movs	r2, #1
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <VL53L0X_SetDeviceMode+0x1c>)
 8002414:	408a      	lsls	r2, r1
 8002416:	4013      	ands	r3, r2
 8002418:	b113      	cbz	r3, 8002420 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800241a:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800241c:	2000      	movs	r0, #0
		break;
 800241e:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002420:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	0030000b 	.word	0x0030000b

0800242c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800242c:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800242e:	460a      	mov	r2, r1
{
 8002430:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8002432:	2109      	movs	r1, #9
 8002434:	f002 fa91 	bl	800495a <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002438:	b918      	cbnz	r0, 8002442 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 800243a:	7823      	ldrb	r3, [r4, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8002444:	f001 be7a 	b.w	800413c <VL53L0X_set_measurement_timing_budget_micro_seconds>

08002448 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002448:	f001 bd54 	b.w	8003ef4 <VL53L0X_set_vcsel_pulse_period>

0800244c <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800244c:	f001 be5d 	b.w	800410a <VL53L0X_get_vcsel_pulse_period>

08002450 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8002450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002452:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8002454:	aa02      	add	r2, sp, #8
 8002456:	2300      	movs	r3, #0
{
 8002458:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 800245a:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800245e:	2101      	movs	r1, #1
{
 8002460:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002462:	f002 fa7a 	bl	800495a <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8002466:	4605      	mov	r5, r0
 8002468:	b9d8      	cbnz	r0, 80024a2 <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 800246a:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 800246c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8002470:	d126      	bne.n	80024c0 <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002472:	2c04      	cmp	r4, #4
 8002474:	d83a      	bhi.n	80024ec <VL53L0X_SetSequenceStepEnable+0x9c>
 8002476:	e8df f004 	tbb	[pc, r4]
 800247a:	1703      	.short	0x1703
 800247c:	1d1a      	.short	0x1d1a
 800247e:	20          	.byte	0x20
 800247f:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002480:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002484:	42a3      	cmp	r3, r4
 8002486:	d00c      	beq.n	80024a2 <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8002488:	4622      	mov	r2, r4
 800248a:	2101      	movs	r1, #1
 800248c:	4630      	mov	r0, r6
 800248e:	f002 faf3 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002492:	4605      	mov	r5, r0
 8002494:	b928      	cbnz	r0, 80024a2 <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002496:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800249a:	6971      	ldr	r1, [r6, #20]
 800249c:	4630      	mov	r0, r6
 800249e:	f7ff ffd1 	bl	8002444 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 80024a2:	4628      	mov	r0, r5
 80024a4:	b003      	add	sp, #12
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 80024a8:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 80024ac:	e7ea      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 80024ae:	f043 0404 	orr.w	r4, r3, #4
				break;
 80024b2:	e7e7      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 80024b4:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 80024b8:	e7e4      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 80024ba:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 80024be:	e7e1      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 80024c0:	2c04      	cmp	r4, #4
 80024c2:	d813      	bhi.n	80024ec <VL53L0X_SetSequenceStepEnable+0x9c>
 80024c4:	e8df f004 	tbb	[pc, r4]
 80024c8:	0c090603 	.word	0x0c090603
 80024cc:	0f          	.byte	0x0f
 80024cd:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 80024ce:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 80024d2:	e7d7      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 80024d4:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 80024d8:	e7d4      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 80024da:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 80024de:	e7d1      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 80024e0:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 80024e4:	e7ce      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 80024e6:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 80024ea:	e7cb      	b.n	8002484 <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80024ec:	f06f 0503 	mvn.w	r5, #3
 80024f0:	e7d7      	b.n	80024a2 <VL53L0X_SetSequenceStepEnable+0x52>

080024f2 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80024f2:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80024f4:	aa02      	add	r2, sp, #8
 80024f6:	2300      	movs	r3, #0
{
 80024f8:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80024fa:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80024fe:	2101      	movs	r1, #1
 8002500:	f002 fa2b 	bl	800495a <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002504:	b978      	cbnz	r0, 8002526 <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 8002506:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800250a:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800250e:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002510:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8002514:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002516:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800251a:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800251c:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002520:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002522:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002524:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002526:	b002      	add	sp, #8
 8002528:	bd10      	pop	{r4, pc}

0800252a <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800252a:	b513      	push	{r0, r1, r4, lr}
 800252c:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 800252e:	aa01      	add	r2, sp, #4
 8002530:	f001 fbd4 	bl	8003cdc <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8002534:	b978      	cbnz	r0, 8002556 <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8002536:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8002538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800253c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002540:	fb02 3311 	mls	r3, r2, r1, r3
 8002544:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8002548:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800254c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002550:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8002554:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002556:	b002      	add	sp, #8
 8002558:	bd10      	pop	{r4, pc}

0800255a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800255a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800255c:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800255e:	f10d 0202 	add.w	r2, sp, #2
 8002562:	21f8      	movs	r1, #248	; 0xf8
{
 8002564:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002566:	f002 fa41 	bl	80049ec <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800256a:	b970      	cbnz	r0, 800258a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 800256c:	aa01      	add	r2, sp, #4
 800256e:	2104      	movs	r1, #4
 8002570:	4620      	mov	r0, r4
 8002572:	f002 fa5b 	bl	8004a2c <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002576:	b940      	cbnz	r0, 800258a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8002578:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800257c:	b11a      	cbz	r2, 8002586 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800257e:	9b01      	ldr	r3, [sp, #4]
 8002580:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002584:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002586:	682b      	ldr	r3, [r5, #0]
 8002588:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800258a:	b003      	add	sp, #12
 800258c:	bd30      	pop	{r4, r5, pc}

0800258e <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800258e:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8002590:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002592:	2000      	movs	r0, #0
 8002594:	4770      	bx	lr

08002596 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002596:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002598:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800259a:	f10d 0206 	add.w	r2, sp, #6
 800259e:	2120      	movs	r1, #32
{
 80025a0:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 80025a2:	f002 fa23 	bl	80049ec <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80025a6:	b928      	cbnz	r0, 80025b4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 80025a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80025ac:	b923      	cbnz	r3, 80025b8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80025ae:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80025b0:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80025b2:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80025b4:	b003      	add	sp, #12
 80025b6:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80025b8:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80025ba:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80025bc:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80025be:	2301      	movs	r3, #1
 80025c0:	7723      	strb	r3, [r4, #28]
 80025c2:	e7f7      	b.n	80025b4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

080025c4 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80025c4:	2905      	cmp	r1, #5
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80025ce:	d832      	bhi.n	8002636 <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 80025d0:	b3a2      	cbz	r2, 800263c <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80025d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80025d6:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80025d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 80025da:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 80025dc:	1e68      	subs	r0, r5, #1
 80025de:	2804      	cmp	r0, #4
 80025e0:	d804      	bhi.n	80025ec <VL53L0X_SetLimitCheckEnable+0x28>
 80025e2:	e8df f000 	tbb	[pc, r0]
 80025e6:	140b      	.short	0x140b
 80025e8:	1a17      	.short	0x1a17
 80025ea:	21          	.byte	0x21
 80025eb:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80025ec:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80025f0:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 80025f2:	b9e6      	cbnz	r6, 800262e <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80025f4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80025f8:	2000      	movs	r0, #0
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80025fc:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8002600:	2144      	movs	r1, #68	; 0x44
 8002602:	4620      	mov	r0, r4
 8002604:	f002 fa48 	bl	8004a98 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8002608:	2800      	cmp	r0, #0
 800260a:	d0f1      	beq.n	80025f0 <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800260c:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800260e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 8002612:	e7ed      	b.n	80025f0 <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002614:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 8002618:	e7ea      	b.n	80025f0 <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 800261e:	2160      	movs	r1, #96	; 0x60
 8002620:	4620      	mov	r0, r4
 8002622:	f002 fa4b 	bl	8004abc <VL53L0X_UpdateByte>
			break;
 8002626:	e7ef      	b.n	8002608 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	22ef      	movs	r2, #239	; 0xef
 800262c:	e7f7      	b.n	800261e <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800262e:	2301      	movs	r3, #1
 8002630:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8002634:	e7e0      	b.n	80025f8 <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002636:	f06f 0003 	mvn.w	r0, #3
	return Status;
 800263a:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 800263c:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	e7cc      	b.n	80025dc <VL53L0X_SetLimitCheckEnable+0x18>

08002642 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002642:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002644:	bf8c      	ite	hi
 8002646:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800264a:	1840      	addls	r0, r0, r1
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	bf97      	itett	ls
 8002652:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 8002656:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002658:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800265a:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800265c:	4770      	bx	lr

0800265e <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800265e:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002660:	1843      	adds	r3, r0, r1
{
 8002662:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002664:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8002668:	460e      	mov	r6, r1
 800266a:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 800266c:	b918      	cbnz	r0, 8002676 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800266e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002672:	6362      	str	r2, [r4, #52]	; 0x34
 8002674:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002676:	2905      	cmp	r1, #5
 8002678:	d81b      	bhi.n	80026b2 <VL53L0X_SetLimitCheckValue+0x54>
 800267a:	e8df f001 	tbb	[pc, r1]
 800267e:	0903      	.short	0x0903
 8002680:	16161412 	.word	0x16161412

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002684:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002686:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800268a:	2000      	movs	r0, #0
 800268c:	6365      	str	r5, [r4, #52]	; 0x34
 800268e:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 8002690:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8002694:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8002696:	4620      	mov	r0, r4
 8002698:	f002 f9fe 	bl	8004a98 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 800269c:	2800      	cmp	r0, #0
 800269e:	d0f2      	beq.n	8002686 <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026a2:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 80026a4:	e7ef      	b.n	8002686 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026a6:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 80026a8:	e7ed      	b.n	8002686 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 80026aa:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80026ae:	2164      	movs	r1, #100	; 0x64
 80026b0:	e7f1      	b.n	8002696 <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80026b2:	f06f 0003 	mvn.w	r0, #3
 80026b6:	e7f3      	b.n	80026a0 <VL53L0X_SetLimitCheckValue+0x42>

080026b8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80026b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026ba:	4604      	mov	r4, r0
 80026bc:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80026be:	2905      	cmp	r1, #5
 80026c0:	d82c      	bhi.n	800271c <VL53L0X_GetLimitCheckValue+0x64>
 80026c2:	e8df f001 	tbb	[pc, r1]
 80026c6:	0703      	.short	0x0703
 80026c8:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80026d2:	e021      	b.n	8002718 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 80026d4:	f10d 0206 	add.w	r2, sp, #6
 80026d8:	2144      	movs	r1, #68	; 0x44
 80026da:	f002 f987 	bl	80049ec <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80026de:	b9d8      	cbnz	r0, 8002718 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80026e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 80026e4:	0253      	lsls	r3, r2, #9
 80026e6:	b19a      	cbz	r2, 8002710 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 80026e8:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80026ea:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80026ec:	2301      	movs	r3, #1
 80026ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80026f2:	e011      	b.n	8002718 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 80026f6:	e7ea      	b.n	80026ce <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80026f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 80026fa:	e7e8      	b.n	80026ce <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 80026fc:	f10d 0206 	add.w	r2, sp, #6
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	f002 f973 	bl	80049ec <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8002706:	b938      	cbnz	r0, 8002718 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002708:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	e7de      	b.n	80026ce <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8002712:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002714:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 8002718:	b003      	add	sp, #12
 800271a:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800271c:	f06f 0003 	mvn.w	r0, #3
 8002720:	e7fa      	b.n	8002718 <VL53L0X_GetLimitCheckValue+0x60>

08002722 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002722:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002724:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002726:	f10d 0207 	add.w	r2, sp, #7
 800272a:	2101      	movs	r1, #1
{
 800272c:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800272e:	f002 f914 	bl	800495a <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8002732:	b958      	cbnz	r0, 800274c <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002734:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002738:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 800273c:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 800273e:	bf46      	itte	mi
 8002740:	2301      	movmi	r3, #1
 8002742:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 8002744:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002746:	7823      	ldrb	r3, [r4, #0]
 8002748:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800274c:	b003      	add	sp, #12
 800274e:	bd30      	pop	{r4, r5, pc}

08002750 <VL53L0X_GetDeviceParameters>:
{
 8002750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002754:	7c03      	ldrb	r3, [r0, #16]
{
 8002756:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002758:	f801 3b08 	strb.w	r3, [r1], #8
{
 800275c:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800275e:	f7ff fefc 	bl	800255a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8002762:	bb40      	cbnz	r0, 80027b6 <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002764:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002766:	f104 0110 	add.w	r1, r4, #16
 800276a:	4628      	mov	r0, r5
 800276c:	f7ff ff13 	bl	8002596 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8002770:	bb08      	cbnz	r0, 80027b6 <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002772:	f104 0114 	add.w	r1, r4, #20
 8002776:	4628      	mov	r0, r5
 8002778:	f000 fc03 	bl	8002f82 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 800277c:	b9d8      	cbnz	r0, 80027b6 <VL53L0X_GetDeviceParameters+0x66>
 800277e:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8002782:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8002786:	f104 0818 	add.w	r8, r4, #24
 800278a:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800278c:	463a      	mov	r2, r7
 800278e:	b2b1      	uxth	r1, r6
 8002790:	4628      	mov	r0, r5
 8002792:	f7ff ff91 	bl	80026b8 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8002796:	b970      	cbnz	r0, 80027b6 <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002798:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800279a:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 800279e:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80027a2:	2e06      	cmp	r6, #6
 80027a4:	f107 0704 	add.w	r7, r7, #4
 80027a8:	d1f0      	bne.n	800278c <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80027aa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7ff ffb7 	bl	8002722 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80027b4:	b108      	cbz	r0, 80027ba <VL53L0X_GetDeviceParameters+0x6a>
}
 80027b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80027ba:	1d21      	adds	r1, r4, #4
 80027bc:	4628      	mov	r0, r5
}
 80027be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80027c2:	f001 bd1c 	b.w	80041fe <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

080027c8 <VL53L0X_DataInit>:
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80027ca:	2200      	movs	r2, #0
{
 80027cc:	4605      	mov	r5, r0
 80027ce:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80027d0:	2188      	movs	r1, #136	; 0x88
 80027d2:	f002 f951 	bl	8004a78 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80027d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027da:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80027de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80027e2:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80027e6:	4a41      	ldr	r2, [pc, #260]	; (80028ec <VL53L0X_DataInit+0x124>)
 80027e8:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80027ec:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80027ee:	4a40      	ldr	r2, [pc, #256]	; (80028f0 <VL53L0X_DataInit+0x128>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80027f0:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80027f4:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80027f8:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80027fa:	4669      	mov	r1, sp
 80027fc:	4628      	mov	r0, r5
 80027fe:	f7ff ffa7 	bl	8002750 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8002802:	4604      	mov	r4, r0
 8002804:	b980      	cbnz	r0, 8002828 <VL53L0X_DataInit+0x60>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002806:	f88d 0000 	strb.w	r0, [sp]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800280a:	f88d 0001 	strb.w	r0, [sp, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800280e:	466e      	mov	r6, sp
 8002810:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002812:	f105 0710 	add.w	r7, r5, #16
 8002816:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002818:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800281a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800281c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800281e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002820:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002824:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002828:	2364      	movs	r3, #100	; 0x64
 800282a:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800282e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002832:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002836:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800283a:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800283e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002842:	f8a5 313a 	strh.w	r3, [r5, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002846:	2301      	movs	r3, #1
 8002848:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800284c:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 800284e:	2c00      	cmp	r4, #0
 8002850:	d149      	bne.n	80028e6 <VL53L0X_DataInit+0x11e>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002852:	b2b1      	uxth	r1, r6
 8002854:	2201      	movs	r2, #1
 8002856:	4628      	mov	r0, r5
 8002858:	f7ff feb4 	bl	80025c4 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800285c:	3601      	adds	r6, #1
 800285e:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002860:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002862:	d1f4      	bne.n	800284e <VL53L0X_DataInit+0x86>
	if (Status == VL53L0X_ERROR_NONE)
 8002864:	bbf8      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002866:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800286a:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800286e:	4602      	mov	r2, r0
 8002870:	2104      	movs	r1, #4
 8002872:	4628      	mov	r0, r5
 8002874:	f7ff fea6 	bl	80025c4 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002878:	4604      	mov	r4, r0
 800287a:	bba0      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800287c:	4602      	mov	r2, r0
 800287e:	2105      	movs	r1, #5
 8002880:	4628      	mov	r0, r5
 8002882:	f7ff fe9f 	bl	80025c4 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8002886:	4604      	mov	r4, r0
 8002888:	bb68      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800288a:	4601      	mov	r1, r0
 800288c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002890:	4628      	mov	r0, r5
 8002892:	f7ff fee4 	bl	800265e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8002896:	4604      	mov	r4, r0
 8002898:	bb28      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800289a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800289e:	2101      	movs	r1, #1
 80028a0:	4628      	mov	r0, r5
 80028a2:	f7ff fedc 	bl	800265e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 80028a6:	4604      	mov	r4, r0
 80028a8:	b9e8      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80028aa:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80028ae:	2102      	movs	r1, #2
 80028b0:	4628      	mov	r0, r5
 80028b2:	f7ff fed4 	bl	800265e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 80028b6:	4604      	mov	r4, r0
 80028b8:	b9a8      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80028ba:	4602      	mov	r2, r0
 80028bc:	2103      	movs	r1, #3
 80028be:	4628      	mov	r0, r5
 80028c0:	f7ff fecd 	bl	800265e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 80028c4:	4604      	mov	r4, r0
 80028c6:	b970      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80028ce:	2101      	movs	r1, #1
 80028d0:	4628      	mov	r0, r5
 80028d2:	f002 f8d1 	bl	8004a78 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80028d6:	2301      	movs	r3, #1
 80028d8:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 80028dc:	4604      	mov	r4, r0
 80028de:	b910      	cbnz	r0, 80028e6 <VL53L0X_DataInit+0x11e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80028e0:	2300      	movs	r3, #0
 80028e2:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 80028e6:	4620      	mov	r0, r4
 80028e8:	b011      	add	sp, #68	; 0x44
 80028ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ec:	00016b85 	.word	0x00016b85
 80028f0:	000970a4 	.word	0x000970a4

080028f4 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80028f4:	2301      	movs	r3, #1
 80028f6:	f000 bd66 	b.w	80033c6 <VL53L0X_perform_ref_calibration>

080028fa <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80028fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002902:	230c      	movs	r3, #12
 8002904:	aa04      	add	r2, sp, #16
 8002906:	2114      	movs	r1, #20
{
 8002908:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800290a:	f002 f859 	bl	80049c0 <VL53L0X_ReadMulti>
 800290e:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8002910:	2800      	cmp	r0, #0
 8002912:	d175      	bne.n	8002a00 <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002914:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002918:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800291c:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002920:	f89d 501a 	ldrb.w	r5, [sp, #26]
 8002924:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002928:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800292a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800292e:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002932:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8002934:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002938:	b29b      	uxth	r3, r3
 800293a:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800293c:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800293e:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002942:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002946:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002948:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800294c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002950:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002952:	f8b6 514e 	ldrh.w	r5, [r6, #334]	; 0x14e
		DeviceRangeStatus = localBuffer[0];
 8002956:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800295a:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800295c:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800295e:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002960:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002962:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8002966:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002968:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 800296c:	d00c      	beq.n	8002988 <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800296e:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002972:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8002974:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002978:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 800297c:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002980:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8002982:	2f00      	cmp	r7, #0
 8002984:	d140      	bne.n	8002a08 <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8002986:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8002988:	f1be 0f00 	cmp.w	lr, #0
 800298c:	d046      	beq.n	8002a1c <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800298e:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8002990:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002992:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002994:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002996:	f10d 000f 	add.w	r0, sp, #15
 800299a:	9001      	str	r0, [sp, #4]
 800299c:	9400      	str	r4, [sp, #0]
 800299e:	4630      	mov	r0, r6
 80029a0:	f001 fe5c 	bl	800465c <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80029a4:	4686      	mov	lr, r0
 80029a6:	bb58      	cbnz	r0, 8002a00 <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80029a8:	f89d c00f 	ldrb.w	ip, [sp, #15]
 80029ac:	f884 c018 	strb.w	ip, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80029b0:	f106 0550 	add.w	r5, r6, #80	; 0x50
 80029b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b6:	af07      	add	r7, sp, #28
 80029b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80029ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80029be:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80029c2:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80029c4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80029c8:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80029cc:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80029d0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80029d4:	68e1      	ldr	r1, [r4, #12]
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80029d6:	6922      	ldr	r2, [r4, #16]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80029d8:	6860      	ldr	r0, [r4, #4]
 80029da:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 80029de:	910a      	str	r1, [sp, #40]	; 0x28
 80029e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80029e2:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 80029e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80029ea:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 80029ee:	ac07      	add	r4, sp, #28
 80029f0:	9008      	str	r0, [sp, #32]
 80029f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f4:	3650      	adds	r6, #80	; 0x50
 80029f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80029f8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80029fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002a00:	4670      	mov	r0, lr
 8002a02:	b00e      	add	sp, #56	; 0x38
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 8002a08:	b2ad      	uxth	r5, r5
 8002a0a:	435d      	muls	r5, r3
 8002a0c:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 8002a0e:	42aa      	cmp	r2, r5
 8002a10:	d107      	bne.n	8002a22 <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 8002a12:	f1be 0f00 	cmp.w	lr, #0
 8002a16:	d10a      	bne.n	8002a2e <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 8002a18:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002a1c:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002a1e:	2000      	movs	r0, #0
 8002a20:	e7b8      	b.n	8002994 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 8002a22:	b280      	uxth	r0, r0
 8002a24:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8002a26:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 8002a28:	fbb0 f0f5 	udiv	r0, r0, r5
 8002a2c:	e7ab      	b.n	8002986 <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 8002a2e:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8002a32:	e7ac      	b.n	800298e <VL53L0X_GetRangingMeasurementData+0x94>

08002a34 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a36:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002a38:	210e      	movs	r1, #14
 8002a3a:	f10d 0206 	add.w	r2, sp, #6
{
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002a42:	4c0b      	ldr	r4, [pc, #44]	; (8002a70 <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002a44:	f001 ffd2 	bl	80049ec <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a4c:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8002a50:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002a52:	b950      	cbnz	r0, 8002a6a <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002a54:	f10d 0206 	add.w	r2, sp, #6
 8002a58:	210c      	movs	r1, #12
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	f001 ffc6 	bl	80049ec <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002a60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002a64:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8002a68:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002a6a:	b003      	add	sp, #12
 8002a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	1ffe0000 	.word	0x1ffe0000

08002a74 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8002a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002a76:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	2b02      	cmp	r3, #2
{
 8002a7e:	4606      	mov	r6, r0
 8002a80:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8002a82:	d833      	bhi.n	8002aec <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002a84:	ab01      	add	r3, sp, #4
 8002a86:	466a      	mov	r2, sp
 8002a88:	2101      	movs	r1, #1
 8002a8a:	f7ff ffd3 	bl	8002a34 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8002a8e:	9b00      	ldr	r3, [sp, #0]
 8002a90:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002a94:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 8002a96:	d803      	bhi.n	8002aa0 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8002a98:	9b01      	ldr	r3, [sp, #4]
 8002a9a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8002a9e:	d906      	bls.n	8002aae <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8002aa0:	b92d      	cbnz	r5, 8002aae <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8002aa2:	b13c      	cbz	r4, 8002ab4 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002aa4:	4912      	ldr	r1, [pc, #72]	; (8002af0 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f001 fc0e 	bl	80042c8 <VL53L0X_load_tuning_settings>
 8002aac:	4605      	mov	r5, r0
}
 8002aae:	4628      	mov	r0, r5
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	21ff      	movs	r1, #255	; 0xff
 8002ab8:	4630      	mov	r0, r6
 8002aba:	f001 ffdd 	bl	8004a78 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002abe:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002ac0:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002ac2:	2170      	movs	r1, #112	; 0x70
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f001 ffd7 	bl	8004a78 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002aca:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002acc:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ace:	21ff      	movs	r1, #255	; 0xff
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	f001 ffd1 	bl	8004a78 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002ad6:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ad8:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002ada:	462a      	mov	r2, r5
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f001 ffca 	bl	8004a78 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ae4:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002ae6:	4320      	orrs	r0, r4
 8002ae8:	b245      	sxtb	r5, r0
 8002aea:	e7e0      	b.n	8002aae <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002aec:	2500      	movs	r5, #0
 8002aee:	e7de      	b.n	8002aae <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8002af0:	2000034b 	.word	0x2000034b

08002af4 <VL53L0X_StartMeasurement>:
{
 8002af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (DeviceMode) {
 8002af6:	7c01      	ldrb	r1, [r0, #16]
 8002af8:	2901      	cmp	r1, #1
{
 8002afa:	4604      	mov	r4, r0
	switch (DeviceMode) {
 8002afc:	d027      	beq.n	8002b4e <VL53L0X_StartMeasurement+0x5a>
 8002afe:	d304      	bcc.n	8002b0a <VL53L0X_StartMeasurement+0x16>
 8002b00:	2903      	cmp	r1, #3
 8002b02:	d031      	beq.n	8002b68 <VL53L0X_StartMeasurement+0x74>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002b04:	f06f 0007 	mvn.w	r0, #7
 8002b08:	e013      	b.n	8002b32 <VL53L0X_StartMeasurement+0x3e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f001 ffb3 	bl	8004a78 <VL53L0X_WrByte>
		Byte = StartStopByte;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8002b18:	b958      	cbnz	r0, 8002b32 <VL53L0X_StartMeasurement+0x3e>
 8002b1a:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 8002b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002b20:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 8002b22:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002b26:	d50d      	bpl.n	8002b44 <VL53L0X_StartMeasurement+0x50>
				&& (Status == VL53L0X_ERROR_NONE)
 8002b28:	b960      	cbnz	r0, 8002b44 <VL53L0X_StartMeasurement+0x50>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002b2a:	2dc8      	cmp	r5, #200	; 0xc8
 8002b2c:	d103      	bne.n	8002b36 <VL53L0X_StartMeasurement+0x42>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002b2e:	f06f 0006 	mvn.w	r0, #6
}
 8002b32:	b003      	add	sp, #12
 8002b34:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8002b36:	4601      	mov	r1, r0
 8002b38:	f10d 0207 	add.w	r2, sp, #7
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f001 ff0c 	bl	800495a <VL53L0X_RdByte>
 8002b42:	e7eb      	b.n	8002b1c <VL53L0X_StartMeasurement+0x28>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002b44:	2dc8      	cmp	r5, #200	; 0xc8
 8002b46:	bf08      	it	eq
 8002b48:	f06f 0006 	mvneq.w	r0, #6
 8002b4c:	e7f1      	b.n	8002b32 <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002b4e:	f7ff ff91 	bl	8002a74 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002b52:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8002b54:	2100      	movs	r1, #0
 8002b56:	4620      	mov	r0, r4
 8002b58:	f001 ff8e 	bl	8004a78 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d1e8      	bne.n	8002b32 <VL53L0X_StartMeasurement+0x3e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002b60:	2304      	movs	r3, #4
 8002b62:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002b66:	e7e4      	b.n	8002b32 <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	f7ff ff83 	bl	8002a74 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8002b6e:	2204      	movs	r2, #4
 8002b70:	e7f0      	b.n	8002b54 <VL53L0X_StartMeasurement+0x60>

08002b72 <VL53L0X_PerformSingleMeasurement>:
{
 8002b72:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8002b74:	7c05      	ldrb	r5, [r0, #16]
{
 8002b76:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002b78:	b125      	cbz	r5, 8002b84 <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fd76 	bl	800366c <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8002b80:	b128      	cbz	r0, 8002b8e <VL53L0X_PerformSingleMeasurement+0x1c>
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8002b84:	f7ff ffb6 	bl	8002af4 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d0f6      	beq.n	8002b7a <VL53L0X_PerformSingleMeasurement+0x8>
}
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	d1fc      	bne.n	8002b8c <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002b92:	2303      	movs	r3, #3
 8002b94:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8002b98:	e7f8      	b.n	8002b8c <VL53L0X_PerformSingleMeasurement+0x1a>

08002b9a <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8002b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b9c:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002b9e:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	210b      	movs	r1, #11
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f001 ff67 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002baa:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8002bac:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8002bae:	210b      	movs	r1, #11
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f001 ff61 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002bb6:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8002bba:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8002bbc:	2113      	movs	r1, #19
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f001 fecb 	bl	800495a <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8002bc8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8002bca:	4320      	orrs	r0, r4
		LoopCount++;
 8002bcc:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8002bce:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8002bd0:	b240      	sxtb	r0, r0
		LoopCount++;
 8002bd2:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8002bd4:	d005      	beq.n	8002be2 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8002bd6:	2d03      	cmp	r5, #3
 8002bd8:	d008      	beq.n	8002bec <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d0e0      	beq.n	8002ba0 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002bde:	b002      	add	sp, #8
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002be2:	2d03      	cmp	r5, #3
 8002be4:	bf08      	it	eq
 8002be6:	f06f 000b 	mvneq.w	r0, #11
 8002bea:	e7f8      	b.n	8002bde <VL53L0X_ClearInterruptMask+0x44>
 8002bec:	f06f 000b 	mvn.w	r0, #11
 8002bf0:	e7f5      	b.n	8002bde <VL53L0X_ClearInterruptMask+0x44>

08002bf2 <VL53L0X_PerformSingleRangingMeasurement>:
{
 8002bf2:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	7403      	strb	r3, [r0, #16]
{
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8002bfc:	f7ff ffb9 	bl	8002b72 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8002c00:	b950      	cbnz	r0, 8002c18 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fe78 	bl	80028fa <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8002c0a:	b928      	cbnz	r0, 8002c18 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	4620      	mov	r0, r4
}
 8002c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002c14:	f7ff bfc1 	b.w	8002b9a <VL53L0X_ClearInterruptMask>
}
 8002c18:	bd38      	pop	{r3, r4, r5, pc}

08002c1a <VL53L0X_SetGpioConfig>:
{
 8002c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	461c      	mov	r4, r3
 8002c20:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 8002c24:	460e      	mov	r6, r1
 8002c26:	2900      	cmp	r1, #0
 8002c28:	f040 809a 	bne.w	8002d60 <VL53L0X_SetGpioConfig+0x146>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002c2c:	2a14      	cmp	r2, #20
 8002c2e:	d108      	bne.n	8002c42 <VL53L0X_SetGpioConfig+0x28>
			data = 1;
 8002c30:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 8002c32:	bf0c      	ite	eq
 8002c34:	2210      	moveq	r2, #16
 8002c36:	2201      	movne	r2, #1
 8002c38:	2184      	movs	r1, #132	; 0x84
}
 8002c3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8002c3e:	f001 bf1b 	b.w	8004a78 <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002c42:	2a15      	cmp	r2, #21
 8002c44:	d167      	bne.n	8002d16 <VL53L0X_SetGpioConfig+0xfc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002c46:	2201      	movs	r2, #1
 8002c48:	21ff      	movs	r1, #255	; 0xff
 8002c4a:	f001 ff15 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c4e:	4632      	mov	r2, r6
 8002c50:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002c52:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c54:	4628      	mov	r0, r5
 8002c56:	f001 ff0f 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002c5a:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c5c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002c5e:	21ff      	movs	r1, #255	; 0xff
 8002c60:	4628      	mov	r0, r5
 8002c62:	f001 ff09 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002c66:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002c68:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f001 ff02 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002c74:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002c76:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002c78:	2202      	movs	r2, #2
 8002c7a:	2185      	movs	r1, #133	; 0x85
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f001 fefb 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002c82:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002c84:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002c86:	2204      	movs	r2, #4
 8002c88:	21ff      	movs	r1, #255	; 0xff
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f001 fef4 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002c90:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002c92:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002c94:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002c96:	21cd      	movs	r1, #205	; 0xcd
 8002c98:	4628      	mov	r0, r5
 8002c9a:	f001 feed 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002c9e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002ca0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002ca2:	2211      	movs	r2, #17
 8002ca4:	21cc      	movs	r1, #204	; 0xcc
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f001 fee6 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002cac:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002cae:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	21ff      	movs	r1, #255	; 0xff
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f001 fedf 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002cba:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002cbc:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002cbe:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002cc0:	21be      	movs	r1, #190	; 0xbe
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f001 fed8 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002cc8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002cca:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002ccc:	2206      	movs	r2, #6
 8002cce:	21ff      	movs	r1, #255	; 0xff
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f001 fed1 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002cd6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002cd8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002cda:	2209      	movs	r2, #9
 8002cdc:	21cc      	movs	r1, #204	; 0xcc
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f001 feca 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002ce4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002ce6:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002ce8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002cea:	21ff      	movs	r1, #255	; 0xff
 8002cec:	4628      	mov	r0, r5
 8002cee:	f001 fec3 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002cf2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002cf4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	21ff      	movs	r1, #255	; 0xff
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f001 febc 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002d00:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002d02:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d04:	4632      	mov	r2, r6
 8002d06:	4631      	mov	r1, r6
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f001 feb5 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002d0e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d10:	4320      	orrs	r0, r4
 8002d12:	b240      	sxtb	r0, r0
 8002d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 8002d16:	2c04      	cmp	r4, #4
 8002d18:	d825      	bhi.n	8002d66 <VL53L0X_SetGpioConfig+0x14c>
 8002d1a:	e8df f004 	tbb	[pc, r4]
 8002d1e:	2729      	.short	0x2729
 8002d20:	0a03      	.short	0x0a03
 8002d22:	0c          	.byte	0x0c
 8002d23:	00          	.byte	0x00
				data = 0x02;
 8002d24:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8002d26:	210a      	movs	r1, #10
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f001 fea5 	bl	8004a78 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002d2e:	b120      	cbz	r0, 8002d3a <VL53L0X_SetGpioConfig+0x120>
}
 8002d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 8002d32:	2203      	movs	r2, #3
				break;
 8002d34:	e7f7      	b.n	8002d26 <VL53L0X_SetGpioConfig+0x10c>
				data = 0x04;
 8002d36:	2204      	movs	r2, #4
				break;
 8002d38:	e7f5      	b.n	8002d26 <VL53L0X_SetGpioConfig+0x10c>
				data = (uint8_t)(1 << 4);
 8002d3a:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8002d3c:	bf0c      	ite	eq
 8002d3e:	4633      	moveq	r3, r6
 8002d40:	2310      	movne	r3, #16
 8002d42:	22ef      	movs	r2, #239	; 0xef
 8002d44:	2184      	movs	r1, #132	; 0x84
 8002d46:	4628      	mov	r0, r5
 8002d48:	f001 feb8 	bl	8004abc <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d1ef      	bne.n	8002d30 <VL53L0X_SetGpioConfig+0x116>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002d50:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002d54:	4601      	mov	r1, r0
 8002d56:	4628      	mov	r0, r5
}
 8002d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002d5c:	f7ff bf1d 	b.w	8002b9a <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002d60:	f06f 0009 	mvn.w	r0, #9
 8002d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 8002d66:	f06f 000a 	mvn.w	r0, #10
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	e7da      	b.n	8002d26 <VL53L0X_SetGpioConfig+0x10c>
				data = 0x00;
 8002d70:	2200      	movs	r2, #0
 8002d72:	e7d8      	b.n	8002d26 <VL53L0X_SetGpioConfig+0x10c>

08002d74 <VL53L0X_StaticInit>:
{
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	b096      	sub	sp, #88	; 0x58
 8002d78:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	a806      	add	r0, sp, #24
 8002d80:	f004 fdcb 	bl	800791a <memset>
	uint16_t tempword = 0;
 8002d84:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002d86:	2101      	movs	r1, #1
 8002d88:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8002d8a:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 8002d8e:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 8002d92:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 8002d96:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002d98:	f000 fcb8 	bl	800370c <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d9c:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8002da0:	2a01      	cmp	r2, #1
 8002da2:	d806      	bhi.n	8002db2 <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002da4:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8002da8:	f040 80ae 	bne.w	8002f08 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8002dac:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8002dae:	f240 80ad 	bls.w	8002f0c <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002db2:	aa03      	add	r2, sp, #12
 8002db4:	a904      	add	r1, sp, #16
 8002db6:	4628      	mov	r0, r5
 8002db8:	f000 fb20 	bl	80033fc <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002dbc:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f040 809f 	bne.w	8002f02 <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 8002dc4:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 80a3 	bne.w	8002f14 <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002dce:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f001 fa78 	bl	80042c8 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8002dd8:	4604      	mov	r4, r0
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	f040 8091 	bne.w	8002f02 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002de0:	9400      	str	r4, [sp, #0]
 8002de2:	4622      	mov	r2, r4
 8002de4:	4621      	mov	r1, r4
 8002de6:	2304      	movs	r3, #4
 8002de8:	4628      	mov	r0, r5
 8002dea:	f7ff ff16 	bl	8002c1a <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 8002dee:	4604      	mov	r4, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	f040 8086 	bne.w	8002f02 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002df6:	2201      	movs	r2, #1
 8002df8:	21ff      	movs	r1, #255	; 0xff
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f001 fe3c 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e00:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e04:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e06:	2184      	movs	r1, #132	; 0x84
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f001 fdef 	bl	80049ec <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e0e:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e10:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e12:	21ff      	movs	r1, #255	; 0xff
 8002e14:	4628      	mov	r0, r5
 8002e16:	f001 fe2f 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e1a:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e1c:	4330      	orrs	r0, r6
 8002e1e:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8002e20:	2c00      	cmp	r4, #0
 8002e22:	d16e      	bne.n	8002f02 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002e24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002e2e:	a906      	add	r1, sp, #24
 8002e30:	4628      	mov	r0, r5
 8002e32:	f7ff fc8d 	bl	8002750 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8002e36:	4604      	mov	r4, r0
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d162      	bne.n	8002f02 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002e3c:	f10d 010b 	add.w	r1, sp, #11
 8002e40:	4628      	mov	r0, r5
 8002e42:	f7ff faf3 	bl	800242c <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8002e46:	4604      	mov	r4, r0
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d15a      	bne.n	8002f02 <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002e4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002e50:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002e54:	ae06      	add	r6, sp, #24
 8002e56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e58:	f105 0410 	add.w	r4, r5, #16
 8002e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8002e6e:	f10d 020b 	add.w	r2, sp, #11
 8002e72:	2101      	movs	r1, #1
 8002e74:	4628      	mov	r0, r5
 8002e76:	f001 fd70 	bl	800495a <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d140      	bne.n	8002f02 <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002e80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002e84:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f7ff fadf 	bl	8002450 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002e92:	4604      	mov	r4, r0
 8002e94:	bba8      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002e96:	4602      	mov	r2, r0
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4628      	mov	r0, r5
 8002e9c:	f7ff fad8 	bl	8002450 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	bb70      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002ea4:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002ea6:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002ea8:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002eac:	f10d 020d 	add.w	r2, sp, #13
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f001 f92a 	bl	800410a <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	bb18      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002eba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002ebe:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002ec2:	f10d 020d 	add.w	r2, sp, #13
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f001 f91e 	bl	800410a <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8002ece:	4604      	mov	r4, r0
 8002ed0:	b9b8      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002ed2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002ed6:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8002eda:	aa05      	add	r2, sp, #20
 8002edc:	2103      	movs	r1, #3
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f7ff fb23 	bl	800252a <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	b960      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002ee8:	9b05      	ldr	r3, [sp, #20]
 8002eea:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8002eee:	aa05      	add	r2, sp, #20
 8002ef0:	2104      	movs	r1, #4
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	f7ff fb19 	bl	800252a <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8002ef8:	4604      	mov	r4, r0
 8002efa:	b910      	cbnz	r0, 8002f02 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002efc:	9b05      	ldr	r3, [sp, #20]
 8002efe:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8002f02:	4620      	mov	r0, r4
 8002f04:	b016      	add	sp, #88	; 0x58
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8002f08:	290c      	cmp	r1, #12
 8002f0a:	e750      	b.n	8002dae <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f000 f913 	bl	8003138 <VL53L0X_set_reference_spads>
 8002f12:	e753      	b.n	8002dbc <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8002f14:	4900      	ldr	r1, [pc, #0]	; (8002f18 <VL53L0X_StaticInit+0x1a4>)
 8002f16:	e75c      	b.n	8002dd2 <VL53L0X_StaticInit+0x5e>
 8002f18:	20000258 	.word	0x20000258

08002f1c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002f1c:	b513      	push	{r0, r1, r4, lr}
 8002f1e:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8002f20:	f10d 0207 	add.w	r2, sp, #7
 8002f24:	2113      	movs	r1, #19
 8002f26:	f001 fd18 	bl	800495a <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8002f2a:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8002f2e:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8002f32:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002f36:	bf18      	it	ne
 8002f38:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8002f3c:	6022      	str	r2, [r4, #0]
}
 8002f3e:	b002      	add	sp, #8
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <VL53L0X_GetMeasurementDataReady>:
{
 8002f42:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8002f44:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8002f48:	2b04      	cmp	r3, #4
{
 8002f4a:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8002f4c:	d10b      	bne.n	8002f66 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8002f4e:	a901      	add	r1, sp, #4
 8002f50:	f7ff ffe4 	bl	8002f1c <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8002f54:	9b01      	ldr	r3, [sp, #4]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d101      	bne.n	8002f5e <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7023      	strb	r3, [r4, #0]
}
 8002f62:	b002      	add	sp, #8
 8002f64:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002f66:	aa01      	add	r2, sp, #4
 8002f68:	2114      	movs	r1, #20
 8002f6a:	f001 fcf6 	bl	800495a <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d1f7      	bne.n	8002f62 <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 8002f72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f76:	07db      	lsls	r3, r3, #31
 8002f78:	d4ef      	bmi.n	8002f5a <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8002f7a:	7020      	strb	r0, [r4, #0]
 8002f7c:	e7f1      	b.n	8002f62 <VL53L0X_GetMeasurementDataReady+0x20>

08002f7e <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002f7e:	f000 ba3d 	b.w	80033fc <VL53L0X_perform_ref_spad_management>

08002f82 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002f82:	b513      	push	{r0, r1, r4, lr}
 8002f84:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8002f86:	f10d 0206 	add.w	r2, sp, #6
 8002f8a:	2128      	movs	r1, #40	; 0x28
 8002f8c:	f001 fd2e 	bl	80049ec <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8002f90:	b970      	cbnz	r0, 8002fb0 <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8002f92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9e:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8002fa2:	bf26      	itte	cs
 8002fa4:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8002fa8:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002fac:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8002fae:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8002fb6:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 8002fba:	f04f 34ff 	mov.w	r4, #4294967295
 8002fbe:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8002fc0:	f002 0207 	and.w	r2, r2, #7
 8002fc4:	ea4f 0cce 	mov.w	ip, lr, lsl #3

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002fc8:	4676      	mov	r6, lr
	uint8_t success = 0;
 8002fca:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002fcc:	428e      	cmp	r6, r1
 8002fce:	d200      	bcs.n	8002fd2 <get_next_good_spad+0x1e>
 8002fd0:	b107      	cbz	r7, 8002fd4 <get_next_good_spad+0x20>
 8002fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 8002fd4:	5d85      	ldrb	r5, [r0, r6]

		if (coarseIndex == startIndex) {
 8002fd6:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002fd8:	bf03      	ittte	eq
 8002fda:	4115      	asreq	r5, r2
 8002fdc:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 8002fde:	4614      	moveq	r4, r2
		fineIndex = 0;
 8002fe0:	463c      	movne	r4, r7
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 8002fe2:	f015 0f01 	tst.w	r5, #1
 8002fe6:	d006      	beq.n	8002ff6 <get_next_good_spad+0x42>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8002fe8:	4464      	add	r4, ip
 8002fea:	601c      	str	r4, [r3, #0]
				success = 1;
 8002fec:	2701      	movs	r7, #1
				coarseIndex++) {
 8002fee:	3601      	adds	r6, #1
 8002ff0:	f10c 0c08 	add.w	ip, ip, #8
 8002ff4:	e7ea      	b.n	8002fcc <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 8002ff6:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 8002ff8:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 8002ffa:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8002ffe:	d1f0      	bne.n	8002fe2 <get_next_good_spad+0x2e>
 8003000:	e7f5      	b.n	8002fee <get_next_good_spad+0x3a>
	...

08003004 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 8003006:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003008:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 800300c:	3000      	adds	r0, #0
 800300e:	bf18      	it	ne
 8003010:	2001      	movne	r0, #1
 8003012:	4770      	bx	lr
 8003014:	20000504 	.word	0x20000504

08003018 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003018:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 800301a:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 800301c:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003020:	bf3f      	itttt	cc
 8003022:	2101      	movcc	r1, #1
 8003024:	4091      	lslcc	r1, r2
 8003026:	5cc2      	ldrbcc	r2, [r0, r3]
 8003028:	430a      	orrcc	r2, r1
 800302a:	bf3a      	itte	cc
 800302c:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800302e:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003030:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 8003034:	4770      	bx	lr

08003036 <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003036:	460a      	mov	r2, r1
 8003038:	2306      	movs	r3, #6
 800303a:	21b0      	movs	r1, #176	; 0xb0
 800303c:	f001 bca2 	b.w	8004984 <VL53L0X_WriteMulti>

08003040 <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003040:	460a      	mov	r2, r1
 8003042:	2306      	movs	r3, #6
 8003044:	21b0      	movs	r1, #176	; 0xb0
 8003046:	f001 bcbb 	b.w	80049c0 <VL53L0X_ReadMulti>

0800304a <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800304a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304e:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003050:	f10d 0918 	add.w	r9, sp, #24
{
 8003054:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003056:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8003058:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 800305c:	4682      	mov	sl, r0
 800305e:	468b      	mov	fp, r1
 8003060:	9201      	str	r2, [sp, #4]
 8003062:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8003064:	f04f 0800 	mov.w	r8, #0
 8003068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800306a:	4598      	cmp	r8, r3
 800306c:	d114      	bne.n	8003098 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800306e:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8003070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003072:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003074:	b968      	cbnz	r0, 8003092 <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8003076:	4629      	mov	r1, r5
 8003078:	4650      	mov	r0, sl
 800307a:	f7ff ffdc 	bl	8003036 <set_ref_spad_map>
 800307e:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 8003080:	b938      	cbnz	r0, 8003092 <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003082:	ae04      	add	r6, sp, #16
 8003084:	4631      	mov	r1, r6
 8003086:	4650      	mov	r0, sl
 8003088:	f7ff ffda 	bl	8003040 <get_ref_spad_map>

		i = 0;
 800308c:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800308e:	429f      	cmp	r7, r3
 8003090:	d11d      	bne.n	80030ce <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 8003092:	b007      	add	sp, #28
 8003094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003098:	464b      	mov	r3, r9
 800309a:	4622      	mov	r2, r4
 800309c:	4639      	mov	r1, r7
 800309e:	9801      	ldr	r0, [sp, #4]
 80030a0:	f7ff ff88 	bl	8002fb4 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 80030a4:	9e03      	ldr	r6, [sp, #12]
 80030a6:	1c73      	adds	r3, r6, #1
 80030a8:	d00e      	beq.n	80030c8 <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80030aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030ac:	18f0      	adds	r0, r6, r3
 80030ae:	f7ff ffa9 	bl	8003004 <is_aperture>
 80030b2:	4558      	cmp	r0, fp
 80030b4:	d108      	bne.n	80030c8 <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 80030b6:	4632      	mov	r2, r6
 80030b8:	4639      	mov	r1, r7
 80030ba:	4628      	mov	r0, r5
 80030bc:	f7ff ffac 	bl	8003018 <enable_spad_bit>
		currentSpad++;
 80030c0:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 80030c2:	f108 0801 	add.w	r8, r8, #1
 80030c6:	e7cf      	b.n	8003068 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80030c8:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80030cc:	e7d0      	b.n	8003070 <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 80030ce:	5ce9      	ldrb	r1, [r5, r3]
 80030d0:	5cf2      	ldrb	r2, [r6, r3]
 80030d2:	4291      	cmp	r1, r2
 80030d4:	d101      	bne.n	80030da <enable_ref_spads+0x90>
			i++;
 80030d6:	3301      	adds	r3, #1
 80030d8:	e7d9      	b.n	800308e <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80030da:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80030de:	e7d8      	b.n	8003092 <enable_ref_spads+0x48>

080030e0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80030e0:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 80030e2:	22c0      	movs	r2, #192	; 0xc0
{
 80030e4:	b088      	sub	sp, #32
 80030e6:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 80030e8:	2101      	movs	r1, #1
{
 80030ea:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80030ec:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 80030f0:	f001 fcc2 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80030f4:	b9f0      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80030f6:	a901      	add	r1, sp, #4
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff fd7a 	bl	8002bf2 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80030fe:	b9c8      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003100:	2201      	movs	r2, #1
 8003102:	21ff      	movs	r1, #255	; 0xff
 8003104:	4620      	mov	r0, r4
 8003106:	f001 fcb7 	bl	8004a78 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 800310a:	b998      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 800310c:	4632      	mov	r2, r6
 800310e:	21b6      	movs	r1, #182	; 0xb6
 8003110:	4620      	mov	r0, r4
 8003112:	f001 fc6b 	bl	80049ec <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003116:	b968      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003118:	4602      	mov	r2, r0
 800311a:	21ff      	movs	r1, #255	; 0xff
 800311c:	4620      	mov	r0, r4
 800311e:	f001 fcab 	bl	8004a78 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8003122:	b938      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003124:	462a      	mov	r2, r5
 8003126:	2101      	movs	r1, #1
 8003128:	4620      	mov	r0, r4
 800312a:	f001 fca5 	bl	8004a78 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800312e:	b908      	cbnz	r0, 8003134 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003130:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8003134:	b008      	add	sp, #32
 8003136:	bd70      	pop	{r4, r5, r6, pc}

08003138 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003138:	b570      	push	{r4, r5, r6, lr}
 800313a:	460e      	mov	r6, r1
 800313c:	b088      	sub	sp, #32
 800313e:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003140:	21ff      	movs	r1, #255	; 0xff
 8003142:	2201      	movs	r2, #1
{
 8003144:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003146:	f001 fc97 	bl	8004a78 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800314a:	4602      	mov	r2, r0
 800314c:	b9a8      	cbnz	r0, 800317a <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800314e:	214f      	movs	r1, #79	; 0x4f
 8003150:	4620      	mov	r0, r4
 8003152:	f001 fc91 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003156:	b980      	cbnz	r0, 800317a <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8003158:	222c      	movs	r2, #44	; 0x2c
 800315a:	214e      	movs	r1, #78	; 0x4e
 800315c:	4620      	mov	r0, r4
 800315e:	f001 fc8b 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003162:	4602      	mov	r2, r0
 8003164:	b948      	cbnz	r0, 800317a <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003166:	21ff      	movs	r1, #255	; 0xff
 8003168:	4620      	mov	r0, r4
 800316a:	f001 fc85 	bl	8004a78 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800316e:	b920      	cbnz	r0, 800317a <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8003170:	22b4      	movs	r2, #180	; 0xb4
 8003172:	21b6      	movs	r1, #182	; 0xb6
 8003174:	4620      	mov	r0, r4
 8003176:	f001 fc7f 	bl	8004a78 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8003180:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8003184:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8003188:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 800318c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 8003190:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 8003194:	b31d      	cbz	r5, 80031de <VL53L0X_set_reference_spads+0xa6>
 8003196:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003198:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 800319c:	f7ff ff32 	bl	8003004 <is_aperture>
 80031a0:	b908      	cbnz	r0, 80031a6 <VL53L0X_set_reference_spads+0x6e>
 80031a2:	2a2c      	cmp	r2, #44	; 0x2c
 80031a4:	d119      	bne.n	80031da <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 80031a6:	ab07      	add	r3, sp, #28
 80031a8:	9304      	str	r3, [sp, #16]
 80031aa:	9202      	str	r2, [sp, #8]
 80031ac:	23b4      	movs	r3, #180	; 0xb4
 80031ae:	2206      	movs	r2, #6
 80031b0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80031b4:	9603      	str	r6, [sp, #12]
 80031b6:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80031ba:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 80031be:	4629      	mov	r1, r5
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff ff42 	bl	800304a <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80031c6:	b930      	cbnz	r0, 80031d6 <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80031c8:	2301      	movs	r3, #1
 80031ca:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80031ce:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80031d2:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 80031d6:	b008      	add	sp, #32
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 80031da:	3201      	adds	r2, #1
 80031dc:	e7dc      	b.n	8003198 <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 80031de:	462a      	mov	r2, r5
 80031e0:	e7e1      	b.n	80031a6 <VL53L0X_set_reference_spads+0x6e>

080031e2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80031e2:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80031e4:	f041 0201 	orr.w	r2, r1, #1
 80031e8:	2100      	movs	r1, #0
{
 80031ea:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80031ec:	f001 fc44 	bl	8004a78 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80031f0:	b978      	cbnz	r0, 8003212 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80031f2:	4620      	mov	r0, r4
 80031f4:	f000 fa3a 	bl	800366c <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80031f8:	b958      	cbnz	r0, 8003212 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80031fa:	4601      	mov	r1, r0
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7ff fccc 	bl	8002b9a <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8003202:	b930      	cbnz	r0, 8003212 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003204:	4602      	mov	r2, r0
 8003206:	4601      	mov	r1, r0
 8003208:	4620      	mov	r0, r4

	return Status;
}
 800320a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800320e:	f001 bc33 	b.w	8004a78 <VL53L0X_WrByte>
}
 8003212:	bd10      	pop	{r4, pc}

08003214 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8003218:	f04f 0b00 	mov.w	fp, #0
{
 800321c:	4689      	mov	r9, r1
 800321e:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003220:	21ff      	movs	r1, #255	; 0xff
 8003222:	2201      	movs	r2, #1
{
 8003224:	4605      	mov	r5, r0
 8003226:	461f      	mov	r7, r3
 8003228:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 800322c:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 8003230:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003234:	f001 fc20 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003238:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800323a:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800323c:	4659      	mov	r1, fp
 800323e:	4628      	mov	r0, r5
 8003240:	f001 fc1a 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003244:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003246:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003248:	21ff      	movs	r1, #255	; 0xff
 800324a:	4628      	mov	r0, r5
 800324c:	f001 fc14 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003250:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003252:	4304      	orrs	r4, r0
 8003254:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8003256:	f1b9 0f00 	cmp.w	r9, #0
 800325a:	d030      	beq.n	80032be <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 800325c:	f1ba 0f00 	cmp.w	sl, #0
 8003260:	d006      	beq.n	8003270 <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003264:	21cb      	movs	r1, #203	; 0xcb
 8003266:	4628      	mov	r0, r5
 8003268:	f001 fb77 	bl	800495a <VL53L0X_RdByte>
 800326c:	4304      	orrs	r4, r0
 800326e:	b264      	sxtb	r4, r4
		if (phase_enable)
 8003270:	b13e      	cbz	r6, 8003282 <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003272:	f10d 0207 	add.w	r2, sp, #7
 8003276:	21ee      	movs	r1, #238	; 0xee
 8003278:	4628      	mov	r0, r5
 800327a:	f001 fb6e 	bl	800495a <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800327e:	4304      	orrs	r4, r0
 8003280:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003282:	2201      	movs	r2, #1
 8003284:	21ff      	movs	r1, #255	; 0xff
 8003286:	4628      	mov	r0, r5
 8003288:	f001 fbf6 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800328c:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800328e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003290:	2100      	movs	r1, #0
 8003292:	4628      	mov	r0, r5
 8003294:	f001 fbf0 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003298:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800329a:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800329c:	2200      	movs	r2, #0
 800329e:	21ff      	movs	r1, #255	; 0xff
 80032a0:	4628      	mov	r0, r5
 80032a2:	f001 fbe9 	bl	8004a78 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80032a6:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80032a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80032ae:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80032b0:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 80032b4:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80032b6:	7013      	strb	r3, [r2, #0]
}
 80032b8:	b003      	add	sp, #12
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 80032be:	f1ba 0f00 	cmp.w	sl, #0
 80032c2:	d006      	beq.n	80032d2 <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80032c4:	4642      	mov	r2, r8
 80032c6:	21cb      	movs	r1, #203	; 0xcb
 80032c8:	4628      	mov	r0, r5
 80032ca:	f001 fbd5 	bl	8004a78 <VL53L0X_WrByte>
 80032ce:	4304      	orrs	r4, r0
 80032d0:	b264      	sxtb	r4, r4
		if (phase_enable)
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d0d5      	beq.n	8003282 <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80032d6:	463b      	mov	r3, r7
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	21ee      	movs	r1, #238	; 0xee
 80032dc:	4628      	mov	r0, r5
 80032de:	f001 fbed 	bl	8004abc <VL53L0X_UpdateByte>
 80032e2:	e7cc      	b.n	800327e <VL53L0X_ref_calibration_io+0x6a>

080032e4 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80032ec:	2200      	movs	r2, #0
{
 80032ee:	4604      	mov	r4, r0
 80032f0:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80032f2:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80032f6:	461e      	mov	r6, r3
 80032f8:	b343      	cbz	r3, 800334c <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80032fa:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80032fe:	2201      	movs	r2, #1
 8003300:	4611      	mov	r1, r2
 8003302:	4620      	mov	r0, r4
 8003304:	f001 fbb8 	bl	8004a78 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003308:	bb10      	cbnz	r0, 8003350 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800330a:	2140      	movs	r1, #64	; 0x40
 800330c:	4620      	mov	r0, r4
 800330e:	f7ff ff68 	bl	80031e2 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003312:	b9e8      	cbnz	r0, 8003350 <VL53L0X_perform_vhv_calibration+0x6c>
 8003314:	2f01      	cmp	r7, #1
 8003316:	d11b      	bne.n	8003350 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003318:	f10d 0317 	add.w	r3, sp, #23
 800331c:	9003      	str	r0, [sp, #12]
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	4602      	mov	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	9702      	str	r7, [sp, #8]
 8003326:	f8cd 8000 	str.w	r8, [sp]
 800332a:	4639      	mov	r1, r7
 800332c:	4620      	mov	r0, r4
 800332e:	f7ff ff71 	bl	8003214 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003332:	b940      	cbnz	r0, 8003346 <VL53L0X_perform_vhv_calibration+0x62>
 8003334:	b13e      	cbz	r6, 8003346 <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003336:	462a      	mov	r2, r5
 8003338:	2101      	movs	r1, #1
 800333a:	4620      	mov	r0, r4
 800333c:	f001 fb9c 	bl	8004a78 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003340:	b908      	cbnz	r0, 8003346 <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003342:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8003346:	b006      	add	sp, #24
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 800334c:	461d      	mov	r5, r3
 800334e:	e7d6      	b.n	80032fe <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	f888 3000 	strb.w	r3, [r8]
 8003356:	e7ec      	b.n	8003332 <VL53L0X_perform_vhv_calibration+0x4e>

08003358 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335c:	4604      	mov	r4, r0
 800335e:	b086      	sub	sp, #24
 8003360:	4688      	mov	r8, r1
 8003362:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003364:	461e      	mov	r6, r3
 8003366:	b343      	cbz	r3, 80033ba <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003368:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800336c:	2202      	movs	r2, #2
 800336e:	2101      	movs	r1, #1
 8003370:	4620      	mov	r0, r4
 8003372:	f001 fb81 	bl	8004a78 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003376:	bb10      	cbnz	r0, 80033be <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003378:	4601      	mov	r1, r0
 800337a:	4620      	mov	r0, r4
 800337c:	f7ff ff31 	bl	80031e2 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003380:	b9e8      	cbnz	r0, 80033be <VL53L0X_perform_phase_calibration+0x66>
 8003382:	2f01      	cmp	r7, #1
 8003384:	d11b      	bne.n	80033be <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003386:	f10d 0317 	add.w	r3, sp, #23
 800338a:	9002      	str	r0, [sp, #8]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	4602      	mov	r2, r0
 8003390:	4603      	mov	r3, r0
 8003392:	9703      	str	r7, [sp, #12]
 8003394:	f8cd 8004 	str.w	r8, [sp, #4]
 8003398:	4639      	mov	r1, r7
 800339a:	4620      	mov	r0, r4
 800339c:	f7ff ff3a 	bl	8003214 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80033a0:	b940      	cbnz	r0, 80033b4 <VL53L0X_perform_phase_calibration+0x5c>
 80033a2:	b13e      	cbz	r6, 80033b4 <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80033a4:	462a      	mov	r2, r5
 80033a6:	2101      	movs	r1, #1
 80033a8:	4620      	mov	r0, r4
 80033aa:	f001 fb65 	bl	8004a78 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80033ae:	b908      	cbnz	r0, 80033b4 <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80033b0:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80033b4:	b006      	add	sp, #24
 80033b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 80033ba:	461d      	mov	r5, r3
 80033bc:	e7d6      	b.n	800336c <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	f888 3000 	strb.w	r3, [r8]
 80033c4:	e7ec      	b.n	80033a0 <VL53L0X_perform_phase_calibration+0x48>

080033c6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80033c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c8:	461e      	mov	r6, r3
 80033ca:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80033cc:	2300      	movs	r3, #0
 80033ce:	4632      	mov	r2, r6
{
 80033d0:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80033d2:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 80033d6:	f7ff ff85 	bl	80032e4 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80033da:	b970      	cbnz	r0, 80033fa <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 80033dc:	4603      	mov	r3, r0
 80033de:	4632      	mov	r2, r6
 80033e0:	4639      	mov	r1, r7
 80033e2:	4620      	mov	r0, r4
 80033e4:	f7ff ffb8 	bl	8003358 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80033e8:	b938      	cbnz	r0, 80033fa <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80033ea:	462a      	mov	r2, r5
 80033ec:	2101      	movs	r1, #1
 80033ee:	4620      	mov	r0, r4
 80033f0:	f001 fb42 	bl	8004a78 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80033f4:	b908      	cbnz	r0, 80033fa <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80033f6:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033fc <VL53L0X_perform_ref_spad_management>:
{
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	b093      	sub	sp, #76	; 0x4c
	uint32_t lastSpadIndex = 0;
 8003402:	2300      	movs	r3, #0
{
 8003404:	910a      	str	r1, [sp, #40]	; 0x28
 8003406:	920b      	str	r2, [sp, #44]	; 0x2c
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003408:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 800340c:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 8003410:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 8003414:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 8003418:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 800341c:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003420:	2201      	movs	r2, #1
 8003422:	21ff      	movs	r1, #255	; 0xff
{
 8003424:	4605      	mov	r5, r0
	uint32_t lastSpadIndex = 0;
 8003426:	930e      	str	r3, [sp, #56]	; 0x38
	int32_t nextGoodSpad = 0;
 8003428:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t VhvSettings = 0;
 800342a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	uint8_t PhaseCal = 0;
 800342e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003432:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003436:	f001 fb1f 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800343a:	4604      	mov	r4, r0
 800343c:	2800      	cmp	r0, #0
 800343e:	f040 810e 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8003442:	4602      	mov	r2, r0
 8003444:	214f      	movs	r1, #79	; 0x4f
 8003446:	4628      	mov	r0, r5
 8003448:	f001 fb16 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800344c:	4604      	mov	r4, r0
 800344e:	2800      	cmp	r0, #0
 8003450:	f040 8105 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8003454:	222c      	movs	r2, #44	; 0x2c
 8003456:	214e      	movs	r1, #78	; 0x4e
 8003458:	4628      	mov	r0, r5
 800345a:	f001 fb0d 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800345e:	4604      	mov	r4, r0
 8003460:	2800      	cmp	r0, #0
 8003462:	f040 80fc 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003466:	4602      	mov	r2, r0
 8003468:	21ff      	movs	r1, #255	; 0xff
 800346a:	4628      	mov	r0, r5
 800346c:	f001 fb04 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003470:	4604      	mov	r4, r0
 8003472:	2800      	cmp	r0, #0
 8003474:	f040 80f3 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8003478:	22b4      	movs	r2, #180	; 0xb4
 800347a:	21b6      	movs	r1, #182	; 0xb6
 800347c:	4628      	mov	r0, r5
 800347e:	f001 fafb 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003482:	4604      	mov	r4, r0
 8003484:	2800      	cmp	r0, #0
 8003486:	f040 80ea 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 800348a:	4602      	mov	r2, r0
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	4628      	mov	r0, r5
 8003490:	f001 faf2 	bl	8004a78 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8003494:	4604      	mov	r4, r0
 8003496:	2800      	cmp	r0, #0
 8003498:	f040 80e1 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800349c:	4603      	mov	r3, r0
 800349e:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 80034a2:	a90d      	add	r1, sp, #52	; 0x34
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7ff ff8e 	bl	80033c6 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 80034aa:	4604      	mov	r4, r0
 80034ac:	2800      	cmp	r0, #0
 80034ae:	f040 80d6 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		lastSpadIndex = currentSpadIndex;
 80034b2:	af12      	add	r7, sp, #72	; 0x48
					Dev->Data.SpadData.RefGoodSpadMap,
 80034b4:	f505 7395 	add.w	r3, r5, #298	; 0x12a
		lastSpadIndex = currentSpadIndex;
 80034b8:	f847 0d10 	str.w	r0, [r7, #-16]!
					Dev->Data.SpadData.RefGoodSpadMap,
 80034bc:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 80034be:	2303      	movs	r3, #3
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	2106      	movs	r1, #6
 80034c4:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefSpadEnables,
 80034c6:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80034ca:	e88d 000a 	stmia.w	sp, {r1, r3}
 80034ce:	9002      	str	r0, [sp, #8]
 80034d0:	4601      	mov	r1, r0
 80034d2:	9704      	str	r7, [sp, #16]
 80034d4:	464b      	mov	r3, r9
 80034d6:	9a07      	ldr	r2, [sp, #28]
 80034d8:	4628      	mov	r0, r5
 80034da:	f7ff fdb6 	bl	800304a <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80034de:	4604      	mov	r4, r0
 80034e0:	2800      	cmp	r0, #0
 80034e2:	f040 80bc 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
		Status = perform_ref_signal_measurement(Dev,
 80034e6:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80034ea:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 80034ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 80034ee:	f7ff fdf7 	bl	80030e0 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80034f2:	4604      	mov	r4, r0
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f040 80b2 	bne.w	800365e <VL53L0X_perform_ref_spad_management+0x262>
 80034fa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80034fe:	4543      	cmp	r3, r8
 8003500:	d955      	bls.n	80035ae <VL53L0X_perform_ref_spad_management+0x1b2>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003502:	f885 0124 	strb.w	r0, [r5, #292]	; 0x124
 8003506:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
 800350a:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
 800350e:	f885 0127 	strb.w	r0, [r5, #295]	; 0x127
 8003512:	f885 0128 	strb.w	r0, [r5, #296]	; 0x128
 8003516:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 800351a:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 800351e:	f7ff fd71 	bl	8003004 <is_aperture>
 8003522:	b180      	cbz	r0, 8003546 <VL53L0X_perform_ref_spad_management+0x14a>
			Status = enable_ref_spads(Dev,
 8003524:	2206      	movs	r2, #6
 8003526:	23b4      	movs	r3, #180	; 0xb4
 8003528:	9704      	str	r7, [sp, #16]
 800352a:	2703      	movs	r7, #3
 800352c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003530:	9703      	str	r7, [sp, #12]
 8003532:	9602      	str	r6, [sp, #8]
 8003534:	464b      	mov	r3, r9
 8003536:	9a07      	ldr	r2, [sp, #28]
 8003538:	2101      	movs	r1, #1
 800353a:	4628      	mov	r0, r5
 800353c:	f7ff fd85 	bl	800304a <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8003540:	b128      	cbz	r0, 800354e <VL53L0X_perform_ref_spad_management+0x152>
			Status = perform_ref_signal_measurement(Dev,
 8003542:	4604      	mov	r4, r0
	return Status;
 8003544:	e08b      	b.n	800365e <VL53L0X_perform_ref_spad_management+0x262>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003546:	2e2b      	cmp	r6, #43	; 0x2b
 8003548:	d8ec      	bhi.n	8003524 <VL53L0X_perform_ref_spad_management+0x128>
				currentSpadIndex++;
 800354a:	3601      	adds	r6, #1
 800354c:	e7e5      	b.n	800351a <VL53L0X_perform_ref_spad_management+0x11e>
				Status = perform_ref_signal_measurement(Dev,
 800354e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8003552:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8003554:	9e0e      	ldr	r6, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8003556:	f7ff fdc3 	bl	80030e0 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 800355a:	2800      	cmp	r0, #0
 800355c:	d1f1      	bne.n	8003542 <VL53L0X_perform_ref_spad_management+0x146>
 800355e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8003562:	4543      	cmp	r3, r8
 8003564:	d97f      	bls.n	8003666 <VL53L0X_perform_ref_spad_management+0x26a>
					isApertureSpads_int = 1;
 8003566:	f04f 0a01 	mov.w	sl, #1
			needAptSpads = 1;
 800356a:	f04f 0b01 	mov.w	fp, #1
 800356e:	e022      	b.n	80035b6 <VL53L0X_perform_ref_spad_management+0x1ba>
				memcpy(lastSpadArray,
 8003570:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8003574:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
 8003578:	9010      	str	r0, [sp, #64]	; 0x40
 800357a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			(refSpadCount_int)++;
 800357e:	9f08      	ldr	r7, [sp, #32]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003580:	9209      	str	r2, [sp, #36]	; 0x24
 8003582:	e02a      	b.n	80035da <VL53L0X_perform_ref_spad_management+0x1de>
			(refSpadCount_int)++;
 8003584:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8003586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003588:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800358a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800358c:	f883 a000 	strb.w	sl, [r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003590:	2301      	movs	r3, #1
 8003592:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800359e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 80035a6:	e05a      	b.n	800365e <VL53L0X_perform_ref_spad_management+0x262>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80035a8:	f06f 0431 	mvn.w	r4, #49	; 0x31
 80035ac:	e057      	b.n	800365e <VL53L0X_perform_ref_spad_management+0x262>
	uint8_t	 isApertureSpads_int = 0;
 80035ae:	f04f 0a00 	mov.w	sl, #0
	uint32_t refSpadCount_int = 0;
 80035b2:	4657      	mov	r7, sl
			needAptSpads = 0;
 80035b4:	46d3      	mov	fp, sl
		(peakSignalRateRef < targetRefRate)) {
 80035b6:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 80035ba:	4590      	cmp	r8, r2
 80035bc:	d9e3      	bls.n	8003586 <VL53L0X_perform_ref_spad_management+0x18a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 80035be:	eba2 0208 	sub.w	r2, r2, r8
 80035c2:	2a00      	cmp	r2, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80035c4:	f8d9 0000 	ldr.w	r0, [r9]
 80035c8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80035cc:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 80035ce:	bfb8      	it	lt
 80035d0:	4252      	neglt	r2, r2
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80035d2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 80035d6:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 80035d8:	2703      	movs	r7, #3
			get_next_good_spad(
 80035da:	ab0f      	add	r3, sp, #60	; 0x3c
 80035dc:	4632      	mov	r2, r6
 80035de:	2106      	movs	r1, #6
 80035e0:	9807      	ldr	r0, [sp, #28]
 80035e2:	f7ff fce7 	bl	8002fb4 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80035e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80035e8:	1c73      	adds	r3, r6, #1
 80035ea:	d0dd      	beq.n	80035a8 <VL53L0X_perform_ref_spad_management+0x1ac>
			(refSpadCount_int)++;
 80035ec:	1c7b      	adds	r3, r7, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80035ee:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
			(refSpadCount_int)++;
 80035f2:	9308      	str	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80035f4:	f7ff fd06 	bl	8003004 <is_aperture>
 80035f8:	4558      	cmp	r0, fp
 80035fa:	4682      	mov	sl, r0
 80035fc:	d1d4      	bne.n	80035a8 <VL53L0X_perform_ref_spad_management+0x1ac>
			Status = enable_spad_bit(
 80035fe:	4632      	mov	r2, r6
 8003600:	2106      	movs	r1, #6
 8003602:	4648      	mov	r0, r9
 8003604:	f7ff fd08 	bl	8003018 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8003608:	2800      	cmp	r0, #0
 800360a:	d19a      	bne.n	8003542 <VL53L0X_perform_ref_spad_management+0x146>
				Status = set_ref_spad_map(Dev,
 800360c:	4649      	mov	r1, r9
 800360e:	4628      	mov	r0, r5
				currentSpadIndex++;
 8003610:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 8003612:	f7ff fd10 	bl	8003036 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8003616:	2800      	cmp	r0, #0
 8003618:	d193      	bne.n	8003542 <VL53L0X_perform_ref_spad_management+0x146>
			Status = perform_ref_signal_measurement(Dev,
 800361a:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800361e:	4628      	mov	r0, r5
 8003620:	f7ff fd5e 	bl	80030e0 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8003624:	2800      	cmp	r0, #0
 8003626:	d18c      	bne.n	8003542 <VL53L0X_perform_ref_spad_management+0x146>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003628:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 800362c:	eba1 0208 	sub.w	r2, r1, r8
 8003630:	2a00      	cmp	r2, #0
 8003632:	bfb8      	it	lt
 8003634:	4252      	neglt	r2, r2
			if (peakSignalRateRef > targetRefRate) {
 8003636:	4588      	cmp	r8, r1
 8003638:	d29a      	bcs.n	8003570 <VL53L0X_perform_ref_spad_management+0x174>
				if (signalRateDiff > lastSignalRateDiff) {
 800363a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363c:	429a      	cmp	r2, r3
 800363e:	d9a1      	bls.n	8003584 <VL53L0X_perform_ref_spad_management+0x188>
					Status = set_ref_spad_map(Dev,
 8003640:	a910      	add	r1, sp, #64	; 0x40
 8003642:	4628      	mov	r0, r5
 8003644:	f7ff fcf7 	bl	8003036 <set_ref_spad_map>
					memcpy(
 8003648:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800364c:	f8a5 1128 	strh.w	r1, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8003650:	4602      	mov	r2, r0
					memcpy(
 8003652:	9810      	ldr	r0, [sp, #64]	; 0x40
 8003654:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8003658:	2a00      	cmp	r2, #0
 800365a:	d094      	beq.n	8003586 <VL53L0X_perform_ref_spad_management+0x18a>
 800365c:	4614      	mov	r4, r2
}
 800365e:	4620      	mov	r0, r4
 8003660:	b013      	add	sp, #76	; 0x4c
 8003662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 8003666:	4682      	mov	sl, r0
	uint32_t refSpadCount_int = 0;
 8003668:	4607      	mov	r7, r0
 800366a:	e77e      	b.n	800356a <VL53L0X_perform_ref_spad_management+0x16e>

0800366c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800366c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 800366e:	ad02      	add	r5, sp, #8
 8003670:	2300      	movs	r3, #0
 8003672:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 8003676:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8003678:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800367a:	4629      	mov	r1, r5
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff fc60 	bl	8002f42 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8003682:	b958      	cbnz	r0, 800369c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003684:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d007      	beq.n	800369c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800368c:	3c01      	subs	r4, #1
 800368e:	d003      	beq.n	8003698 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8003690:	4630      	mov	r0, r6
 8003692:	f001 fa29 	bl	8004ae8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003696:	e7f0      	b.n	800367a <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003698:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 800369c:	b002      	add	sp, #8
 800369e:	bd70      	pop	{r4, r5, r6, pc}

080036a0 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80036a0:	b510      	push	{r4, lr}
 80036a2:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 80036a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80036a8:	428a      	cmp	r2, r1
 80036aa:	d802      	bhi.n	80036b2 <VL53L0X_isqrt+0x12>
 80036ac:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 80036ae:	b912      	cbnz	r2, 80036b6 <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 80036b0:	bd10      	pop	{r4, pc}
		bit >>= 2;
 80036b2:	0892      	lsrs	r2, r2, #2
 80036b4:	e7f8      	b.n	80036a8 <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 80036b6:	1884      	adds	r4, r0, r2
 80036b8:	42a1      	cmp	r1, r4
 80036ba:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 80036be:	bf26      	itte	cs
 80036c0:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 80036c2:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 80036c4:	4618      	movcc	r0, r3
		bit >>= 2;
 80036c6:	0892      	lsrs	r2, r2, #2
 80036c8:	e7f1      	b.n	80036ae <VL53L0X_isqrt+0xe>

080036ca <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80036ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2183      	movs	r1, #131	; 0x83
{
 80036d0:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80036d2:	f001 f9d1 	bl	8004a78 <VL53L0X_WrByte>
 80036d6:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80036d8:	b978      	cbnz	r0, 80036fa <VL53L0X_device_read_strobe+0x30>
 80036da:	25c8      	movs	r5, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80036dc:	f10d 0207 	add.w	r2, sp, #7
 80036e0:	2183      	movs	r1, #131	; 0x83
 80036e2:	4630      	mov	r0, r6
 80036e4:	f001 f939 	bl	800495a <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80036e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80036ec:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80036ee:	b923      	cbnz	r3, 80036fa <VL53L0X_device_read_strobe+0x30>
 80036f0:	b918      	cbnz	r0, 80036fa <VL53L0X_device_read_strobe+0x30>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80036f2:	3d01      	subs	r5, #1
 80036f4:	d1f2      	bne.n	80036dc <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80036f6:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80036fa:	2201      	movs	r2, #1
 80036fc:	2183      	movs	r1, #131	; 0x83
 80036fe:	4630      	mov	r0, r6
 8003700:	f001 f9ba 	bl	8004a78 <VL53L0X_WrByte>
 8003704:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8003706:	b240      	sxtb	r0, r0
 8003708:	b002      	add	sp, #8
 800370a:	bd70      	pop	{r4, r5, r6, pc}

0800370c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003710:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8003714:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8003716:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800371a:	2e07      	cmp	r6, #7
{
 800371c:	4604      	mov	r4, r0
 800371e:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 8003720:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 8003724:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 8003728:	f000 8298 	beq.w	8003c5c <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800372c:	2201      	movs	r2, #1
 800372e:	2180      	movs	r1, #128	; 0x80
 8003730:	f001 f9a2 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003734:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003736:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003738:	21ff      	movs	r1, #255	; 0xff
 800373a:	4620      	mov	r0, r4
 800373c:	f001 f99c 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003740:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003742:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003744:	4649      	mov	r1, r9
 8003746:	4620      	mov	r0, r4
 8003748:	f001 f996 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800374c:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800374e:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003750:	2206      	movs	r2, #6
 8003752:	21ff      	movs	r1, #255	; 0xff
 8003754:	4620      	mov	r0, r4
 8003756:	f001 f98f 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800375a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800375c:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800375e:	f10d 0215 	add.w	r2, sp, #21
 8003762:	2183      	movs	r1, #131	; 0x83
 8003764:	4620      	mov	r0, r4
 8003766:	f001 f8f8 	bl	800495a <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800376a:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800376e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003770:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003772:	f042 0204 	orr.w	r2, r2, #4
 8003776:	2183      	movs	r1, #131	; 0x83
 8003778:	4620      	mov	r0, r4
 800377a:	f001 f97d 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800377e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8003780:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003782:	2207      	movs	r2, #7
 8003784:	21ff      	movs	r1, #255	; 0xff
 8003786:	4620      	mov	r0, r4
 8003788:	f001 f976 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800378c:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800378e:	2201      	movs	r2, #1
 8003790:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003792:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003794:	4620      	mov	r0, r4
 8003796:	f001 f96f 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800379a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800379c:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 800379e:	4620      	mov	r0, r4
 80037a0:	f001 f9a2 	bl	8004ae8 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80037a4:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 80037a6:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80037a8:	2201      	movs	r2, #1
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	4620      	mov	r0, r4
 80037ae:	f001 f963 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 80037b2:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80037b4:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 80037b6:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80037ba:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 80037bc:	f000 8223 	beq.w	8003c06 <VL53L0X_get_info_from_device+0x4fa>
 80037c0:	07f3      	lsls	r3, r6, #31
 80037c2:	f100 8223 	bmi.w	8003c0c <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80037c6:	226b      	movs	r2, #107	; 0x6b
 80037c8:	2194      	movs	r1, #148	; 0x94
 80037ca:	4620      	mov	r0, r4
 80037cc:	f001 f954 	bl	8004a78 <VL53L0X_WrByte>
 80037d0:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff ff79 	bl	80036ca <VL53L0X_device_read_strobe>
 80037d8:	4338      	orrs	r0, r7
 80037da:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80037dc:	aa06      	add	r2, sp, #24
 80037de:	2190      	movs	r1, #144	; 0x90
 80037e0:	4620      	mov	r0, r4
 80037e2:	f001 f923 	bl	8004a2c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80037e6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80037e8:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80037ea:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80037ec:	2224      	movs	r2, #36	; 0x24
 80037ee:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80037f0:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80037f4:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80037f8:	4620      	mov	r0, r4
 80037fa:	f001 f93d 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80037fe:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003800:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003802:	4620      	mov	r0, r4
 8003804:	f7ff ff61 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8003808:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800380a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800380c:	aa06      	add	r2, sp, #24
 800380e:	2190      	movs	r1, #144	; 0x90
 8003810:	4620      	mov	r0, r4
 8003812:	f001 f90b 	bl	8004a2c <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8003816:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003818:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800381c:	0e1a      	lsrs	r2, r3, #24
 800381e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003822:	0c1a      	lsrs	r2, r3, #16
 8003824:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 8003828:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800382a:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800382c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800382e:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8003830:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003834:	4620      	mov	r0, r4
 8003836:	2225      	movs	r2, #37	; 0x25
 8003838:	f001 f91e 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800383c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800383e:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff ff42 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003846:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003848:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800384a:	aa06      	add	r2, sp, #24
 800384c:	2190      	movs	r1, #144	; 0x90
 800384e:	4620      	mov	r0, r4
 8003850:	f001 f8ec 	bl	8004a2c <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003854:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003856:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003858:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800385a:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800385c:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800385e:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8003860:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8003864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8003868:	f018 0302 	ands.w	r3, r8, #2
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	f000 80db 	beq.w	8003a28 <VL53L0X_get_info_from_device+0x31c>
 8003872:	f016 0702 	ands.w	r7, r6, #2
 8003876:	f040 80d7 	bne.w	8003a28 <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800387a:	2202      	movs	r2, #2
 800387c:	2194      	movs	r1, #148	; 0x94
 800387e:	4620      	mov	r0, r4
 8003880:	f001 f8fa 	bl	8004a78 <VL53L0X_WrByte>
 8003884:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003886:	4620      	mov	r0, r4
 8003888:	f7ff ff1f 	bl	80036ca <VL53L0X_device_read_strobe>
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	4318      	orrs	r0, r3
 8003890:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8003892:	f10d 0216 	add.w	r2, sp, #22
 8003896:	2190      	movs	r1, #144	; 0x90
 8003898:	4620      	mov	r0, r4
 800389a:	f001 f85e 	bl	800495a <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 800389e:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80038a0:	227b      	movs	r2, #123	; 0x7b
 80038a2:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80038a4:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80038a6:	4620      	mov	r0, r4
 80038a8:	f001 f8e6 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80038ac:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80038ae:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7ff ff0a 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80038b6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80038b8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80038ba:	f10d 0217 	add.w	r2, sp, #23
 80038be:	2190      	movs	r1, #144	; 0x90
 80038c0:	4620      	mov	r0, r4
 80038c2:	f001 f84a 	bl	800495a <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 80038c6:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80038c8:	2277      	movs	r2, #119	; 0x77
 80038ca:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80038cc:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80038ce:	4620      	mov	r0, r4
 80038d0:	f001 f8d2 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80038d4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80038d6:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff fef6 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80038de:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80038e0:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80038e2:	aa06      	add	r2, sp, #24
 80038e4:	2190      	movs	r1, #144	; 0x90
 80038e6:	4620      	mov	r0, r4
 80038e8:	f001 f8a0 	bl	8004a2c <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80038ec:	9b06      	ldr	r3, [sp, #24]
 80038ee:	0e5a      	lsrs	r2, r3, #25
 80038f0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80038f4:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80038f8:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80038fc:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 8003900:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 8003904:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003906:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003910:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003912:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8003914:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003918:	4620      	mov	r0, r4
 800391a:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800391c:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003920:	f001 f8aa 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003924:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8003926:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fece 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800392e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003930:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003932:	aa06      	add	r2, sp, #24
 8003934:	2190      	movs	r1, #144	; 0x90
 8003936:	4620      	mov	r0, r4
 8003938:	f001 f878 	bl	8004a2c <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800393c:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 800393e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003942:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8003946:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800394a:	f3c3 5286 	ubfx	r2, r3, #22, #7
 800394e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003952:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8003956:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800395a:	f3c3 2206 	ubfx	r2, r3, #8, #7
 800395e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 8003962:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003964:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003968:	019b      	lsls	r3, r3, #6
 800396a:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800396e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003970:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003972:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003976:	4620      	mov	r0, r4
 8003978:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800397a:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800397e:	f001 f87b 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003982:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003984:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff fe9f 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800398c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800398e:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003990:	aa06      	add	r2, sp, #24
 8003992:	2190      	movs	r1, #144	; 0x90
 8003994:	4620      	mov	r0, r4
 8003996:	f001 f849 	bl	8004a2c <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800399a:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 800399c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80039a0:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 80039a4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80039a8:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 80039ac:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80039b0:	f3c3 3206 	ubfx	r2, r3, #12, #7
 80039b4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 80039b8:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80039ba:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80039c4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039c6:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80039c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80039cc:	4620      	mov	r0, r4
 80039ce:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80039d0:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80039d4:	f001 f850 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039d8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80039da:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 80039dc:	4620      	mov	r0, r4
 80039de:	f7ff fe74 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80039e2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80039e4:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039e6:	aa06      	add	r2, sp, #24
 80039e8:	2190      	movs	r1, #144	; 0x90
 80039ea:	4620      	mov	r0, r4
 80039ec:	f001 f81e 	bl	8004a2c <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80039f0:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 80039f2:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 80039f6:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 80039fa:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 80039fe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003a02:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a06:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003a08:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003a0c:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a10:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003a12:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003a16:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003a1a:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a1e:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003a20:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003a24:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8003a28:	f018 0304 	ands.w	r3, r8, #4
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	f000 80ef 	beq.w	8003c10 <VL53L0X_get_info_from_device+0x504>
 8003a32:	0777      	lsls	r7, r6, #29
 8003a34:	f100 80ec 	bmi.w	8003c10 <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003a38:	227b      	movs	r2, #123	; 0x7b
 8003a3a:	2194      	movs	r1, #148	; 0x94
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f001 f81b 	bl	8004a78 <VL53L0X_WrByte>
 8003a42:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7ff fe40 	bl	80036ca <VL53L0X_device_read_strobe>
 8003a4a:	4338      	orrs	r0, r7
 8003a4c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003a4e:	aa07      	add	r2, sp, #28
 8003a50:	2190      	movs	r1, #144	; 0x90
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 ffea 	bl	8004a2c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a58:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003a5a:	227c      	movs	r2, #124	; 0x7c
 8003a5c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003a5e:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003a60:	4620      	mov	r0, r4
 8003a62:	f001 f809 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003a66:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003a68:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f7ff fe2d 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003a70:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a72:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003a74:	aa08      	add	r2, sp, #32
 8003a76:	2190      	movs	r1, #144	; 0x90
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f000 ffd7 	bl	8004a2c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a7e:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003a80:	2273      	movs	r2, #115	; 0x73
 8003a82:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003a84:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 fff6 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003a8c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003a8e:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff fe1a 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003a96:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003a98:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a9a:	aa06      	add	r2, sp, #24
 8003a9c:	2190      	movs	r1, #144	; 0x90
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f000 ffc4 	bl	8004a2c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003aa4:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003aa6:	2274      	movs	r2, #116	; 0x74
 8003aa8:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003aaa:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003aac:	4620      	mov	r0, r4
				0x000000ff) << 8;
 8003aae:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003ab0:	f000 ffe2 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ab4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003ab6:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff fe06 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003abe:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ac0:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ac2:	aa06      	add	r2, sp, #24
 8003ac4:	2190      	movs	r1, #144	; 0x90
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 ffb0 	bl	8004a2c <VL53L0X_RdDWord>
				0x000000ff) << 8;
 8003acc:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003ace:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ad2:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003ad4:	2275      	movs	r2, #117	; 0x75
 8003ad6:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ad8:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003ada:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003adc:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003ade:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003ae0:	f000 ffca 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ae4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003ae6:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f7ff fdee 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003aee:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003af0:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003af2:	aa06      	add	r2, sp, #24
 8003af4:	2190      	movs	r1, #144	; 0x90
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 ff98 	bl	8004a2c <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8003afc:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8003afe:	b26d      	sxtb	r5, r5
							<< 8;
 8003b00:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8003b02:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003b04:	2276      	movs	r2, #118	; 0x76
 8003b06:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b08:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003b0a:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8003b0c:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003b0e:	f000 ffb3 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b12:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003b14:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b16:	4620      	mov	r0, r4
 8003b18:	f7ff fdd7 	bl	80036ca <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003b1c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b1e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b20:	aa06      	add	r2, sp, #24
 8003b22:	2190      	movs	r1, #144	; 0x90
 8003b24:	4620      	mov	r0, r4
 8003b26:	f000 ff81 	bl	8004a2c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b2a:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003b2c:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003b30:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003b32:	4305      	orrs	r5, r0
 8003b34:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003b36:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2181      	movs	r1, #129	; 0x81
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	f000 ff9a 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003b44:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003b46:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003b48:	21ff      	movs	r1, #255	; 0xff
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 ff94 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003b50:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003b52:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003b54:	f10d 0215 	add.w	r2, sp, #21
 8003b58:	2183      	movs	r1, #131	; 0x83
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fefd 	bl	800495a <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003b60:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003b64:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003b66:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003b68:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8003b6c:	2183      	movs	r1, #131	; 0x83
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 ff82 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003b74:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003b76:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b78:	2201      	movs	r2, #1
 8003b7a:	21ff      	movs	r1, #255	; 0xff
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 ff7b 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003b82:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b84:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b86:	2201      	movs	r2, #1
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f000 ff74 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b90:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b92:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b94:	2200      	movs	r2, #0
 8003b96:	21ff      	movs	r1, #255	; 0xff
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f000 ff6d 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b9e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ba0:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f000 ff66 	bl	8004a78 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bac:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bae:	4305      	orrs	r5, r0
 8003bb0:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	bb1d      	cbnz	r5, 8003bfe <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003bb6:	f1ba 0f00 	cmp.w	sl, #0
 8003bba:	d001      	beq.n	8003bc0 <VL53L0X_get_info_from_device+0x4b4>
 8003bbc:	07f0      	lsls	r0, r6, #31
 8003bbe:	d52a      	bpl.n	8003c16 <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8003bc0:	9a02      	ldr	r2, [sp, #8]
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d138      	bne.n	8003c38 <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8003bc6:	9a01      	ldr	r2, [sp, #4]
 8003bc8:	b1aa      	cbz	r2, 8003bf6 <VL53L0X_get_info_from_device+0x4ea>
 8003bca:	0772      	lsls	r2, r6, #29
 8003bcc:	d413      	bmi.n	8003bf6 <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003bce:	9a07      	ldr	r2, [sp, #28]
 8003bd0:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003bd4:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003bd6:	9a08      	ldr	r2, [sp, #32]
 8003bd8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003bdc:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8003be0:	b13b      	cbz	r3, 8003bf2 <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 8003be2:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bea:	4353      	muls	r3, r2
 8003bec:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8003bee:	425b      	negs	r3, r3
 8003bf0:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003bf6:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003bfa:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003bfe:	4628      	mov	r0, r5
 8003c00:	b011      	add	sp, #68	; 0x44
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8003c06:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 8003c08:	46d3      	mov	fp, sl
 8003c0a:	e62d      	b.n	8003868 <VL53L0X_get_info_from_device+0x15c>
 8003c0c:	46cb      	mov	fp, r9
 8003c0e:	e62b      	b.n	8003868 <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003c10:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003c12:	463b      	mov	r3, r7
 8003c14:	e790      	b.n	8003b38 <VL53L0X_get_info_from_device+0x42c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c16:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c1a:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8003c1e:	f504 7195 	add.w	r1, r4, #298	; 0x12a
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003c22:	462a      	mov	r2, r5
					NvmRefGoodSpadMap[i];
 8003c24:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003c28:	f812 000e 	ldrb.w	r0, [r2, lr]
 8003c2c:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003c30:	3201      	adds	r2, #1
 8003c32:	2a06      	cmp	r2, #6
 8003c34:	d1f8      	bne.n	8003c28 <VL53L0X_get_info_from_device+0x51c>
 8003c36:	e7c3      	b.n	8003bc0 <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 8003c38:	07b1      	lsls	r1, r6, #30
 8003c3a:	d4c4      	bmi.n	8003bc6 <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c3c:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8003c40:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003c44:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003c48:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003c4c:	a90b      	add	r1, sp, #44	; 0x2c
 8003c4e:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8003c52:	9302      	str	r3, [sp, #8]
 8003c54:	f004 fb76 	bl	8008344 <strcpy>
 8003c58:	9b02      	ldr	r3, [sp, #8]
 8003c5a:	e7b4      	b.n	8003bc6 <VL53L0X_get_info_from_device+0x4ba>
 8003c5c:	464d      	mov	r5, r9
	return Status;
 8003c5e:	e7ce      	b.n	8003bfe <VL53L0X_get_info_from_device+0x4f2>

08003c60 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8003c60:	b150      	cbz	r0, 8003c78 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8003c62:	3801      	subs	r0, #1
 8003c64:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003c66:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	f103 0301 	add.w	r3, r3, #1
 8003c70:	d103      	bne.n	8003c7a <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8003c72:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8003c76:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8003c78:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8003c7a:	0840      	lsrs	r0, r0, #1
 8003c7c:	e7f3      	b.n	8003c66 <VL53L0X_encode_timeout+0x6>

08003c7e <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003c7e:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003c80:	0a00      	lsrs	r0, r0, #8
 8003c82:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8003c86:	3001      	adds	r0, #1
 8003c88:	4770      	bx	lr
	...

08003c8c <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003c8c:	4808      	ldr	r0, [pc, #32]	; (8003cb0 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003c92:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003c94:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003c98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c9c:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003ca0:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003ca4:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8003ca8:	fbb0 f0f2 	udiv	r0, r0, r2
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	003a2f00 	.word	0x003a2f00

08003cb4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8003cb4:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <VL53L0X_calc_timeout_us+0x24>)
 8003cb8:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003cba:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8003cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 8003cc2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003cc6:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8003cca:	fbb2 f2f4 	udiv	r2, r2, r4
 8003cce:	fb01 2203 	mla	r2, r1, r3, r2

	return actual_timeout_period_us;
}
 8003cd2:	fbb2 f0f0 	udiv	r0, r2, r0
 8003cd6:	bd10      	pop	{r4, pc}
 8003cd8:	003a2f00 	.word	0x003a2f00

08003cdc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8003cdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003ce0:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 8003ce2:	f04f 0400 	mov.w	r4, #0
{
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 8003cea:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8003cee:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003cf2:	d81d      	bhi.n	8003d30 <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003cf4:	f10d 0202 	add.w	r2, sp, #2
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	f7fe fba7 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8003cfe:	4605      	mov	r5, r0
 8003d00:	b930      	cbnz	r0, 8003d10 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 8003d02:	f10d 0203 	add.w	r2, sp, #3
 8003d06:	2146      	movs	r1, #70	; 0x46
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f000 fe26 	bl	800495a <VL53L0X_RdByte>
 8003d0e:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8003d10:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003d14:	f7ff ffb3 	bl	8003c7e <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003d18:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003d1c:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff ffc8 	bl	8003cb4 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8003d24:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 8003d28:	4628      	mov	r0, r5
 8003d2a:	b004      	add	sp, #16
 8003d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8003d30:	2903      	cmp	r1, #3
 8003d32:	d118      	bne.n	8003d66 <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003d34:	f10d 0202 	add.w	r2, sp, #2
 8003d38:	4621      	mov	r1, r4
 8003d3a:	f7fe fb87 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8003d3e:	4605      	mov	r5, r0
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d14a      	bne.n	8003dda <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003d44:	4601      	mov	r1, r0
 8003d46:	f10d 0202 	add.w	r2, sp, #2
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fe fb7e 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8003d50:	4605      	mov	r5, r0
 8003d52:	b928      	cbnz	r0, 8003d60 <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 8003d54:	aa01      	add	r2, sp, #4
 8003d56:	2151      	movs	r1, #81	; 0x51
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 fe47 	bl	80049ec <VL53L0X_RdWord>
 8003d5e:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003d60:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003d64:	e7d6      	b.n	8003d14 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8003d66:	2904      	cmp	r1, #4
 8003d68:	d139      	bne.n	8003dde <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003d6a:	a902      	add	r1, sp, #8
 8003d6c:	f7fe fbc1 	bl	80024f2 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8003d70:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8003d74:	b369      	cbz	r1, 8003dd2 <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003d76:	f10d 0202 	add.w	r2, sp, #2
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f7fe fb65 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
 8003d82:	4605      	mov	r5, r0
 8003d84:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8003d86:	bb30      	cbnz	r0, 8003dd6 <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 8003d88:	aa01      	add	r2, sp, #4
 8003d8a:	2151      	movs	r1, #81	; 0x51
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 fe2d 	bl	80049ec <VL53L0X_RdWord>
 8003d92:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003d94:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8003d98:	f7ff ff71 	bl	8003c7e <VL53L0X_decode_timeout>
 8003d9c:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8003d9e:	b99d      	cbnz	r5, 8003dc8 <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003da0:	f10d 0202 	add.w	r2, sp, #2
 8003da4:	2101      	movs	r1, #1
 8003da6:	4630      	mov	r0, r6
 8003da8:	f7fe fb50 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8003dac:	4605      	mov	r5, r0
 8003dae:	b990      	cbnz	r0, 8003dd6 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 8003db0:	f10d 0206 	add.w	r2, sp, #6
 8003db4:	2171      	movs	r1, #113	; 0x71
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 fe18 	bl	80049ec <VL53L0X_RdWord>
 8003dbc:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8003dbe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003dc2:	f7ff ff5c 	bl	8003c7e <VL53L0X_decode_timeout>
 8003dc6:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8003dc8:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8003dca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003dce:	b2a1      	uxth	r1, r4
 8003dd0:	e7a5      	b.n	8003d1e <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	e7e4      	b.n	8003da0 <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 8003dd6:	2700      	movs	r7, #0
 8003dd8:	e7f6      	b.n	8003dc8 <get_sequence_step_timeout+0xec>
	uint32_t TimeoutMicroSeconds = 0;
 8003dda:	4620      	mov	r0, r4
 8003ddc:	e7a2      	b.n	8003d24 <get_sequence_step_timeout+0x48>
 8003dde:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003de0:	4625      	mov	r5, r4
 8003de2:	e79f      	b.n	8003d24 <get_sequence_step_timeout+0x48>

08003de4 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003de6:	2902      	cmp	r1, #2
{
 8003de8:	b085      	sub	sp, #20
 8003dea:	4605      	mov	r5, r0
 8003dec:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8003dee:	d81e      	bhi.n	8003e2e <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003df0:	f10d 0205 	add.w	r2, sp, #5
 8003df4:	2100      	movs	r1, #0
 8003df6:	f7fe fb29 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	b9a0      	cbnz	r0, 8003e28 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8003dfe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e02:	4639      	mov	r1, r7
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7ff ff41 	bl	8003c8c <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8003e0a:	b283      	uxth	r3, r0
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 8003e10:	bf9a      	itte	ls
 8003e12:	f100 32ff 	addls.w	r2, r0, #4294967295
 8003e16:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8003e18:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e1a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8003e1e:	2146      	movs	r1, #70	; 0x46
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 fe29 	bl	8004a78 <VL53L0X_WrByte>
 8003e26:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8003e28:	4620      	mov	r0, r4
 8003e2a:	b005      	add	sp, #20
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8003e2e:	2903      	cmp	r1, #3
 8003e30:	d11f      	bne.n	8003e72 <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003e32:	f10d 0205 	add.w	r2, sp, #5
 8003e36:	2100      	movs	r1, #0
 8003e38:	f7fe fb08 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8003e3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003e40:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003e42:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8003e44:	4628      	mov	r0, r5
 8003e46:	f7ff ff21 	bl	8003c8c <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8003e4a:	b280      	uxth	r0, r0
 8003e4c:	f7ff ff08 	bl	8003c60 <VL53L0X_encode_timeout>
 8003e50:	4602      	mov	r2, r0
 8003e52:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e56:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	d1e4      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8003e5e:	2151      	movs	r1, #81	; 0x51
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 fe19 	bl	8004a98 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8003e66:	4604      	mov	r4, r0
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1dd      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003e6c:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 8003e70:	e7da      	b.n	8003e28 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8003e72:	2904      	cmp	r1, #4
 8003e74:	d13b      	bne.n	8003eee <set_sequence_step_timeout+0x10a>
			VL53L0X_GetSequenceStepEnables(Dev,
 8003e76:	a902      	add	r1, sp, #8
 8003e78:	f7fe fb3b 	bl	80024f2 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8003e7c:	f89d 600b 	ldrb.w	r6, [sp, #11]
 8003e80:	b1b6      	cbz	r6, 8003eb0 <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003e82:	f10d 0205 	add.w	r2, sp, #5
 8003e86:	2100      	movs	r1, #0
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f7fe fadf 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8003e8e:	4604      	mov	r4, r0
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d1c9      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8003e94:	f10d 0206 	add.w	r2, sp, #6
 8003e98:	2151      	movs	r1, #81	; 0x51
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 fda6 	bl	80049ec <VL53L0X_RdWord>
 8003ea0:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 8003ea2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8003ea6:	f7ff feea 	bl	8003c7e <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	d1bc      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 8003eae:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8003eb0:	f10d 0205 	add.w	r2, sp, #5
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f7fe fac8 	bl	800244c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1b2      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8003ec2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff fedf 	bl	8003c8c <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8003ece:	fa16 f080 	uxtah	r0, r6, r0
				FinalRangeEncodedTimeOut =
 8003ed2:	b280      	uxth	r0, r0
 8003ed4:	f7ff fec4 	bl	8003c60 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8003ed8:	2171      	movs	r1, #113	; 0x71
 8003eda:	4602      	mov	r2, r0
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 fddb 	bl	8004a98 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d19f      	bne.n	8003e28 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003ee8:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 8003eec:	e79c      	b.n	8003e28 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003eee:	f06f 0403 	mvn.w	r4, #3
 8003ef2:	e799      	b.n	8003e28 <set_sequence_step_timeout+0x44>

08003ef4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003ef4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8003ef8:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8003efa:	f012 0701 	ands.w	r7, r2, #1
{
 8003efe:	4605      	mov	r5, r0
 8003f00:	4688      	mov	r8, r1
 8003f02:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 8003f04:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8003f08:	f040 80e5 	bne.w	80040d6 <VL53L0X_set_vcsel_pulse_period+0x1e2>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d143      	bne.n	8003f98 <VL53L0X_set_vcsel_pulse_period+0xa4>
 8003f10:	f1a2 030c 	sub.w	r3, r2, #12
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	f200 80de 	bhi.w	80040d6 <VL53L0X_set_vcsel_pulse_period+0x1e2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8003f1a:	2a0c      	cmp	r2, #12
 8003f1c:	d178      	bne.n	8004010 <VL53L0X_set_vcsel_pulse_period+0x11c>

			Status = VL53L0X_WrByte(Dev,
 8003f1e:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {

			Status = VL53L0X_WrByte(Dev,
 8003f20:	2157      	movs	r1, #87	; 0x57
 8003f22:	f000 fda9 	bl	8004a78 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8003f26:	2208      	movs	r2, #8
 8003f28:	2156      	movs	r1, #86	; 0x56
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 fda4 	bl	8004a78 <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d16a      	bne.n	800400a <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003f34:	0874      	lsrs	r4, r6, #1
 8003f36:	3c01      	subs	r4, #1
 8003f38:	b2e4      	uxtb	r4, r4
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8003f3a:	aa02      	add	r2, sp, #8
 8003f3c:	2103      	movs	r1, #3
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7ff fecc 	bl	8003cdc <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8003f44:	b9b0      	cbnz	r0, 8003f74 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = get_sequence_step_timeout(Dev,
 8003f46:	aa03      	add	r2, sp, #12
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f7ff fec6 	bl	8003cdc <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8003f50:	b980      	cbnz	r0, 8003f74 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = VL53L0X_WrByte(Dev,
 8003f52:	4622      	mov	r2, r4
 8003f54:	2150      	movs	r1, #80	; 0x50
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 fd8e 	bl	8004a78 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8003f5c:	b950      	cbnz	r0, 8003f74 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8003f5e:	9a02      	ldr	r2, [sp, #8]
 8003f60:	2103      	movs	r1, #3
 8003f62:	4628      	mov	r0, r5
 8003f64:	f7ff ff3e 	bl	8003de4 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8003f68:	b920      	cbnz	r0, 8003f74 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8003f6a:	9a03      	ldr	r2, [sp, #12]
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f7ff ff38 	bl	8003de4 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003f74:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d146      	bne.n	800400a <VL53L0X_set_vcsel_pulse_period+0x116>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003f7c:	6969      	ldr	r1, [r5, #20]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fe fa60 	bl	8002444 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d140      	bne.n	800400a <VL53L0X_set_vcsel_pulse_period+0x116>
		Status = VL53L0X_perform_phase_calibration(
 8003f88:	4602      	mov	r2, r0
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f10d 0103 	add.w	r1, sp, #3
 8003f90:	4628      	mov	r0, r5
 8003f92:	f7ff f9e1 	bl	8003358 <VL53L0X_perform_phase_calibration>
 8003f96:	e038      	b.n	800400a <VL53L0X_set_vcsel_pulse_period+0x116>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8003f98:	2901      	cmp	r1, #1
 8003f9a:	f040 8092 	bne.w	80040c2 <VL53L0X_set_vcsel_pulse_period+0x1ce>
 8003f9e:	f1a2 0308 	sub.w	r3, r2, #8
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	f200 8097 	bhi.w	80040d6 <VL53L0X_set_vcsel_pulse_period+0x1e2>
		if (VCSELPulsePeriodPCLK == 8) {
 8003fa8:	2a08      	cmp	r2, #8
 8003faa:	d13d      	bne.n	8004028 <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 8003fac:	2210      	movs	r2, #16
 8003fae:	2148      	movs	r1, #72	; 0x48
 8003fb0:	f000 fd62 	bl	8004a78 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8003fb4:	4632      	mov	r2, r6
 8003fb6:	2147      	movs	r1, #71	; 0x47
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f000 fd5d 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8003fbe:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8003fc0:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8003fc2:	2132      	movs	r1, #50	; 0x32
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 fd57 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8003fca:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 8003fcc:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8003fce:	2130      	movs	r1, #48	; 0x30
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 fd51 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8003fd6:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8003fd8:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003fda:	4642      	mov	r2, r8
 8003fdc:	21ff      	movs	r1, #255	; 0xff
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 fd4a 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8003fe4:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003fe6:	4304      	orrs	r4, r0
 8003fe8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8003fea:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 8003fec:	2130      	movs	r1, #48	; 0x30
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fd42 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003ff4:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 8003ff6:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003ff8:	21ff      	movs	r1, #255	; 0xff
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 fd3c 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004000:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004002:	4320      	orrs	r0, r4
 8004004:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8004006:	2800      	cmp	r0, #0
 8004008:	d068      	beq.n	80040dc <VL53L0X_set_vcsel_pulse_period+0x1e8>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 800400a:	b004      	add	sp, #16
 800400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 8004010:	2a0e      	cmp	r2, #14
 8004012:	d101      	bne.n	8004018 <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 8004014:	2230      	movs	r2, #48	; 0x30
 8004016:	e783      	b.n	8003f20 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 16) {
 8004018:	2a10      	cmp	r2, #16
 800401a:	d101      	bne.n	8004020 <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 800401c:	2240      	movs	r2, #64	; 0x40
 800401e:	e77f      	b.n	8003f20 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 18) {
 8004020:	2a12      	cmp	r2, #18
 8004022:	d14e      	bne.n	80040c2 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8004024:	2250      	movs	r2, #80	; 0x50
 8004026:	e77b      	b.n	8003f20 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8004028:	2a0a      	cmp	r2, #10
 800402a:	d120      	bne.n	800406e <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 800402c:	2228      	movs	r2, #40	; 0x28
 800402e:	2148      	movs	r1, #72	; 0x48
 8004030:	f000 fd22 	bl	8004a78 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8004034:	2208      	movs	r2, #8
 8004036:	2147      	movs	r1, #71	; 0x47
 8004038:	4628      	mov	r0, r5
 800403a:	f000 fd1d 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800403e:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8004040:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8004042:	2132      	movs	r1, #50	; 0x32
 8004044:	4628      	mov	r0, r5
 8004046:	f000 fd17 	bl	8004a78 <VL53L0X_WrByte>
 800404a:	4304      	orrs	r4, r0
 800404c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800404e:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8004050:	2130      	movs	r1, #48	; 0x30
 8004052:	4628      	mov	r0, r5
 8004054:	f000 fd10 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004058:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 800405a:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800405c:	21ff      	movs	r1, #255	; 0xff
 800405e:	4628      	mov	r0, r5
 8004060:	f000 fd0a 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004064:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004066:	4304      	orrs	r4, r0
 8004068:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800406a:	2220      	movs	r2, #32
 800406c:	e7be      	b.n	8003fec <VL53L0X_set_vcsel_pulse_period+0xf8>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800406e:	2a0c      	cmp	r2, #12
 8004070:	d112      	bne.n	8004098 <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 8004072:	2238      	movs	r2, #56	; 0x38
 8004074:	2148      	movs	r1, #72	; 0x48
 8004076:	f000 fcff 	bl	8004a78 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800407a:	2208      	movs	r2, #8
 800407c:	2147      	movs	r1, #71	; 0x47
 800407e:	4628      	mov	r0, r5
 8004080:	f000 fcfa 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8004084:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8004086:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8004088:	2132      	movs	r1, #50	; 0x32
 800408a:	4628      	mov	r0, r5
 800408c:	f000 fcf4 	bl	8004a78 <VL53L0X_WrByte>
 8004090:	4304      	orrs	r4, r0
 8004092:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8004094:	2208      	movs	r2, #8
 8004096:	e7db      	b.n	8004050 <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8004098:	2a0e      	cmp	r2, #14
 800409a:	d112      	bne.n	80040c2 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 800409c:	2248      	movs	r2, #72	; 0x48
 800409e:	4611      	mov	r1, r2
 80040a0:	f000 fcea 	bl	8004a78 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80040a4:	2208      	movs	r2, #8
 80040a6:	2147      	movs	r1, #71	; 0x47
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 fce5 	bl	8004a78 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80040ae:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80040b0:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 80040b2:	2132      	movs	r1, #50	; 0x32
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 fcdf 	bl	8004a78 <VL53L0X_WrByte>
 80040ba:	4304      	orrs	r4, r0
 80040bc:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 80040be:	2207      	movs	r2, #7
 80040c0:	e7c6      	b.n	8004050 <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80040c2:	0874      	lsrs	r4, r6, #1
 80040c4:	3c01      	subs	r4, #1
 80040c6:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 80040c8:	f1b8 0f00 	cmp.w	r8, #0
 80040cc:	f43f af35 	beq.w	8003f3a <VL53L0X_set_vcsel_pulse_period+0x46>
 80040d0:	f1b8 0f01 	cmp.w	r8, #1
 80040d4:	d005      	beq.n	80040e2 <VL53L0X_set_vcsel_pulse_period+0x1ee>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040d6:	f06f 0003 	mvn.w	r0, #3
 80040da:	e796      	b.n	800400a <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80040dc:	0874      	lsrs	r4, r6, #1
 80040de:	3c01      	subs	r4, #1
 80040e0:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 80040e2:	aa01      	add	r2, sp, #4
 80040e4:	2104      	movs	r1, #4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7ff fdf8 	bl	8003cdc <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80040ec:	b950      	cbnz	r0, 8004104 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = VL53L0X_WrByte(Dev,
 80040ee:	4622      	mov	r2, r4
 80040f0:	2170      	movs	r1, #112	; 0x70
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fcc0 	bl	8004a78 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80040f8:	b920      	cbnz	r0, 8004104 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = set_sequence_step_timeout(Dev,
 80040fa:	9a01      	ldr	r2, [sp, #4]
 80040fc:	2104      	movs	r1, #4
 80040fe:	4628      	mov	r0, r5
 8004100:	f7ff fe70 	bl	8003de4 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004104:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 8004108:	e736      	b.n	8003f78 <VL53L0X_set_vcsel_pulse_period+0x84>

0800410a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800410a:	b513      	push	{r0, r1, r4, lr}
 800410c:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800410e:	b121      	cbz	r1, 800411a <VL53L0X_get_vcsel_pulse_period+0x10>
 8004110:	2901      	cmp	r1, #1
 8004112:	d00f      	beq.n	8004134 <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004114:	f06f 0003 	mvn.w	r0, #3
 8004118:	e00a      	b.n	8004130 <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 800411a:	f10d 0207 	add.w	r2, sp, #7
 800411e:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 8004120:	f000 fc1b 	bl	800495a <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004124:	b920      	cbnz	r0, 8004130 <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004126:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 800412e:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8004130:	b002      	add	sp, #8
 8004132:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8004134:	f10d 0207 	add.w	r2, sp, #7
 8004138:	2170      	movs	r1, #112	; 0x70
 800413a:	e7f1      	b.n	8004120 <VL53L0X_get_vcsel_pulse_period+0x16>

0800413c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800413e:	2300      	movs	r3, #0
{
 8004140:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004142:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004146:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800414a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800414e:	4299      	cmp	r1, r3
{
 8004150:	4606      	mov	r6, r0
 8004152:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8004154:	d804      	bhi.n	8004160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 8004156:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800415a:	4628      	mov	r0, r5
 800415c:	b005      	add	sp, #20
 800415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004160:	a902      	add	r1, sp, #8
 8004162:	f7fe f9c6 	bl	80024f2 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8004166:	4605      	mov	r5, r0
 8004168:	2800      	cmp	r0, #0
 800416a:	d1f6      	bne.n	800415a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 800416c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 8004170:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
	if (Status == VL53L0X_ERROR_NONE &&
 8004174:	b92b      	cbnz	r3, 8004182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 8004176:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800417a:	b913      	cbnz	r3, 8004182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 800417c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004180:	b1fb      	cbz	r3, 80041c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 8004182:	466a      	mov	r2, sp
 8004184:	2102      	movs	r1, #2
 8004186:	4630      	mov	r0, r6
 8004188:	f7ff fda8 	bl	8003cdc <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 800418c:	bba8      	cbnz	r0, 80041fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 800418e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004192:	b12b      	cbz	r3, 80041a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004194:	9b00      	ldr	r3, [sp, #0]
 8004196:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 800419a:	429c      	cmp	r4, r3
 800419c:	d9db      	bls.n	8004156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 800419e:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 80041a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80041a4:	b933      	cbnz	r3, 80041b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80041a6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80041aa:	b153      	cbz	r3, 80041c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80041ac:	9b00      	ldr	r3, [sp, #0]
 80041ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041b2:	e003      	b.n	80041bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80041b4:	9b00      	ldr	r3, [sp, #0]
 80041b6:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 80041ba:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d2ca      	bcs.n	8004156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 80041c0:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 80041c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80041c6:	b15b      	cbz	r3, 80041e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 80041c8:	aa01      	add	r2, sp, #4
 80041ca:	2103      	movs	r1, #3
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7ff fd85 	bl	8003cdc <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 80041d2:	9b01      	ldr	r3, [sp, #4]
 80041d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80041d8:	42a3      	cmp	r3, r4
 80041da:	d2bc      	bcs.n	8004156 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 80041dc:	b968      	cbnz	r0, 80041fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80041de:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 80041e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0b8      	beq.n	800415a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 80041e8:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80041ec:	2104      	movs	r1, #4
 80041ee:	4630      	mov	r0, r6
 80041f0:	f7ff fdf8 	bl	8003de4 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80041f4:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 80041f6:	4605      	mov	r5, r0
 80041f8:	e7af      	b.n	800415a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 80041fa:	4605      	mov	r5, r0
 80041fc:	e7ad      	b.n	800415a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080041fe <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80041fe:	b570      	push	{r4, r5, r6, lr}
 8004200:	b086      	sub	sp, #24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8004202:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004206:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8004208:	2300      	movs	r3, #0
 800420a:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800420c:	f640 3336 	movw	r3, #2870	; 0xb36
 8004210:	600b      	str	r3, [r1, #0]
{
 8004212:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004214:	a904      	add	r1, sp, #16
{
 8004216:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004218:	f7fe f96b 	bl	80024f2 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 800421c:	4605      	mov	r5, r0
 800421e:	2800      	cmp	r0, #0
 8004220:	d136      	bne.n	8004290 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8004222:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004226:	b92b      	cbnz	r3, 8004234 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 8004228:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800422c:	b913      	cbnz	r3, 8004234 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 800422e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004232:	b1cb      	cbz	r3, 8004268 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8004234:	aa02      	add	r2, sp, #8
 8004236:	2102      	movs	r1, #2
 8004238:	4630      	mov	r0, r6
 800423a:	f7ff fd4f 	bl	8003cdc <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800423e:	2800      	cmp	r0, #0
 8004240:	d140      	bne.n	80042c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8004242:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004246:	b12b      	cbz	r3, 8004254 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	4413      	add	r3, r2
 8004252:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8004254:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004258:	b1eb      	cbz	r3, 8004296 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800425a:	9b02      	ldr	r3, [sp, #8]
 800425c:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8004266:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8004268:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800426c:	b15b      	cbz	r3, 8004286 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 800426e:	aa03      	add	r2, sp, #12
 8004270:	2103      	movs	r1, #3
 8004272:	4630      	mov	r0, r6
 8004274:	f7ff fd32 	bl	8003cdc <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	4413      	add	r3, r2
 8004282:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004284:	b9f0      	cbnz	r0, 80042c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004286:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800428a:	b973      	cbnz	r3, 80042aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004290:	4628      	mov	r0, r5
 8004292:	b006      	add	sp, #24
 8004294:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8004296:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0e4      	beq.n	8004268 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 800429e:	9b02      	ldr	r3, [sp, #8]
 80042a0:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	e7dd      	b.n	8004266 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 80042aa:	aa01      	add	r2, sp, #4
 80042ac:	2104      	movs	r1, #4
 80042ae:	4630      	mov	r0, r6
 80042b0:	f7ff fd14 	bl	8003cdc <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 80042b4:	9b01      	ldr	r3, [sp, #4]
 80042b6:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d0e3      	beq.n	800428c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 80042c4:	4605      	mov	r5, r0
 80042c6:	e7e3      	b.n	8004290 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

080042c8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80042c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80042ca:	2200      	movs	r2, #0
{
 80042cc:	4606      	mov	r6, r0
 80042ce:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042d0:	4610      	mov	r0, r2
 80042d2:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80042d4:	5cab      	ldrb	r3, [r5, r2]
 80042d6:	eb05 0e02 	add.w	lr, r5, r2
 80042da:	b103      	cbz	r3, 80042de <VL53L0X_load_tuning_settings+0x16>
 80042dc:	b108      	cbz	r0, 80042e2 <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80042de:	b003      	add	sp, #12
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 80042e2:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 80042e4:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 80042e8:	d12c      	bne.n	8004344 <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 80042ea:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 80042ec:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d83a      	bhi.n	8004368 <VL53L0X_load_tuning_settings+0xa0>
 80042f2:	e8df f003 	tbb	[pc, r3]
 80042f6:	0c02      	.short	0x0c02
 80042f8:	1e15      	.short	0x1e15
				msb = *(pTuningSettingBuffer + Index);
 80042fa:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80042fc:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8004300:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8004304:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8004306:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800430a:	4622      	mov	r2, r4
 800430c:	e7e2      	b.n	80042d4 <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 800430e:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004310:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8004314:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8004318:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800431a:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 800431e:	e7f4      	b.n	800430a <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8004320:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004322:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8004326:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 800432a:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800432c:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8004330:	e7eb      	b.n	800430a <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8004332:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004334:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8004338:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 800433c:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800433e:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 8004342:	e7e2      	b.n	800430a <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 8004344:	2b04      	cmp	r3, #4
 8004346:	d80f      	bhi.n	8004368 <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 8004348:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 800434a:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 800434c:	4298      	cmp	r0, r3
 800434e:	db05      	blt.n	800435c <VL53L0X_load_tuning_settings+0x94>
 8004350:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8004352:	4630      	mov	r0, r6
 8004354:	463a      	mov	r2, r7
 8004356:	f000 fb15 	bl	8004984 <VL53L0X_WriteMulti>
 800435a:	e7d6      	b.n	800430a <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 800435c:	eb0e 0400 	add.w	r4, lr, r0
 8004360:	78a4      	ldrb	r4, [r4, #2]
 8004362:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 8004364:	3001      	adds	r0, #1
 8004366:	e7f1      	b.n	800434c <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004368:	f06f 0003 	mvn.w	r0, #3
 800436c:	e7cd      	b.n	800430a <VL53L0X_load_tuning_settings+0x42>

0800436e <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800436e:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004370:	2300      	movs	r3, #0
{
 8004372:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 8004374:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8004376:	f10d 0107 	add.w	r1, sp, #7
{
 800437a:	4605      	mov	r5, r0
 800437c:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800437e:	f7fe f906 	bl	800258e <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8004382:	b940      	cbnz	r0, 8004396 <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 8004384:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004388:	b12b      	cbz	r3, 8004396 <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800438a:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 800438c:	6a2b      	ldr	r3, [r5, #32]
 800438e:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8004390:	3380      	adds	r3, #128	; 0x80
 8004392:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004394:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8004396:	b002      	add	sp, #8
 8004398:	bd70      	pop	{r4, r5, r6, pc}

0800439a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800439a:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800439c:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 800439e:	6013      	str	r3, [r2, #0]
{
 80043a0:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 80043a2:	aa01      	add	r2, sp, #4
 80043a4:	f7ff ffe3 	bl	800436e <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80043a8:	b918      	cbnz	r0, 80043b2 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	9a01      	ldr	r2, [sp, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	6023      	str	r3, [r4, #0]

	return Status;
}
 80043b2:	b002      	add	sp, #8
 80043b4:	bd10      	pop	{r4, pc}
	...

080043b8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 80043ba:	f8b0 4150 	ldrh.w	r4, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80043be:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
{
 80043c2:	9e07      	ldr	r6, [sp, #28]
 80043c4:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80043c6:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80043c8:	3580      	adds	r5, #128	; 0x80
 80043ca:	0a2d      	lsrs	r5, r5, #8
	SignalAt0mm *= dmaxCalRange_mm;
 80043cc:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 80043ce:	b152      	cbz	r2, 80043e6 <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80043d0:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80043d2:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80043d6:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80043da:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80043de:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80043e0:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80043e4:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80043e6:	9c06      	ldr	r4, [sp, #24]
 80043e8:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80043ea:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80043ee:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80043f2:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80043f4:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80043f6:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80043fa:	3103      	adds	r1, #3
 80043fc:	2406      	movs	r4, #6
 80043fe:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004402:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8004406:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800440a:	bf3f      	itttt	cc
 800440c:	3603      	addcc	r6, #3
 800440e:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8004412:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8004416:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 800441a:	bf36      	itet	cc
 800441c:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 800441e:	4918      	ldrcs	r1, [pc, #96]	; (8004480 <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8004420:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8004424:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 8004428:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 800442c:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800442e:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 8004430:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 8004434:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 8004436:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004438:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 800443a:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 800443e:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004440:	f7ff f92e 	bl	80036a0 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004444:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004448:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 800444c:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 8004450:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004452:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004456:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004458:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800445c:	b136      	cbz	r6, 800446c <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800445e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004462:	fbb4 f4f3 	udiv	r4, r4, r3
 8004466:	442c      	add	r4, r5
 8004468:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff f917 	bl	80036a0 <VL53L0X_isqrt>
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	4287      	cmp	r7, r0
 8004476:	bf94      	ite	ls
 8004478:	601f      	strls	r7, [r3, #0]
 800447a:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 800447c:	2000      	movs	r0, #0
 800447e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004480:	fff00000 	.word	0xfff00000

08004484 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	b08d      	sub	sp, #52	; 0x34
 800448a:	4606      	mov	r6, r0
 800448c:	9305      	str	r3, [sp, #20]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800448e:	6a03      	ldr	r3, [r0, #32]
 8004490:	930a      	str	r3, [sp, #40]	; 0x28
{
 8004492:	4689      	mov	r9, r1
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 8004494:	68cb      	ldr	r3, [r1, #12]
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8004496:	690f      	ldr	r7, [r1, #16]
	correctedSignalRate_mcps =
 8004498:	9306      	str	r3, [sp, #24]
{
 800449a:	4692      	mov	sl, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800449c:	aa0b      	add	r2, sp, #44	; 0x2c
 800449e:	f7ff ff7c 	bl	800439a <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80044a2:	aa0a      	add	r2, sp, #40	; 0x28
 80044a4:	4649      	mov	r1, r9
 80044a6:	4630      	mov	r0, r6
 80044a8:	f7ff ff61 	bl	800436e <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 80044ac:	4605      	mov	r5, r0
 80044ae:	bb60      	cbnz	r0, 800450a <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80044b0:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80044b4:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 80044b8:	4622      	mov	r2, r4
 80044ba:	4630      	mov	r0, r6
 80044bc:	f7ff fbe6 	bl	8003c8c <VL53L0X_calc_timeout_mclks>
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80044c0:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 80044c4:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80044c8:	4683      	mov	fp, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80044ca:	4630      	mov	r0, r6
 80044cc:	f7ff fbde 	bl	8003c8c <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80044d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80044d2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 80044d6:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80044d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80044dc:	fb04 f803 	mul.w	r8, r4, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80044e0:	f508 4800 	add.w	r8, r8, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80044e4:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80044e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
			vcselWidth = 2;
 80044ec:	bf14      	ite	ne
 80044ee:	2103      	movne	r1, #3
 80044f0:	2102      	moveq	r1, #2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80044f2:	ea5f 4e18 	movs.w	lr, r8, lsr #16
		totalSignalRate_mcps <<= 8;
 80044f6:	9204      	str	r2, [sp, #16]
 80044f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80044fa:	4a54      	ldr	r2, [pc, #336]	; (800464c <VL53L0X_calc_sigma_estimate+0x1c8>)
	if (peakSignalRate_kcps == 0) {
 80044fc:	d109      	bne.n	8004512 <VL53L0X_calc_sigma_estimate+0x8e>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80044fe:	9b05      	ldr	r3, [sp, #20]
		*pSigmaEstimate = cSigmaEstMax;
 8004500:	f8ca 2000 	str.w	r2, [sl]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8004504:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		*pDmax_mm = 0;
 8004508:	601d      	str	r5, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800450a:	4628      	mov	r0, r5
 800450c:	b00d      	add	sp, #52	; 0x34
 800450e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8004512:	4458      	add	r0, fp
		peakVcselDuration_us = vcselWidth * 2048 *
 8004514:	02c0      	lsls	r0, r0, #11
 8004516:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 8004518:	f240 6b77 	movw	fp, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800451c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8004520:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004522:	fbb1 f1f4 	udiv	r1, r1, r4
		peakVcselDuration_us *= cPllPeriod_ps;
 8004526:	fb0b fb01 	mul.w	fp, fp, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800452a:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800452e:	4948      	ldr	r1, [pc, #288]	; (8004650 <VL53L0X_calc_sigma_estimate+0x1cc>)
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004530:	fbbb fbf4 	udiv	fp, fp, r4
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8004534:	fb0b f303 	mul.w	r3, fp, r3
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8004538:	3380      	adds	r3, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800453a:	4367      	muls	r7, r4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800453c:	fb04 f50c 	mul.w	r5, r4, ip
		if (vcselTotalEventsRtn < 1)
 8004540:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8004542:	ea07 0701 	and.w	r7, r7, r1
 8004546:	fbb7 fefe 	udiv	lr, r7, lr
 800454a:	4f42      	ldr	r7, [pc, #264]	; (8004654 <VL53L0X_calc_sigma_estimate+0x1d0>)
 800454c:	9209      	str	r2, [sp, #36]	; 0x24
			vcselTotalEventsRtn = 1;
 800454e:	bf08      	it	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	f5b5 1f48 	cmp.w	r5, #3276800	; 0x320000
 8004556:	bf28      	it	cs
 8004558:	f44f 1548 	movcs.w	r5, #3276800	; 0x320000
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800455c:	200c      	movs	r0, #12
 800455e:	45be      	cmp	lr, r7
 8004560:	bf28      	it	cs
 8004562:	46be      	movcs	lr, r7
 8004564:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8004566:	f44f 7716 	mov.w	r7, #600	; 0x258
 800456a:	fb07 f70e 	mul.w	r7, r7, lr
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800456e:	9108      	str	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8004570:	f7ff f896 	bl	80036a0 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004574:	9908      	ldr	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8004576:	9007      	str	r0, [sp, #28]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004578:	ea08 0801 	and.w	r8, r8, r1
 800457c:	eba8 0005 	sub.w	r0, r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8004580:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8004584:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8004588:	4b33      	ldr	r3, [pc, #204]	; (8004658 <VL53L0X_calc_sigma_estimate+0x1d4>)
			xTalkCompRate_kcps) + 500)/1000;
 800458a:	44a8      	add	r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 800458c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8004590:	fbb8 f8f4 	udiv	r8, r8, r4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004594:	fbb0 f0f4 	udiv	r0, r0, r4
		diff1_mcps <<= 8;
 8004598:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800459a:	fbb0 f0f8 	udiv	r0, r0, r8
		xTalkCorrection <<= 8;
 800459e:	0205      	lsls	r5, r0, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 80045a0:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80045a4:	4359      	muls	r1, r3
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80045a6:	f241 235c 	movw	r3, #4700	; 0x125c
 80045aa:	fbb1 f3f3 	udiv	r3, r1, r3
		pwMult *= ((1 << 16) - xTalkCorrection);
 80045ae:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80045b0:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 80045b4:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 80045b6:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 80045ba:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 80045bc:	436d      	muls	r5, r5
		pwMult >>= 14;
 80045be:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 80045c0:	f44f 7848 	mov.w	r8, #800	; 0x320
 80045c4:	fb08 f005 	mul.w	r0, r8, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 80045c8:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 80045cc:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 80045d0:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 80045d2:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 80045d4:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80045d6:	fb00 3000 	mla	r0, r0, r0, r3
 80045da:	f7ff f861 	bl	80036a0 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 80045de:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80045e0:	2364      	movs	r3, #100	; 0x64
 80045e2:	3032      	adds	r0, #50	; 0x32
 80045e4:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80045e8:	9b07      	ldr	r3, [sp, #28]
		sigmaEstRtn		 += 5000;
 80045ea:	f640 31b5 	movw	r1, #2997	; 0xbb5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80045ee:	005b      	lsls	r3, r3, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80045f0:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
 80045f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80045f8:	fb01 3000 	mla	r0, r1, r0, r3
		sigmaEstRtn		 /= 10000;
 80045fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8004600:	fbb0 f0f3 	udiv	r0, r0, r3
 8004604:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 8004608:	bf28      	it	cs
 800460a:	f44f 4070 	movcs.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800460e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004612:	fb00 3000 	mla	r0, r0, r0, r3
 8004616:	f7ff f843 	bl	80036a0 <VL53L0X_isqrt>
 800461a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Status = VL53L0X_calc_dmax(
 800461c:	9b05      	ldr	r3, [sp, #20]
 800461e:	9303      	str	r3, [sp, #12]
		sigmaEstimate	 = 1000 * sqrtResult;
 8004620:	4360      	muls	r0, r4
 8004622:	4282      	cmp	r2, r0
 8004624:	bf28      	it	cs
 8004626:	4602      	movcs	r2, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8004628:	f8ca 2000 	str.w	r2, [sl]
		Status = VL53L0X_calc_dmax(
 800462c:	462b      	mov	r3, r5
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800462e:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8004632:	f8cd b008 	str.w	fp, [sp, #8]
 8004636:	9701      	str	r7, [sp, #4]
 8004638:	f8cd 8000 	str.w	r8, [sp]
 800463c:	9a06      	ldr	r2, [sp, #24]
 800463e:	9904      	ldr	r1, [sp, #16]
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff feb9 	bl	80043b8 <VL53L0X_calc_dmax>
 8004646:	4605      	mov	r5, r0
 8004648:	e75f      	b.n	800450a <VL53L0X_calc_sigma_estimate+0x86>
 800464a:	bf00      	nop
 800464c:	028f87ae 	.word	0x028f87ae
 8004650:	ffff0000 	.word	0xffff0000
 8004654:	00666666 	.word	0x00666666
 8004658:	0006999a 	.word	0x0006999a

0800465c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004660:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8004662:	ea4f 09d1 	mov.w	r9, r1, lsr #3
{
 8004666:	469b      	mov	fp, r3
	uint8_t SigmaLimitCheckEnable = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800466e:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8004672:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8004676:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 800467a:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8004680:	f009 070f 	and.w	r7, r9, #15

	if (DeviceRangeStatusInternal == 0 ||
 8004684:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8004688:	40fb      	lsrs	r3, r7
{
 800468a:	9201      	str	r2, [sp, #4]
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800468c:	f003 0301 	and.w	r3, r3, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004690:	2201      	movs	r2, #1
 8004692:	21ff      	movs	r1, #255	; 0xff
{
 8004694:	4605      	mov	r5, r0
 8004696:	9e15      	ldr	r6, [sp, #84]	; 0x54
		NoneFlag = 1;
 8004698:	9300      	str	r3, [sp, #0]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800469a:	f000 f9ed 	bl	8004a78 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800469e:	b928      	cbnz	r0, 80046ac <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 80046a0:	f10d 0212 	add.w	r2, sp, #18
 80046a4:	21b6      	movs	r1, #182	; 0xb6
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f9a0 	bl	80049ec <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80046ac:	f8bd a012 	ldrh.w	sl, [sp, #18]
 80046b0:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 80046b4:	b920      	cbnz	r0, 80046c0 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80046b6:	4602      	mov	r2, r0
 80046b8:	21ff      	movs	r1, #255	; 0xff
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 f9dc 	bl	8004a78 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80046c0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80046c4:	b928      	cbnz	r0, 80046d2 <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80046c6:	4601      	mov	r1, r0
 80046c8:	f10d 020e 	add.w	r2, sp, #14
 80046cc:	4628      	mov	r0, r5
 80046ce:	f7fd ffb8 	bl	8002642 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80046d2:	f89d 400e 	ldrb.w	r4, [sp, #14]
 80046d6:	b1d4      	cbz	r4, 800470e <VL53L0X_get_pal_range_status+0xb2>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f040 8091 	bne.w	8004800 <VL53L0X_get_pal_range_status+0x1a4>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80046de:	ab09      	add	r3, sp, #36	; 0x24
 80046e0:	aa05      	add	r2, sp, #20
 80046e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80046e4:	4628      	mov	r0, r5
 80046e6:	f7ff fecd 	bl	8004484 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80046ea:	2800      	cmp	r0, #0
 80046ec:	f040 8088 	bne.w	8004800 <VL53L0X_get_pal_range_status+0x1a4>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80046f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80046f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f4:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80046f6:	4601      	mov	r1, r0
 80046f8:	aa06      	add	r2, sp, #24
 80046fa:	4628      	mov	r0, r5
 80046fc:	f7fd ffdc 	bl	80026b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8004700:	9c06      	ldr	r4, [sp, #24]
 8004702:	b124      	cbz	r4, 800470e <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 8004704:	9b05      	ldr	r3, [sp, #20]
 8004706:	429c      	cmp	r4, r3
 8004708:	bf2c      	ite	cs
 800470a:	2400      	movcs	r4, #0
 800470c:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800470e:	b920      	cbnz	r0, 800471a <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004710:	aa04      	add	r2, sp, #16
 8004712:	2102      	movs	r1, #2
 8004714:	4628      	mov	r0, r5
 8004716:	f7fd ff94 	bl	8002642 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800471a:	f89d 8010 	ldrb.w	r8, [sp, #16]
 800471e:	f1b8 0f00 	cmp.w	r8, #0
 8004722:	d00f      	beq.n	8004744 <VL53L0X_get_pal_range_status+0xe8>
 8004724:	2800      	cmp	r0, #0
 8004726:	d16f      	bne.n	8004808 <VL53L0X_get_pal_range_status+0x1ac>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8004728:	aa07      	add	r2, sp, #28
 800472a:	2102      	movs	r1, #2
 800472c:	4628      	mov	r0, r5
 800472e:	f7fd ffc3 	bl	80026b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8004732:	9b07      	ldr	r3, [sp, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d065      	beq.n	8004804 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t SignalRefClipflag = 0;
 8004738:	459a      	cmp	sl, r3
 800473a:	bf94      	ite	ls
 800473c:	f04f 0800 	movls.w	r8, #0
 8004740:	f04f 0801 	movhi.w	r8, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8004744:	b928      	cbnz	r0, 8004752 <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8004746:	f10d 0211 	add.w	r2, sp, #17
 800474a:	2103      	movs	r1, #3
 800474c:	4628      	mov	r0, r5
 800474e:	f7fd ff78 	bl	8002642 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8004752:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004756:	f1ba 0f00 	cmp.w	sl, #0
 800475a:	d016      	beq.n	800478a <VL53L0X_get_pal_range_status+0x12e>
 800475c:	2800      	cmp	r0, #0
 800475e:	d17c      	bne.n	800485a <VL53L0X_get_pal_range_status+0x1fe>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8004760:	f1bb 0f00 	cmp.w	fp, #0
 8004764:	d003      	beq.n	800476e <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	fbb3 fbfb 	udiv	fp, r3, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800476e:	aa08      	add	r2, sp, #32
 8004770:	2103      	movs	r1, #3
 8004772:	4628      	mov	r0, r5
 8004774:	f7fd ffa0 	bl	80026b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8004778:	9a08      	ldr	r2, [sp, #32]
 800477a:	2a00      	cmp	r2, #0
 800477c:	d047      	beq.n	800480e <VL53L0X_get_pal_range_status+0x1b2>
	uint8_t RangeIgnoreThresholdflag = 0;
 800477e:	4593      	cmp	fp, r2
 8004780:	bf2c      	ite	cs
 8004782:	f04f 0a00 	movcs.w	sl, #0
 8004786:	f04f 0a01 	movcc.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800478a:	b920      	cbnz	r0, 8004796 <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 800478c:	9b00      	ldr	r3, [sp, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03f      	beq.n	8004812 <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 255;	 /* NONE */
 8004792:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8004794:	7032      	strb	r2, [r6, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8004796:	7832      	ldrb	r2, [r6, #0]
 8004798:	b90a      	cbnz	r2, 800479e <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800479a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800479c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800479e:	f10d 020f 	add.w	r2, sp, #15
 80047a2:	2101      	movs	r1, #1
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7fd ff4c 	bl	8002642 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80047aa:	bb30      	cbnz	r0, 80047fa <VL53L0X_get_pal_range_status+0x19e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80047ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	bf08      	it	eq
 80047b4:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80047b6:	2f04      	cmp	r7, #4
 80047b8:	bf1d      	ittte	ne
 80047ba:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 80047be:	fab2 f282 	clzne	r2, r2
 80047c2:	0952      	lsrne	r2, r2, #5
 80047c4:	2201      	moveq	r2, #1
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047c6:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80047ca:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	bf08      	it	eq
 80047d2:	f04f 0801 	moveq.w	r8, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047d6:	f008 0301 	and.w	r3, r8, #1
 80047da:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80047de:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bf08      	it	eq
 80047e6:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047ea:	f004 0401 	and.w	r4, r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047ee:	f00a 0a01 	and.w	sl, sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047f2:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80047f6:	f885 a031 	strb.w	sl, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 80047fa:	b00b      	add	sp, #44	; 0x2c
 80047fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004800:	2400      	movs	r4, #0
 8004802:	e78a      	b.n	800471a <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 8004804:	4698      	mov	r8, r3
 8004806:	e79d      	b.n	8004744 <VL53L0X_get_pal_range_status+0xe8>
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	e7a1      	b.n	8004752 <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 800480e:	4692      	mov	sl, r2
 8004810:	e7bb      	b.n	800478a <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8004812:	1e7a      	subs	r2, r7, #1
 8004814:	2a02      	cmp	r2, #2
 8004816:	d801      	bhi.n	800481c <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 8004818:	2205      	movs	r2, #5
 800481a:	e7bb      	b.n	8004794 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 800481c:	2f06      	cmp	r7, #6
 800481e:	d001      	beq.n	8004824 <VL53L0X_get_pal_range_status+0x1c8>
 8004820:	2f09      	cmp	r7, #9
 8004822:	d101      	bne.n	8004828 <VL53L0X_get_pal_range_status+0x1cc>
			*pPalRangeStatus = 4;  /* Phase fail */
 8004824:	2204      	movs	r2, #4
 8004826:	e7b5      	b.n	8004794 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 8004828:	f009 090d 	and.w	r9, r9, #13
 800482c:	f1b9 0f08 	cmp.w	r9, #8
 8004830:	d002      	beq.n	8004838 <VL53L0X_get_pal_range_status+0x1dc>
					DeviceRangeStatusInternal == 10 ||
 8004832:	f1b8 0f01 	cmp.w	r8, #1
 8004836:	d101      	bne.n	800483c <VL53L0X_get_pal_range_status+0x1e0>
			*pPalRangeStatus = 3;  /* Min range */
 8004838:	2203      	movs	r2, #3
 800483a:	e7ab      	b.n	8004794 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 800483c:	2f04      	cmp	r7, #4
 800483e:	d002      	beq.n	8004846 <VL53L0X_get_pal_range_status+0x1ea>
 8004840:	f1ba 0f01 	cmp.w	sl, #1
 8004844:	d101      	bne.n	800484a <VL53L0X_get_pal_range_status+0x1ee>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8004846:	2202      	movs	r2, #2
 8004848:	e7a4      	b.n	8004794 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 800484a:	2c01      	cmp	r4, #1
 800484c:	d101      	bne.n	8004852 <VL53L0X_get_pal_range_status+0x1f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800484e:	2201      	movs	r2, #1
 8004850:	e7a0      	b.n	8004794 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8004852:	2200      	movs	r2, #0
 8004854:	7032      	strb	r2, [r6, #0]
 8004856:	46a2      	mov	sl, r4
 8004858:	e79d      	b.n	8004796 <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 800485a:	f04f 0a00 	mov.w	sl, #0
 800485e:	e79a      	b.n	8004796 <VL53L0X_get_pal_range_status+0x13a>

08004860 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8004864:	2102      	movs	r1, #2
{
 8004866:	4606      	mov	r6, r0
 8004868:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 800486a:	f7fe ff4f 	bl	800370c <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 800486e:	4605      	mov	r5, r0
 8004870:	b940      	cbnz	r0, 8004884 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8004872:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8004876:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800487a:	b92b      	cbnz	r3, 8004888 <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800487c:	4905      	ldr	r1, [pc, #20]	; (8004894 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 800487e:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8004880:	f003 fd60 	bl	8008344 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004884:	4628      	mov	r0, r5
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8004888:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 800488c:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800488e:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8004892:	e7f5      	b.n	8004880 <VL53L0X_check_part_used+0x20>
 8004894:	0800a497 	.word	0x0800a497

08004898 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8004898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800489a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800489c:	460a      	mov	r2, r1
 800489e:	f10d 0107 	add.w	r1, sp, #7
{
 80048a2:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 80048a4:	f7ff ffdc 	bl	8004860 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 80048a8:	bb00      	cbnz	r0, 80048ec <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 80048aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048ae:	b9fb      	cbnz	r3, 80048f0 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80048b0:	4915      	ldr	r1, [pc, #84]	; (8004908 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80048b2:	4620      	mov	r0, r4
 80048b4:	f003 fd46 	bl	8008344 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 80048b8:	4914      	ldr	r1, [pc, #80]	; (800490c <VL53L0X_get_device_info+0x74>)
 80048ba:	f104 0020 	add.w	r0, r4, #32
 80048be:	f003 fd41 	bl	8008344 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 80048c2:	f104 0260 	add.w	r2, r4, #96	; 0x60
 80048c6:	21c0      	movs	r1, #192	; 0xc0
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f846 	bl	800495a <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80048ce:	b968      	cbnz	r0, 80048ec <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 80048d0:	f10d 0206 	add.w	r2, sp, #6
 80048d4:	21c2      	movs	r1, #194	; 0xc2
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f83f 	bl	800495a <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80048e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80048e6:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80048e8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 80048ec:	b003      	add	sp, #12
 80048ee:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 80048f0:	2b22      	cmp	r3, #34	; 0x22
 80048f2:	d803      	bhi.n	80048fc <VL53L0X_get_device_info+0x64>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d003      	beq.n	8004900 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80048f8:	4905      	ldr	r1, [pc, #20]	; (8004910 <VL53L0X_get_device_info+0x78>)
 80048fa:	e7da      	b.n	80048b2 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 80048fc:	2b26      	cmp	r3, #38	; 0x26
 80048fe:	d801      	bhi.n	8004904 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <VL53L0X_get_device_info+0x7c>)
 8004902:	e7d6      	b.n	80048b2 <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <VL53L0X_get_device_info+0x80>)
 8004906:	e7d4      	b.n	80048b2 <VL53L0X_get_device_info+0x1a>
 8004908:	0800a5f4 	.word	0x0800a5f4
 800490c:	0800a62d 	.word	0x0800a62d
 8004910:	0800a600 	.word	0x0800a600
 8004914:	0800a60c 	.word	0x0800a60c
 8004918:	0800a618 	.word	0x0800a618

0800491c <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800491c:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800491e:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004922:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800492c:	b293      	uxth	r3, r2
 800492e:	460a      	mov	r2, r1
 8004930:	4621      	mov	r1, r4
 8004932:	f000 fe4b 	bl	80055cc <HAL_I2C_Master_Transmit>
    
    return status;
}
 8004936:	b002      	add	sp, #8
 8004938:	bd10      	pop	{r4, pc}

0800493a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800493a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800493c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8004940:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800494a:	b293      	uxth	r3, r2
 800494c:	460a      	mov	r2, r1
 800494e:	f044 0101 	orr.w	r1, r4, #1
 8004952:	f000 fecf 	bl	80056f4 <HAL_I2C_Master_Receive>
    
    return status;
}
 8004956:	b002      	add	sp, #8
 8004958:	bd10      	pop	{r4, pc}

0800495a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800495a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800495c:	ab02      	add	r3, sp, #8
 800495e:	4615      	mov	r5, r2
 8004960:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004964:	2201      	movs	r2, #1
 8004966:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8004968:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800496a:	f7ff ffd7 	bl	800491c <_I2CWrite>
    
    if( status_int ){
 800496e:	b928      	cbnz	r0, 800497c <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8004970:	2201      	movs	r2, #1
 8004972:	4629      	mov	r1, r5
 8004974:	4620      	mov	r0, r4
 8004976:	f7ff ffe0 	bl	800493a <_I2CRead>
    
    if (status_int != 0) {
 800497a:	b108      	cbz	r0, 8004980 <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800497c:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004980:	b003      	add	sp, #12
 8004982:	bd30      	pop	{r4, r5, pc}

08004984 <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8004984:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8004986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004988:	460f      	mov	r7, r1
 800498a:	4606      	mov	r6, r0
 800498c:	4611      	mov	r1, r2
 800498e:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8004990:	d811      	bhi.n	80049b6 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 8004992:	4d0a      	ldr	r5, [pc, #40]	; (80049bc <VL53L0X_WriteMulti+0x38>)
 8004994:	4628      	mov	r0, r5
    memcpy(&_I2CBuffer[1], pdata, count);
 8004996:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8004998:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 800499c:	f002 ffb2 	bl	8007904 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80049a0:	1c62      	adds	r2, r4, #1
 80049a2:	4629      	mov	r1, r5
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff ffb9 	bl	800491c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80049aa:	2800      	cmp	r0, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2000      	moveq	r0, #0
 80049b0:	f06f 0013 	mvnne.w	r0, #19
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 80049b6:	f06f 0003 	mvn.w	r0, #3
    }
    
    return Status;
}
 80049ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049bc:	20000f44 	.word	0x20000f44

080049c0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80049c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c2:	ac02      	add	r4, sp, #8
 80049c4:	4616      	mov	r6, r2
 80049c6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 80049ca:	2201      	movs	r2, #1
 80049cc:	4621      	mov	r1, r4
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80049ce:	4605      	mov	r5, r0
 80049d0:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 80049d2:	f7ff ffa3 	bl	800491c <_I2CWrite>
    
    if (status_int != 0) {
 80049d6:	b928      	cbnz	r0, 80049e4 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 80049d8:	463a      	mov	r2, r7
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	f7ff ffac 	bl	800493a <_I2CRead>
    
    if (status_int != 0) {
 80049e2:	b108      	cbz	r0, 80049e8 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80049e4:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80049e8:	b003      	add	sp, #12
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ec <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80049ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049ee:	ab02      	add	r3, sp, #8
 80049f0:	4615      	mov	r5, r2
 80049f2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80049f6:	2201      	movs	r2, #1
 80049f8:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80049fa:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80049fc:	f7ff ff8e 	bl	800491c <_I2CWrite>

    if( status_int ){
 8004a00:	b118      	cbz	r0, 8004a0a <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004a02:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8004a06:	b002      	add	sp, #8
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8004a0a:	4c07      	ldr	r4, [pc, #28]	; (8004a28 <VL53L0X_RdWord+0x3c>)
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7ff ff92 	bl	800493a <_I2CRead>
    if (status_int != 0) {
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1f3      	bne.n	8004a02 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8004a1a:	7822      	ldrb	r2, [r4, #0]
 8004a1c:	7863      	ldrb	r3, [r4, #1]
 8004a1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a22:	802b      	strh	r3, [r5, #0]
 8004a24:	e7ef      	b.n	8004a06 <VL53L0X_RdWord+0x1a>
 8004a26:	bf00      	nop
 8004a28:	20000f44 	.word	0x20000f44

08004a2c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a2e:	ab02      	add	r3, sp, #8
 8004a30:	4615      	mov	r5, r2
 8004a32:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004a36:	2201      	movs	r2, #1
 8004a38:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8004a3a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8004a3c:	f7ff ff6e 	bl	800491c <_I2CWrite>
    
    if (status_int != 0) {
 8004a40:	b118      	cbz	r0, 8004a4a <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004a42:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 8004a46:	b002      	add	sp, #8
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8004a4a:	4c0a      	ldr	r4, [pc, #40]	; (8004a74 <VL53L0X_RdDWord+0x48>)
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff ff72 	bl	800493a <_I2CRead>
    if (status_int != 0) {
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d1f3      	bne.n	8004a42 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8004a5a:	7863      	ldrb	r3, [r4, #1]
 8004a5c:	7822      	ldrb	r2, [r4, #0]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8004a64:	78e2      	ldrb	r2, [r4, #3]
 8004a66:	4413      	add	r3, r2
 8004a68:	78a2      	ldrb	r2, [r4, #2]
 8004a6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	e7e9      	b.n	8004a46 <VL53L0X_RdDWord+0x1a>
 8004a72:	bf00      	nop
 8004a74:	20000f44 	.word	0x20000f44

08004a78 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8004a78:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004a7a:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <VL53L0X_WrByte+0x1c>)
 8004a7c:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8004a7e:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8004a80:	4619      	mov	r1, r3
 8004a82:	2202      	movs	r2, #2
 8004a84:	f7ff ff4a 	bl	800491c <_I2CWrite>
    
    if (status_int != 0) {
 8004a88:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8004a8a:	bf14      	ite	ne
 8004a8c:	f06f 0013 	mvnne.w	r0, #19
 8004a90:	2000      	moveq	r0, #0
 8004a92:	bd08      	pop	{r3, pc}
 8004a94:	20000f44 	.word	0x20000f44

08004a98 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8004a98:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <VL53L0X_WrWord+0x20>)
 8004a9c:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8004a9e:	0a11      	lsrs	r1, r2, #8
 8004aa0:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004aa2:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	f7ff ff38 	bl	800491c <_I2CWrite>
    
    if (status_int != 0) {
 8004aac:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8004aae:	bf14      	ite	ne
 8004ab0:	f06f 0013 	mvnne.w	r0, #19
 8004ab4:	2000      	moveq	r0, #0
 8004ab6:	bd08      	pop	{r3, pc}
 8004ab8:	20000f44 	.word	0x20000f44

08004abc <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004abe:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004ac0:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	460f      	mov	r7, r1
 8004ac8:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 8004aca:	f7ff ff46 	bl	800495a <VL53L0X_RdByte>
    
    if (Status) {
 8004ace:	b948      	cbnz	r0, 8004ae4 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8004ad0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004ad4:	402a      	ands	r2, r5
 8004ad6:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004ad8:	4639      	mov	r1, r7
 8004ada:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 8004adc:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004ae0:	f7ff ffca 	bl	8004a78 <VL53L0X_WrByte>
done:
    return Status;
}
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ae8 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8004ae8:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 8004aea:	2002      	movs	r0, #2
 8004aec:	f000 f8bc 	bl	8004c68 <HAL_Delay>
    return status;
}
 8004af0:	2000      	movs	r0, #0
 8004af2:	bd08      	pop	{r3, pc}

08004af4 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8004af4:	b084      	sub	sp, #16
 8004af6:	b507      	push	{r0, r1, r2, lr}
 8004af8:	f10d 0e10 	add.w	lr, sp, #16
 8004afc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev.Present){
 8004b00:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d064      	beq.n	8004bd0 <SetupSingleShot+0xdc>
    status=VL53L0X_StaticInit(&Dev);
 8004b06:	4670      	mov	r0, lr
 8004b08:	f7fe f934 	bl	8002d74 <VL53L0X_StaticInit>
    if( status ){
 8004b0c:	b110      	cbz	r0, 8004b14 <SetupSingleShot+0x20>
      printf("VL53L0X_StaticInit failed\n");
 8004b0e:	4833      	ldr	r0, [pc, #204]	; (8004bdc <SetupSingleShot+0xe8>)
 8004b10:	f003 fbec 	bl	80082ec <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8004b14:	f10d 0202 	add.w	r2, sp, #2
 8004b18:	f10d 0101 	add.w	r1, sp, #1
 8004b1c:	a804      	add	r0, sp, #16
 8004b1e:	f7fd fee9 	bl	80028f4 <VL53L0X_PerformRefCalibration>
    if( status ){
 8004b22:	b110      	cbz	r0, 8004b2a <SetupSingleShot+0x36>
      printf("VL53L0X_PerformRefCalibration failed\n");
 8004b24:	482e      	ldr	r0, [pc, #184]	; (8004be0 <SetupSingleShot+0xec>)
 8004b26:	f003 fbe1 	bl	80082ec <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8004b2a:	f10d 0203 	add.w	r2, sp, #3
 8004b2e:	a901      	add	r1, sp, #4
 8004b30:	a804      	add	r0, sp, #16
 8004b32:	f7fe fa24 	bl	8002f7e <VL53L0X_PerformRefSpadManagement>
    if( status ){
 8004b36:	b110      	cbz	r0, 8004b3e <SetupSingleShot+0x4a>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8004b38:	482a      	ldr	r0, [pc, #168]	; (8004be4 <SetupSingleShot+0xf0>)
 8004b3a:	f003 fbd7 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8004b3e:	2100      	movs	r1, #0
 8004b40:	a804      	add	r0, sp, #16
 8004b42:	f7fd fc63 	bl	800240c <VL53L0X_SetDeviceMode>
    if( status ){
 8004b46:	b110      	cbz	r0, 8004b4e <SetupSingleShot+0x5a>
      printf("VL53L0X_SetDeviceMode failed\n");
 8004b48:	4827      	ldr	r0, [pc, #156]	; (8004be8 <SetupSingleShot+0xf4>)
 8004b4a:	f003 fbcf 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8004b4e:	2201      	movs	r2, #1
 8004b50:	2100      	movs	r1, #0
 8004b52:	a804      	add	r0, sp, #16
 8004b54:	f7fd fd36 	bl	80025c4 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8004b58:	b110      	cbz	r0, 8004b60 <SetupSingleShot+0x6c>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8004b5a:	4824      	ldr	r0, [pc, #144]	; (8004bec <SetupSingleShot+0xf8>)
 8004b5c:	f003 fbc6 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8004b60:	2201      	movs	r2, #1
 8004b62:	4611      	mov	r1, r2
 8004b64:	a804      	add	r0, sp, #16
 8004b66:	f7fd fd2d 	bl	80025c4 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8004b6a:	b110      	cbz	r0, 8004b72 <SetupSingleShot+0x7e>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8004b6c:	481f      	ldr	r0, [pc, #124]	; (8004bec <SetupSingleShot+0xf8>)
 8004b6e:	f003 fbbd 	bl	80082ec <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8004b72:	f641 1299 	movw	r2, #6553	; 0x1999
 8004b76:	2101      	movs	r1, #1
 8004b78:	a804      	add	r0, sp, #16
 8004b7a:	f7fd fd70 	bl	800265e <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 8004b7e:	b110      	cbz	r0, 8004b86 <SetupSingleShot+0x92>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8004b80:	481b      	ldr	r0, [pc, #108]	; (8004bf0 <SetupSingleShot+0xfc>)
 8004b82:	f003 fbb3 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8004b86:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	a804      	add	r0, sp, #16
 8004b8e:	f7fd fd66 	bl	800265e <VL53L0X_SetLimitCheckValue>
    if( status ){
 8004b92:	b110      	cbz	r0, 8004b9a <SetupSingleShot+0xa6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8004b94:	4816      	ldr	r0, [pc, #88]	; (8004bf0 <SetupSingleShot+0xfc>)
 8004b96:	f003 fba9 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8004b9a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8004b9e:	a804      	add	r0, sp, #16
 8004ba0:	f7fd fc50 	bl	8002444 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 8004ba4:	b110      	cbz	r0, 8004bac <SetupSingleShot+0xb8>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8004ba6:	4813      	ldr	r0, [pc, #76]	; (8004bf4 <SetupSingleShot+0x100>)
 8004ba8:	f003 fba0 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8004bac:	2212      	movs	r2, #18
 8004bae:	2100      	movs	r1, #0
 8004bb0:	a804      	add	r0, sp, #16
 8004bb2:	f7fd fc49 	bl	8002448 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8004bb6:	b110      	cbz	r0, 8004bbe <SetupSingleShot+0xca>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004bb8:	480f      	ldr	r0, [pc, #60]	; (8004bf8 <SetupSingleShot+0x104>)
 8004bba:	f003 fb97 	bl	80082ec <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8004bbe:	220e      	movs	r2, #14
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	a804      	add	r0, sp, #16
 8004bc4:	f7fd fc40 	bl	8002448 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8004bc8:	b110      	cbz	r0, 8004bd0 <SetupSingleShot+0xdc>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004bca:	480b      	ldr	r0, [pc, #44]	; (8004bf8 <SetupSingleShot+0x104>)
 8004bcc:	f003 fb8e 	bl	80082ec <puts>
    }
    
    Dev.LeakyFirst=1;
  }
}
 8004bd0:	b003      	add	sp, #12
 8004bd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bd6:	b004      	add	sp, #16
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	0800a635 	.word	0x0800a635
 8004be0:	0800a64f 	.word	0x0800a64f
 8004be4:	0800a674 	.word	0x0800a674
 8004be8:	0800a69c 	.word	0x0800a69c
 8004bec:	0800a6b9 	.word	0x0800a6b9
 8004bf0:	0800a6dc 	.word	0x0800a6dc
 8004bf4:	0800a6fe 	.word	0x0800a6fe
 8004bf8:	0800a734 	.word	0x0800a734

08004bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bfc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <HAL_InitTick+0x2c>)
{
 8004c00:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c08:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c0c:	f000 f88c 	bl	8004d28 <HAL_SYSTICK_Config>
 8004c10:	4604      	mov	r4, r0
 8004c12:	b938      	cbnz	r0, 8004c24 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004c14:	4602      	mov	r2, r0
 8004c16:	4629      	mov	r1, r5
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f000 f844 	bl	8004ca8 <HAL_NVIC_SetPriority>
 8004c20:	4620      	mov	r0, r4
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	20000004 	.word	0x20000004

08004c2c <HAL_Init>:
{
 8004c2c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c2e:	2003      	movs	r0, #3
 8004c30:	f000 f828 	bl	8004c84 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7ff ffe1 	bl	8004bfc <HAL_InitTick>
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	b918      	cbnz	r0, 8004c46 <HAL_Init+0x1a>
    HAL_MspInit();
 8004c3e:	f7fc fcc5 	bl	80015cc <HAL_MspInit>
}
 8004c42:	4620      	mov	r0, r4
 8004c44:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004c46:	2401      	movs	r4, #1
 8004c48:	e7fb      	b.n	8004c42 <HAL_Init+0x16>
	...

08004c4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004c4c:	4a02      	ldr	r2, [pc, #8]	; (8004c58 <HAL_IncTick+0xc>)
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	3301      	adds	r3, #1
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000f84 	.word	0x20000f84

08004c5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <HAL_GetTick+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
}
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000f84 	.word	0x20000f84

08004c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004c6c:	f7ff fff6 	bl	8004c5c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c70:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004c72:	4605      	mov	r5, r0
  {
    wait++;
 8004c74:	bf18      	it	ne
 8004c76:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c78:	f7ff fff0 	bl	8004c5c <HAL_GetTick>
 8004c7c:	1b40      	subs	r0, r0, r5
 8004c7e:	4284      	cmp	r4, r0
 8004c80:	d8fa      	bhi.n	8004c78 <HAL_Delay+0x10>
  {
  }
}
 8004c82:	bd38      	pop	{r3, r4, r5, pc}

08004c84 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c86:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004c94:	0200      	lsls	r0, r0, #8
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004c9e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004ca0:	60d3      	str	r3, [r2, #12]
 8004ca2:	4770      	bx	lr
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004caa:	b530      	push	{r4, r5, lr}
 8004cac:	68dc      	ldr	r4, [r3, #12]
 8004cae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	bf28      	it	cs
 8004cbc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cbe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	f04f 0501 	mov.w	r5, #1
 8004cc4:	fa05 f303 	lsl.w	r3, r5, r3
 8004cc8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ccc:	bf8c      	ite	hi
 8004cce:	3c03      	subhi	r4, #3
 8004cd0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd2:	4019      	ands	r1, r3
 8004cd4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd6:	fa05 f404 	lsl.w	r4, r5, r4
 8004cda:	3c01      	subs	r4, #1
 8004cdc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8004cde:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	ea42 0201 	orr.w	r2, r2, r1
 8004ce4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce8:	bfaf      	iteee	ge
 8004cea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cee:	f000 000f 	andlt.w	r0, r0, #15
 8004cf2:	4b06      	ldrlt	r3, [pc, #24]	; (8004d0c <HAL_NVIC_SetPriority+0x64>)
 8004cf4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cf6:	bfa5      	ittet	ge
 8004cf8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8004cfc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cfe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d00:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004d04:	bd30      	pop	{r4, r5, pc}
 8004d06:	bf00      	nop
 8004d08:	e000ed00 	.word	0xe000ed00
 8004d0c:	e000ed14 	.word	0xe000ed14

08004d10 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004d10:	0942      	lsrs	r2, r0, #5
 8004d12:	2301      	movs	r3, #1
 8004d14:	f000 001f 	and.w	r0, r0, #31
 8004d18:	fa03 f000 	lsl.w	r0, r3, r0
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <HAL_NVIC_EnableIRQ+0x14>)
 8004d1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004d22:	4770      	bx	lr
 8004d24:	e000e100 	.word	0xe000e100

08004d28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d28:	3801      	subs	r0, #1
 8004d2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004d2e:	d20a      	bcs.n	8004d46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d34:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d36:	21f0      	movs	r1, #240	; 0xf0
 8004d38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d40:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004d46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	e000e010 	.word	0xe000e010
 8004d50:	e000ed00 	.word	0xe000ed00

08004d54 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004d54:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <DFSDM_GetChannelFromInstance+0x54>)
 8004d56:	4298      	cmp	r0, r3
 8004d58:	d017      	beq.n	8004d8a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8004d5a:	3320      	adds	r3, #32
 8004d5c:	4298      	cmp	r0, r3
 8004d5e:	d016      	beq.n	8004d8e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 8004d60:	3320      	adds	r3, #32
 8004d62:	4298      	cmp	r0, r3
 8004d64:	d015      	beq.n	8004d92 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8004d66:	3320      	adds	r3, #32
 8004d68:	4298      	cmp	r0, r3
 8004d6a:	d014      	beq.n	8004d96 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	d013      	beq.n	8004d9a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 8004d72:	3320      	adds	r3, #32
 8004d74:	4298      	cmp	r0, r3
 8004d76:	d012      	beq.n	8004d9e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8004d78:	3320      	adds	r3, #32
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	d011      	beq.n	8004da2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 8004d7e:	3320      	adds	r3, #32
 8004d80:	4298      	cmp	r0, r3
 8004d82:	bf0c      	ite	eq
 8004d84:	2007      	moveq	r0, #7
 8004d86:	2000      	movne	r0, #0
 8004d88:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	4770      	bx	lr
    channel = 1;
 8004d8e:	2001      	movs	r0, #1
 8004d90:	4770      	bx	lr
    channel = 2;
 8004d92:	2002      	movs	r0, #2
 8004d94:	4770      	bx	lr
    channel = 3;
 8004d96:	2003      	movs	r0, #3
 8004d98:	4770      	bx	lr
    channel = 4;
 8004d9a:	2004      	movs	r0, #4
 8004d9c:	4770      	bx	lr
    channel = 5;
 8004d9e:	2005      	movs	r0, #5
 8004da0:	4770      	bx	lr
    channel = 6;
 8004da2:	2006      	movs	r0, #6
  }

  return channel;
}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40016000 	.word	0x40016000

08004dac <HAL_DFSDM_ChannelInit>:
{
 8004dac:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8004dae:	4604      	mov	r4, r0
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d067      	beq.n	8004e84 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004db4:	6800      	ldr	r0, [r0, #0]
 8004db6:	4d34      	ldr	r5, [pc, #208]	; (8004e88 <HAL_DFSDM_ChannelInit+0xdc>)
 8004db8:	f7ff ffcc 	bl	8004d54 <DFSDM_GetChannelFromInstance>
 8004dbc:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d15f      	bne.n	8004e84 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7fc fc19 	bl	80015fc <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <HAL_DFSDM_ChannelInit+0xe0>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	3201      	adds	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d119      	bne.n	8004e0c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004dd8:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <HAL_DFSDM_ChannelInit+0xe4>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8004de0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68a1      	ldr	r1, [r4, #8]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004df0:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004df2:	7922      	ldrb	r2, [r4, #4]
 8004df4:	2a01      	cmp	r2, #1
 8004df6:	d105      	bne.n	8004e04 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004df8:	68e1      	ldr	r1, [r4, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	3901      	subs	r1, #1
 8004dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e02:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e0a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e0c:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e0e:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e10:	6803      	ldr	r3, [r0, #0]
 8004e12:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8004e16:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e1e:	69a1      	ldr	r1, [r4, #24]
 8004e20:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e22:	4313      	orrs	r3, r2
 8004e24:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004e26:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004e28:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004e2a:	f023 030f 	bic.w	r3, r3, #15
 8004e2e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004e30:	69e3      	ldr	r3, [r4, #28]
 8004e32:	6802      	ldr	r2, [r0, #0]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004e3a:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004e3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004e40:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8004e44:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004e46:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004e48:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e50:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004e52:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004e54:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004e5c:	6843      	ldr	r3, [r0, #4]
 8004e5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004e68:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004e6a:	6803      	ldr	r3, [r0, #0]
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004e78:	f7ff ff6c 	bl	8004d54 <DFSDM_GetChannelFromInstance>
 8004e7c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8004e80:	2000      	movs	r0, #0
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e84:	2001      	movs	r0, #1
}
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	20000724 	.word	0x20000724
 8004e8c:	20000744 	.word	0x20000744
 8004e90:	40016000 	.word	0x40016000

08004e94 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e94:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8004e98:	2a02      	cmp	r2, #2
{
 8004e9a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e9c:	d003      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea6:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ea8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eaa:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004eac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eae:	f021 010e 	bic.w	r1, r1, #14
 8004eb2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004eb4:	6811      	ldr	r1, [r2, #0]
 8004eb6:	f021 0101 	bic.w	r1, r1, #1
 8004eba:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	f002 021c 	and.w	r2, r2, #28
 8004ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004eca:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004ecc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004ed0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8004ed4:	b113      	cbz	r3, 8004edc <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8004ed6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	4620      	mov	r0, r4
 8004eda:	bd10      	pop	{r4, pc}
 8004edc:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8004ede:	bd10      	pop	{r4, pc}

08004ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ee6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005094 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004eec:	4c67      	ldr	r4, [pc, #412]	; (800508c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eee:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8004ef0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef2:	9a01      	ldr	r2, [sp, #4]
 8004ef4:	40da      	lsrs	r2, r3
 8004ef6:	d102      	bne.n	8004efe <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8004ef8:	b005      	add	sp, #20
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004efe:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8004f00:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f02:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8004f04:	ea12 0e06 	ands.w	lr, r2, r6
 8004f08:	f000 80b1 	beq.w	800506e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f0c:	684a      	ldr	r2, [r1, #4]
 8004f0e:	f022 0710 	bic.w	r7, r2, #16
 8004f12:	2f02      	cmp	r7, #2
 8004f14:	d116      	bne.n	8004f44 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8004f16:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004f1a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f1e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8004f22:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f26:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004f2a:	f04f 0c0f 	mov.w	ip, #15
 8004f2e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8004f32:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f36:	690d      	ldr	r5, [r1, #16]
 8004f38:	fa05 f50a 	lsl.w	r5, r5, sl
 8004f3c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004f40:	f8c9 5020 	str.w	r5, [r9, #32]
 8004f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f48:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004f4a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f4e:	fa05 f50c 	lsl.w	r5, r5, ip
 8004f52:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f54:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f58:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f5c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f60:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f62:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f66:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004f68:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f6c:	d811      	bhi.n	8004f92 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004f6e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f70:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f74:	68cf      	ldr	r7, [r1, #12]
 8004f76:	fa07 f70c 	lsl.w	r7, r7, ip
 8004f7a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004f7e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f80:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f82:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004f86:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8004f8a:	409f      	lsls	r7, r3
 8004f8c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8004f90:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004f92:	f1ba 0f03 	cmp.w	sl, #3
 8004f96:	d107      	bne.n	8004fa8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8004f98:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004f9a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004f9e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8004fa2:	409f      	lsls	r7, r3
 8004fa4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8004fa6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8004fa8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004faa:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fac:	688e      	ldr	r6, [r1, #8]
 8004fae:	fa06 f60c 	lsl.w	r6, r6, ip
 8004fb2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8004fb4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fb6:	00d5      	lsls	r5, r2, #3
 8004fb8:	d559      	bpl.n	800506e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fba:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004fbe:	f045 0501 	orr.w	r5, r5, #1
 8004fc2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8004fc6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004fca:	f023 0603 	bic.w	r6, r3, #3
 8004fce:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004fd2:	f005 0501 	and.w	r5, r5, #1
 8004fd6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004fda:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fdc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004fe2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fe4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004fe8:	270f      	movs	r7, #15
 8004fea:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ff2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ff6:	d03c      	beq.n	8005072 <HAL_GPIO_Init+0x192>
 8004ff8:	4d25      	ldr	r5, [pc, #148]	; (8005090 <HAL_GPIO_Init+0x1b0>)
 8004ffa:	42a8      	cmp	r0, r5
 8004ffc:	d03b      	beq.n	8005076 <HAL_GPIO_Init+0x196>
 8004ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005002:	42a8      	cmp	r0, r5
 8005004:	d039      	beq.n	800507a <HAL_GPIO_Init+0x19a>
 8005006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800500a:	42a8      	cmp	r0, r5
 800500c:	d037      	beq.n	800507e <HAL_GPIO_Init+0x19e>
 800500e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005012:	42a8      	cmp	r0, r5
 8005014:	d035      	beq.n	8005082 <HAL_GPIO_Init+0x1a2>
 8005016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800501a:	42a8      	cmp	r0, r5
 800501c:	d033      	beq.n	8005086 <HAL_GPIO_Init+0x1a6>
 800501e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005022:	42a8      	cmp	r0, r5
 8005024:	bf14      	ite	ne
 8005026:	2507      	movne	r5, #7
 8005028:	2506      	moveq	r5, #6
 800502a:	fa05 f50c 	lsl.w	r5, r5, ip
 800502e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005030:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8005032:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005034:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005038:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800503a:	bf54      	ite	pl
 800503c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800503e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8005042:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8005044:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005046:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8005048:	bf54      	ite	pl
 800504a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800504c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8005050:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8005052:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005054:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8005056:	bf54      	ite	pl
 8005058:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800505a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800505e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8005060:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005062:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8005064:	bf54      	ite	pl
 8005066:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005068:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800506c:	60e5      	str	r5, [r4, #12]
    position++;
 800506e:	3301      	adds	r3, #1
 8005070:	e73f      	b.n	8004ef2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005072:	2500      	movs	r5, #0
 8005074:	e7d9      	b.n	800502a <HAL_GPIO_Init+0x14a>
 8005076:	2501      	movs	r5, #1
 8005078:	e7d7      	b.n	800502a <HAL_GPIO_Init+0x14a>
 800507a:	2502      	movs	r5, #2
 800507c:	e7d5      	b.n	800502a <HAL_GPIO_Init+0x14a>
 800507e:	2503      	movs	r5, #3
 8005080:	e7d3      	b.n	800502a <HAL_GPIO_Init+0x14a>
 8005082:	2504      	movs	r5, #4
 8005084:	e7d1      	b.n	800502a <HAL_GPIO_Init+0x14a>
 8005086:	2505      	movs	r5, #5
 8005088:	e7cf      	b.n	800502a <HAL_GPIO_Init+0x14a>
 800508a:	bf00      	nop
 800508c:	40010400 	.word	0x40010400
 8005090:	48000400 	.word	0x48000400
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800509c:	4c47      	ldr	r4, [pc, #284]	; (80051bc <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800509e:	f8df a124 	ldr.w	sl, [pc, #292]	; 80051c4 <HAL_GPIO_DeInit+0x12c>
 80050a2:	f8df b124 	ldr.w	fp, [pc, #292]	; 80051c8 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 80050a6:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050a8:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80050ac:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 80050b0:	fa31 f203 	lsrs.w	r2, r1, r3
 80050b4:	d102      	bne.n	80050bc <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 80050b6:	b003      	add	sp, #12
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80050bc:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 80050c0:	ea11 0206 	ands.w	r2, r1, r6
 80050c4:	9201      	str	r2, [sp, #4]
 80050c6:	d06a      	beq.n	800519e <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80050c8:	6807      	ldr	r7, [r0, #0]
 80050ca:	005a      	lsls	r2, r3, #1
 80050cc:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80050d0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80050d4:	4317      	orrs	r7, r2
 80050d6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80050da:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80050dc:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80050e0:	f003 0e07 	and.w	lr, r3, #7
 80050e4:	463d      	mov	r5, r7
 80050e6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80050ea:	270f      	movs	r7, #15
 80050ec:	fa07 fe0e 	lsl.w	lr, r7, lr
 80050f0:	ea25 0e0e 	bic.w	lr, r5, lr
 80050f4:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050f8:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80050fc:	43d2      	mvns	r2, r2
 80050fe:	ea0e 0e02 	and.w	lr, lr, r2
 8005102:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005106:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800510a:	43f6      	mvns	r6, r6
 800510c:	ea0e 0e06 	and.w	lr, lr, r6
 8005110:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005114:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8005118:	ea02 020e 	and.w	r2, r2, lr
 800511c:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800511e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005120:	4016      	ands	r6, r2
 8005122:	62c6      	str	r6, [r0, #44]	; 0x2c
 8005124:	f023 0603 	bic.w	r6, r3, #3
 8005128:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800512c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005130:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8005134:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005136:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800513a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800513e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005142:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005146:	d02c      	beq.n	80051a2 <HAL_GPIO_DeInit+0x10a>
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_GPIO_DeInit+0x128>)
 800514a:	4290      	cmp	r0, r2
 800514c:	d02b      	beq.n	80051a6 <HAL_GPIO_DeInit+0x10e>
 800514e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005152:	4290      	cmp	r0, r2
 8005154:	d029      	beq.n	80051aa <HAL_GPIO_DeInit+0x112>
 8005156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800515a:	4290      	cmp	r0, r2
 800515c:	d027      	beq.n	80051ae <HAL_GPIO_DeInit+0x116>
 800515e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005162:	4290      	cmp	r0, r2
 8005164:	d025      	beq.n	80051b2 <HAL_GPIO_DeInit+0x11a>
 8005166:	4550      	cmp	r0, sl
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_DeInit+0x11e>
 800516a:	4558      	cmp	r0, fp
 800516c:	bf0c      	ite	eq
 800516e:	2206      	moveq	r2, #6
 8005170:	2207      	movne	r2, #7
 8005172:	fa02 f20e 	lsl.w	r2, r2, lr
 8005176:	4594      	cmp	ip, r2
 8005178:	d111      	bne.n	800519e <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800517a:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800517c:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800517e:	ea22 0707 	bic.w	r7, r2, r7
 8005182:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8005184:	6822      	ldr	r2, [r4, #0]
 8005186:	43ed      	mvns	r5, r5
 8005188:	402a      	ands	r2, r5
 800518a:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800518c:	6862      	ldr	r2, [r4, #4]
 800518e:	402a      	ands	r2, r5
 8005190:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005192:	68a2      	ldr	r2, [r4, #8]
 8005194:	402a      	ands	r2, r5
 8005196:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005198:	68e2      	ldr	r2, [r4, #12]
 800519a:	4015      	ands	r5, r2
 800519c:	60e5      	str	r5, [r4, #12]
    position++;
 800519e:	3301      	adds	r3, #1
 80051a0:	e786      	b.n	80050b0 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80051a2:	2200      	movs	r2, #0
 80051a4:	e7e5      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051a6:	2201      	movs	r2, #1
 80051a8:	e7e3      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051aa:	2202      	movs	r2, #2
 80051ac:	e7e1      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051ae:	2203      	movs	r2, #3
 80051b0:	e7df      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051b2:	2204      	movs	r2, #4
 80051b4:	e7dd      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051b6:	2205      	movs	r2, #5
 80051b8:	e7db      	b.n	8005172 <HAL_GPIO_DeInit+0xda>
 80051ba:	bf00      	nop
 80051bc:	40010400 	.word	0x40010400
 80051c0:	48000400 	.word	0x48000400
 80051c4:	48001400 	.word	0x48001400
 80051c8:	48001800 	.word	0x48001800

080051cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051cc:	b10a      	cbz	r2, 80051d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051ce:	6181      	str	r1, [r0, #24]
 80051d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051d2:	6281      	str	r1, [r0, #40]	; 0x28
 80051d4:	4770      	bx	lr

080051d6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80051d6:	6943      	ldr	r3, [r0, #20]
 80051d8:	4059      	eors	r1, r3
 80051da:	6141      	str	r1, [r0, #20]
 80051dc:	4770      	bx	lr

080051de <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051de:	4770      	bx	lr

080051e0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80051e0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	4201      	tst	r1, r0
 80051e8:	d002      	beq.n	80051f0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ec:	f7ff fff7 	bl	80051de <HAL_GPIO_EXTI_Callback>
 80051f0:	bd08      	pop	{r3, pc}
 80051f2:	bf00      	nop
 80051f4:	40010400 	.word	0x40010400

080051f8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80051f8:	6803      	ldr	r3, [r0, #0]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80051fe:	bf44      	itt	mi
 8005200:	2200      	movmi	r2, #0
 8005202:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005208:	bf5e      	ittt	pl
 800520a:	699a      	ldrpl	r2, [r3, #24]
 800520c:	f042 0201 	orrpl.w	r2, r2, #1
 8005210:	619a      	strpl	r2, [r3, #24]
 8005212:	4770      	bx	lr

08005214 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005214:	b530      	push	{r4, r5, lr}
 8005216:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005218:	6805      	ldr	r5, [r0, #0]
 800521a:	4323      	orrs	r3, r4
 800521c:	0d64      	lsrs	r4, r4, #21
 800521e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005222:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005226:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800522a:	6868      	ldr	r0, [r5, #4]
 800522c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005230:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005234:	4319      	orrs	r1, r3
 8005236:	f044 0403 	orr.w	r4, r4, #3
 800523a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800523e:	ea20 0404 	bic.w	r4, r0, r4
 8005242:	4321      	orrs	r1, r4
 8005244:	6069      	str	r1, [r5, #4]
 8005246:	bd30      	pop	{r4, r5, pc}

08005248 <I2C_WaitOnFlagUntilTimeout>:
{
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	9f06      	ldr	r7, [sp, #24]
 800524e:	4604      	mov	r4, r0
 8005250:	4688      	mov	r8, r1
 8005252:	4616      	mov	r6, r2
 8005254:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	6993      	ldr	r3, [r2, #24]
 800525a:	ea38 0303 	bics.w	r3, r8, r3
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	42b3      	cmp	r3, r6
 8005266:	d002      	beq.n	800526e <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8005268:	2000      	movs	r0, #0
}
 800526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800526e:	1c6b      	adds	r3, r5, #1
 8005270:	d0f2      	beq.n	8005258 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7ff fcf3 	bl	8004c5c <HAL_GetTick>
 8005276:	1bc0      	subs	r0, r0, r7
 8005278:	4285      	cmp	r5, r0
 800527a:	d301      	bcc.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x38>
 800527c:	2d00      	cmp	r5, #0
 800527e:	d1ea      	bne.n	8005256 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005288:	2320      	movs	r3, #32
 800528a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005294:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005298:	2001      	movs	r0, #1
 800529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800529e <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800529e:	6803      	ldr	r3, [r0, #0]
{
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052a4:	6998      	ldr	r0, [r3, #24]
 80052a6:	f010 0010 	ands.w	r0, r0, #16
{
 80052aa:	460d      	mov	r5, r1
 80052ac:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ae:	d116      	bne.n	80052de <I2C_IsAcknowledgeFailed+0x40>
 80052b0:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80052b2:	1c69      	adds	r1, r5, #1
 80052b4:	d014      	beq.n	80052e0 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7ff fcd1 	bl	8004c5c <HAL_GetTick>
 80052ba:	1b80      	subs	r0, r0, r6
 80052bc:	4285      	cmp	r5, r0
 80052be:	d300      	bcc.n	80052c2 <I2C_IsAcknowledgeFailed+0x24>
 80052c0:	b96d      	cbnz	r5, 80052de <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052c4:	f043 0320 	orr.w	r3, r3, #32
 80052c8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	2320      	movs	r3, #32
 80052cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80052d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80052da:	2001      	movs	r0, #1
}
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	6999      	ldr	r1, [r3, #24]
 80052e2:	068a      	lsls	r2, r1, #26
 80052e4:	d5e5      	bpl.n	80052b2 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e6:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e8:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ea:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80052ec:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ee:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80052f0:	f7ff ff82 	bl	80051f8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	6853      	ldr	r3, [r2, #4]
 80052f8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80052fc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005300:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800530a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005312:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8005316:	e7db      	b.n	80052d0 <I2C_IsAcknowledgeFailed+0x32>

08005318 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	460d      	mov	r5, r1
 800531e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	079b      	lsls	r3, r3, #30
 8005326:	d501      	bpl.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005328:	2000      	movs	r0, #0
 800532a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800532c:	4632      	mov	r2, r6
 800532e:	4629      	mov	r1, r5
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff ffb4 	bl	800529e <I2C_IsAcknowledgeFailed>
 8005336:	b9a0      	cbnz	r0, 8005362 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005338:	1c6a      	adds	r2, r5, #1
 800533a:	d0f1      	beq.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533c:	f7ff fc8e 	bl	8004c5c <HAL_GetTick>
 8005340:	1b80      	subs	r0, r0, r6
 8005342:	4285      	cmp	r5, r0
 8005344:	d301      	bcc.n	800534a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005346:	2d00      	cmp	r5, #0
 8005348:	d1ea      	bne.n	8005320 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800534c:	f043 0320 	orr.w	r3, r3, #32
 8005350:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005352:	2320      	movs	r3, #32
 8005354:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005358:	2300      	movs	r3, #0
 800535a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800535e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005362:	2001      	movs	r0, #1
}
 8005364:	bd70      	pop	{r4, r5, r6, pc}
	...

08005368 <I2C_RequestMemoryWrite>:
{
 8005368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800536a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800536c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800536e:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <I2C_RequestMemoryWrite+0x60>)
 8005370:	9300      	str	r3, [sp, #0]
{
 8005372:	4605      	mov	r5, r0
 8005374:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800537a:	b2fa      	uxtb	r2, r7
 800537c:	f7ff ff4a 	bl	8005214 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005380:	4632      	mov	r2, r6
 8005382:	9908      	ldr	r1, [sp, #32]
 8005384:	4628      	mov	r0, r5
 8005386:	f7ff ffc7 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 800538a:	b110      	cbz	r0, 8005392 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800538c:	2001      	movs	r0, #1
}
 800538e:	b003      	add	sp, #12
 8005390:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005392:	2f01      	cmp	r7, #1
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	d10c      	bne.n	80053b2 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005398:	b2e4      	uxtb	r4, r4
 800539a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800539c:	9b08      	ldr	r3, [sp, #32]
 800539e:	9600      	str	r6, [sp, #0]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	4628      	mov	r0, r5
 80053a6:	f7ff ff4f 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80053aa:	3000      	adds	r0, #0
 80053ac:	bf18      	it	ne
 80053ae:	2001      	movne	r0, #1
 80053b0:	e7ed      	b.n	800538e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053b2:	0a22      	lsrs	r2, r4, #8
 80053b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b6:	9908      	ldr	r1, [sp, #32]
 80053b8:	4632      	mov	r2, r6
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7ff ffac 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1e3      	bne.n	800538c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	e7e7      	b.n	8005398 <I2C_RequestMemoryWrite+0x30>
 80053c8:	80002000 	.word	0x80002000

080053cc <I2C_RequestMemoryRead>:
{
 80053cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80053d0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053d2:	4b16      	ldr	r3, [pc, #88]	; (800542c <I2C_RequestMemoryRead+0x60>)
 80053d4:	9300      	str	r3, [sp, #0]
{
 80053d6:	4605      	mov	r5, r0
 80053d8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053da:	2300      	movs	r3, #0
 80053dc:	b2fa      	uxtb	r2, r7
 80053de:	f7ff ff19 	bl	8005214 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	4632      	mov	r2, r6
 80053e4:	9908      	ldr	r1, [sp, #32]
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7ff ff96 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 80053ec:	b110      	cbz	r0, 80053f4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
}
 80053f0:	b003      	add	sp, #12
 80053f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053f4:	2f01      	cmp	r7, #1
 80053f6:	682b      	ldr	r3, [r5, #0]
 80053f8:	d10c      	bne.n	8005414 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053fa:	b2e4      	uxtb	r4, r4
 80053fc:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053fe:	9b08      	ldr	r3, [sp, #32]
 8005400:	9600      	str	r6, [sp, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff ff1e 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800540c:	3000      	adds	r0, #0
 800540e:	bf18      	it	ne
 8005410:	2001      	movne	r0, #1
 8005412:	e7ed      	b.n	80053f0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005414:	0a22      	lsrs	r2, r4, #8
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005418:	9908      	ldr	r1, [sp, #32]
 800541a:	4632      	mov	r2, r6
 800541c:	4628      	mov	r0, r5
 800541e:	f7ff ff7b 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 8005422:	2800      	cmp	r0, #0
 8005424:	d1e3      	bne.n	80053ee <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	e7e7      	b.n	80053fa <I2C_RequestMemoryRead+0x2e>
 800542a:	bf00      	nop
 800542c:	80002000 	.word	0x80002000

08005430 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	460d      	mov	r5, r1
 8005436:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	069b      	lsls	r3, r3, #26
 800543e:	d501      	bpl.n	8005444 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005440:	2000      	movs	r0, #0
 8005442:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005444:	4632      	mov	r2, r6
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f7ff ff28 	bl	800529e <I2C_IsAcknowledgeFailed>
 800544e:	b990      	cbnz	r0, 8005476 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005450:	f7ff fc04 	bl	8004c5c <HAL_GetTick>
 8005454:	1b80      	subs	r0, r0, r6
 8005456:	4285      	cmp	r5, r0
 8005458:	d301      	bcc.n	800545e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800545a:	2d00      	cmp	r5, #0
 800545c:	d1ec      	bne.n	8005438 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005466:	2320      	movs	r3, #32
 8005468:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005472:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005476:	2001      	movs	r0, #1
}
 8005478:	bd70      	pop	{r4, r5, r6, pc}

0800547a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800547a:	b570      	push	{r4, r5, r6, lr}
 800547c:	4604      	mov	r4, r0
 800547e:	460d      	mov	r5, r1
 8005480:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	075b      	lsls	r3, r3, #29
 8005488:	d40e      	bmi.n	80054a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800548a:	4632      	mov	r2, r6
 800548c:	4629      	mov	r1, r5
 800548e:	4620      	mov	r0, r4
 8005490:	f7ff ff05 	bl	800529e <I2C_IsAcknowledgeFailed>
 8005494:	b9f0      	cbnz	r0, 80054d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	0691      	lsls	r1, r2, #26
 800549c:	d51c      	bpl.n	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	0752      	lsls	r2, r2, #29
 80054a2:	d503      	bpl.n	80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80054a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80054a6:	b10a      	cbz	r2, 80054ac <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80054a8:	2000      	movs	r0, #0
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ac:	2120      	movs	r1, #32
 80054ae:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80054b6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80054ba:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80054d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
}
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d8:	f7ff fbc0 	bl	8004c5c <HAL_GetTick>
 80054dc:	1b80      	subs	r0, r0, r6
 80054de:	4285      	cmp	r5, r0
 80054e0:	d301      	bcc.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 80054e2:	2d00      	cmp	r5, #0
 80054e4:	d1cd      	bne.n	8005482 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054e8:	f043 0320 	orr.w	r3, r3, #32
 80054ec:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	2320      	movs	r3, #32
 80054f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 80054f4:	2300      	movs	r3, #0
 80054f6:	e7eb      	b.n	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

080054f8 <HAL_I2C_Init>:
{
 80054f8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80054fa:	4604      	mov	r4, r0
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d04a      	beq.n	8005596 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005500:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005508:	b91b      	cbnz	r3, 8005512 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800550a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800550e:	f7fc f8a7 	bl	8001660 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005512:	2324      	movs	r3, #36	; 0x24
 8005514:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005518:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800551a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800552a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800552c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800552e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005534:	609a      	str	r2, [r3, #8]
 8005536:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005538:	d124      	bne.n	8005584 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800553a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005540:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005542:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005544:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800554c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005554:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005556:	6922      	ldr	r2, [r4, #16]
 8005558:	430a      	orrs	r2, r1
 800555a:	69a1      	ldr	r1, [r4, #24]
 800555c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005560:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005562:	6a21      	ldr	r1, [r4, #32]
 8005564:	69e2      	ldr	r2, [r4, #28]
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005572:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005574:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005576:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005578:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800557c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800557e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8005582:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005584:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005588:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800558a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800558c:	bf04      	itt	eq
 800558e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8005592:	605a      	streq	r2, [r3, #4]
 8005594:	e7d4      	b.n	8005540 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005596:	2001      	movs	r0, #1
}
 8005598:	bd10      	pop	{r4, pc}

0800559a <HAL_I2C_DeInit>:
{
 800559a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800559c:	4604      	mov	r4, r0
 800559e:	b198      	cbz	r0, 80055c8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80055a0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a2:	2324      	movs	r3, #36	; 0x24
 80055a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80055b0:	f7fc f88c 	bl	80016cc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b4:	2000      	movs	r0, #0
 80055b6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80055b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80055bc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80055c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80055c8:	2001      	movs	r0, #1
}
 80055ca:	bd10      	pop	{r4, pc}

080055cc <HAL_I2C_Master_Transmit>:
{
 80055cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80055d6:	2b20      	cmp	r3, #32
{
 80055d8:	4604      	mov	r4, r0
 80055da:	460e      	mov	r6, r1
 80055dc:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80055de:	f040 8084 	bne.w	80056ea <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 80055e2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d07f      	beq.n	80056ea <HAL_I2C_Master_Transmit+0x11e>
 80055ea:	2701      	movs	r7, #1
 80055ec:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80055f0:	f7ff fb34 	bl	8004c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055f4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80055f6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055f8:	9000      	str	r0, [sp, #0]
 80055fa:	463a      	mov	r2, r7
 80055fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005600:	4620      	mov	r0, r4
 8005602:	f7ff fe21 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005606:	b118      	cbz	r0, 8005610 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8005608:	2001      	movs	r0, #1
}
 800560a:	b003      	add	sp, #12
 800560c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005610:	2321      	movs	r3, #33	; 0x21
 8005612:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005616:	2310      	movs	r3, #16
 8005618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800561e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8005624:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005628:	b29b      	uxth	r3, r3
 800562a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800562c:	6360      	str	r0, [r4, #52]	; 0x34
 800562e:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005630:	d926      	bls.n	8005680 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005632:	22ff      	movs	r2, #255	; 0xff
 8005634:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005636:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800563c:	4631      	mov	r1, r6
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff fde8 	bl	8005214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005644:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005646:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8005648:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800564a:	462a      	mov	r2, r5
 800564c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800564e:	b9fb      	cbnz	r3, 8005690 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005650:	f7ff feee 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005654:	2800      	cmp	r0, #0
 8005656:	d1d7      	bne.n	8005608 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	2120      	movs	r1, #32
 800565c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005664:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005668:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005672:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005676:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800567a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800567e:	e7c4      	b.n	800560a <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8005680:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005682:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005684:	b292      	uxth	r2, r2
 8005686:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	e7d5      	b.n	800563c <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005690:	f7ff fe42 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 8005694:	2800      	cmp	r0, #0
 8005696:	d1b7      	bne.n	8005608 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	f813 1b01 	ldrb.w	r1, [r3], #1
 80056a0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80056a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80056a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056b0:	3a01      	subs	r2, #1
 80056b2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056b4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80056b6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0c3      	beq.n	8005644 <HAL_I2C_Master_Transmit+0x78>
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d1c1      	bne.n	8005644 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056c0:	9500      	str	r5, [sp, #0]
 80056c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7ff fdbe 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d19b      	bne.n	8005608 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2bff      	cmp	r3, #255	; 0xff
 80056d6:	d903      	bls.n	80056e0 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056d8:	22ff      	movs	r2, #255	; 0xff
 80056da:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056dc:	9000      	str	r0, [sp, #0]
 80056de:	e7ab      	b.n	8005638 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80056e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056e2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80056e4:	b292      	uxth	r2, r2
 80056e6:	8522      	strh	r2, [r4, #40]	; 0x28
 80056e8:	e7ce      	b.n	8005688 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 80056ea:	2002      	movs	r0, #2
 80056ec:	e78d      	b.n	800560a <HAL_I2C_Master_Transmit+0x3e>
 80056ee:	bf00      	nop
 80056f0:	80002000 	.word	0x80002000

080056f4 <HAL_I2C_Master_Receive>:
{
 80056f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056f8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056fe:	2b20      	cmp	r3, #32
{
 8005700:	4604      	mov	r4, r0
 8005702:	460e      	mov	r6, r1
 8005704:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	f040 8086 	bne.w	8005816 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 800570a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800570e:	2b01      	cmp	r3, #1
 8005710:	f000 8081 	beq.w	8005816 <HAL_I2C_Master_Receive+0x122>
 8005714:	2701      	movs	r7, #1
 8005716:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800571a:	f7ff fa9f 	bl	8004c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800571e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8005720:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005722:	9000      	str	r0, [sp, #0]
 8005724:	463a      	mov	r2, r7
 8005726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800572a:	4620      	mov	r0, r4
 800572c:	f7ff fd8c 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005730:	b118      	cbz	r0, 800573a <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8005732:	2001      	movs	r0, #1
}
 8005734:	b003      	add	sp, #12
 8005736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800573a:	2322      	movs	r3, #34	; 0x22
 800573c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005740:	2310      	movs	r3, #16
 8005742:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005746:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005748:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800574e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005752:	b29b      	uxth	r3, r3
 8005754:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8005756:	6360      	str	r0, [r4, #52]	; 0x34
 8005758:	4b30      	ldr	r3, [pc, #192]	; (800581c <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800575a:	d926      	bls.n	80057aa <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005760:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005766:	4631      	mov	r1, r6
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff fd53 	bl	8005214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800576e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005770:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8005772:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005774:	462a      	mov	r2, r5
 8005776:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8005778:	b9fb      	cbnz	r3, 80057ba <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	f7ff fe59 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 800577e:	2800      	cmp	r0, #0
 8005780:	d1d7      	bne.n	8005732 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	2120      	movs	r1, #32
 8005786:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800578e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005792:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80057a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80057a8:	e7c4      	b.n	8005734 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 80057aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80057ac:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80057ae:	b292      	uxth	r2, r2
 80057b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	e7d5      	b.n	8005766 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ba:	f7ff fe5e 	bl	800547a <I2C_WaitOnRXNEFlagUntilTimeout>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d1b7      	bne.n	8005732 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80057ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80057cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057ce:	3301      	adds	r3, #1
 80057d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057dc:	3a01      	subs	r2, #1
 80057de:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80057e2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0c2      	beq.n	800576e <HAL_I2C_Master_Receive+0x7a>
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d1c0      	bne.n	800576e <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ec:	9500      	str	r5, [sp, #0]
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff fd28 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d19a      	bne.n	8005732 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2bff      	cmp	r3, #255	; 0xff
 8005802:	d903      	bls.n	800580c <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005808:	9000      	str	r0, [sp, #0]
 800580a:	e7aa      	b.n	8005762 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 800580c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800580e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005810:	b292      	uxth	r2, r2
 8005812:	8522      	strh	r2, [r4, #40]	; 0x28
 8005814:	e7cd      	b.n	80057b2 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8005816:	2002      	movs	r0, #2
 8005818:	e78c      	b.n	8005734 <HAL_I2C_Master_Receive+0x40>
 800581a:	bf00      	nop
 800581c:	80002400 	.word	0x80002400

08005820 <HAL_I2C_Mem_Write>:
{
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005826:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800582a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800582c:	2b20      	cmp	r3, #32
{
 800582e:	4604      	mov	r4, r0
 8005830:	460f      	mov	r7, r1
 8005832:	9203      	str	r2, [sp, #12]
 8005834:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8005838:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800583c:	f040 80a5 	bne.w	800598a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8005840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005842:	b113      	cbz	r3, 800584a <HAL_I2C_Mem_Write+0x2a>
 8005844:	f1ba 0f00 	cmp.w	sl, #0
 8005848:	d106      	bne.n	8005858 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800584a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005850:	2001      	movs	r0, #1
}
 8005852:	b005      	add	sp, #20
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005858:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800585c:	2b01      	cmp	r3, #1
 800585e:	f000 8094 	beq.w	800598a <HAL_I2C_Mem_Write+0x16a>
 8005862:	2501      	movs	r5, #1
 8005864:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005868:	f7ff f9f8 	bl	8004c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800586c:	2319      	movs	r3, #25
 800586e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005870:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005872:	462a      	mov	r2, r5
 8005874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005878:	4620      	mov	r0, r4
 800587a:	f7ff fce5 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 800587e:	4681      	mov	r9, r0
 8005880:	2800      	cmp	r0, #0
 8005882:	d1e5      	bne.n	8005850 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005884:	2321      	movs	r3, #33	; 0x21
 8005886:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800588a:	2340      	movs	r3, #64	; 0x40
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005892:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005894:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8005896:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005898:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800589c:	9601      	str	r6, [sp, #4]
 800589e:	f8cd 8000 	str.w	r8, [sp]
 80058a2:	465b      	mov	r3, fp
 80058a4:	9a03      	ldr	r2, [sp, #12]
 80058a6:	4639      	mov	r1, r7
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fd5d 	bl	8005368 <I2C_RequestMemoryWrite>
 80058ae:	b110      	cbz	r0, 80058b6 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 80058b0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80058b4:	e7cc      	b.n	8005850 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2bff      	cmp	r3, #255	; 0xff
 80058bc:	d955      	bls.n	800596a <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058be:	22ff      	movs	r2, #255	; 0xff
 80058c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058c2:	9000      	str	r0, [sp, #0]
 80058c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058c8:	4639      	mov	r1, r7
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff fca2 	bl	8005214 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	4632      	mov	r2, r6
 80058d2:	4641      	mov	r1, r8
 80058d4:	4620      	mov	r0, r4
 80058d6:	f7ff fd1f 	bl	8005318 <I2C_WaitOnTXISFlagUntilTimeout>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d1b8      	bne.n	8005850 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80058e6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058f6:	3a01      	subs	r2, #1
 80058f8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058fa:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80058fc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058fe:	b1ab      	cbz	r3, 800592c <HAL_I2C_Mem_Write+0x10c>
 8005900:	b9a2      	cbnz	r2, 800592c <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005902:	9600      	str	r6, [sp, #0]
 8005904:	4643      	mov	r3, r8
 8005906:	2180      	movs	r1, #128	; 0x80
 8005908:	4620      	mov	r0, r4
 800590a:	f7ff fc9d 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 800590e:	2800      	cmp	r0, #0
 8005910:	d19e      	bne.n	8005850 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d92f      	bls.n	800597a <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800591a:	22ff      	movs	r2, #255	; 0xff
 800591c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800591e:	9000      	str	r0, [sp, #0]
 8005920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005924:	4639      	mov	r1, r7
 8005926:	4620      	mov	r0, r4
 8005928:	f7ff fc74 	bl	8005214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800592c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1cd      	bne.n	80058d0 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005934:	4632      	mov	r2, r6
 8005936:	4641      	mov	r1, r8
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff fd79 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 800593e:	2800      	cmp	r0, #0
 8005940:	d186      	bne.n	8005850 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	2120      	movs	r1, #32
 8005946:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800594e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005952:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800595c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005960:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005964:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005968:	e773      	b.n	8005852 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800596a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800596c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800596e:	b292      	uxth	r2, r2
 8005970:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	e7a6      	b.n	80058c8 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800597a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800597c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800597e:	b292      	uxth	r2, r2
 8005980:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	e7cc      	b.n	8005924 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800598a:	2002      	movs	r0, #2
 800598c:	e761      	b.n	8005852 <HAL_I2C_Mem_Write+0x32>
	...

08005990 <HAL_I2C_Mem_Read>:
{
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005996:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800599a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800599c:	2b20      	cmp	r3, #32
{
 800599e:	4604      	mov	r4, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	9203      	str	r2, [sp, #12]
 80059a4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80059a8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ac:	f040 80a9 	bne.w	8005b02 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80059b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b2:	b113      	cbz	r3, 80059ba <HAL_I2C_Mem_Read+0x2a>
 80059b4:	f1ba 0f00 	cmp.w	sl, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059be:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80059c0:	2001      	movs	r0, #1
}
 80059c2:	b005      	add	sp, #20
 80059c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80059c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	f000 8098 	beq.w	8005b02 <HAL_I2C_Mem_Read+0x172>
 80059d2:	2501      	movs	r5, #1
 80059d4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80059d8:	f7ff f940 	bl	8004c5c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059dc:	2319      	movs	r3, #25
 80059de:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80059e0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059e2:	462a      	mov	r2, r5
 80059e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff fc2d 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 80059ee:	4681      	mov	r9, r0
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1e5      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059f4:	2322      	movs	r3, #34	; 0x22
 80059f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059fa:	2340      	movs	r3, #64	; 0x40
 80059fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a02:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005a04:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8005a06:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005a08:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a0c:	9601      	str	r6, [sp, #4]
 8005a0e:	f8cd 8000 	str.w	r8, [sp]
 8005a12:	465b      	mov	r3, fp
 8005a14:	9a03      	ldr	r2, [sp, #12]
 8005a16:	4639      	mov	r1, r7
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7ff fcd7 	bl	80053cc <I2C_RequestMemoryRead>
 8005a1e:	b110      	cbz	r0, 8005a26 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8005a20:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8005a24:	e7cc      	b.n	80059c0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2bff      	cmp	r3, #255	; 0xff
 8005a2c:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <HAL_I2C_Mem_Read+0x178>)
 8005a2e:	d958      	bls.n	8005ae2 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a30:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a32:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fbe9 	bl	8005214 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a42:	9600      	str	r6, [sp, #0]
 8005a44:	4643      	mov	r3, r8
 8005a46:	2200      	movs	r2, #0
 8005a48:	2104      	movs	r1, #4
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fbfc 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1b5      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a5a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005a5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005a60:	3301      	adds	r3, #1
 8005a62:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005a64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005a6e:	3a01      	subs	r2, #1
 8005a70:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a72:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005a74:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a76:	b1ab      	cbz	r3, 8005aa4 <HAL_I2C_Mem_Read+0x114>
 8005a78:	b9a2      	cbnz	r2, 8005aa4 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a7a:	9600      	str	r6, [sp, #0]
 8005a7c:	4643      	mov	r3, r8
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff fbe1 	bl	8005248 <I2C_WaitOnFlagUntilTimeout>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d19a      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2bff      	cmp	r3, #255	; 0xff
 8005a90:	d92f      	bls.n	8005af2 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a96:	9000      	str	r0, [sp, #0]
 8005a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fbb8 	bl	8005214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8005aa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1ca      	bne.n	8005a42 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aac:	4632      	mov	r2, r6
 8005aae:	4641      	mov	r1, r8
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7ff fcbd 	bl	8005430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d182      	bne.n	80059c0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	2120      	movs	r1, #32
 8005abe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005ac6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005aca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005ad8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005adc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005ae0:	e76f      	b.n	80059c2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005ae2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005ae4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	e7a3      	b.n	8005a3a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8005af2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005af4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005af6:	b292      	uxth	r2, r2
 8005af8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	e7cc      	b.n	8005a9c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8005b02:	2002      	movs	r0, #2
 8005b04:	e75d      	b.n	80059c2 <HAL_I2C_Mem_Read+0x32>
 8005b06:	bf00      	nop
 8005b08:	80002400 	.word	0x80002400

08005b0c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	2a20      	cmp	r2, #32
{
 8005b14:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b16:	d11d      	bne.n	8005b54 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b18:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d019      	beq.n	8005b54 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b20:	2324      	movs	r3, #36	; 0x24
 8005b22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b26:	6803      	ldr	r3, [r0, #0]
 8005b28:	681c      	ldr	r4, [r3, #0]
 8005b2a:	f024 0401 	bic.w	r4, r4, #1
 8005b2e:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b30:	681c      	ldr	r4, [r3, #0]
 8005b32:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8005b36:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b38:	681c      	ldr	r4, [r3, #0]
 8005b3a:	4321      	orrs	r1, r4
 8005b3c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	f041 0101 	orr.w	r1, r1, #1
 8005b44:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b46:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005b48:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8005b54:	2002      	movs	r0, #2
  }
}
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b58:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5a:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8005b5e:	b2e4      	uxtb	r4, r4
 8005b60:	2c20      	cmp	r4, #32
 8005b62:	d11c      	bne.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d018      	beq.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b6c:	2324      	movs	r3, #36	; 0x24
 8005b6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b72:	6803      	ldr	r3, [r0, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b7c:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b82:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b86:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2002      	movs	r0, #2
  }
}
 8005ba0:	bd10      	pop	{r4, pc}

08005ba2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ba6:	4604      	mov	r4, r0
{
 8005ba8:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d074      	beq.n	8005c98 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bae:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8005bb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bb6:	b91b      	cbnz	r3, 8005bc0 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005bb8:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bbc:	f7fb feaa 	bl	8001914 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005bc0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bc2:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8005bc4:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bc8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8005bcc:	f001 fd5d 	bl	800768a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8005bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bd2:	466e      	mov	r6, sp
 8005bd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bd8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005bda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005bde:	e886 0003 	stmia.w	r6, {r0, r1}
 8005be2:	f104 0804 	add.w	r8, r4, #4
 8005be6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005bea:	6820      	ldr	r0, [r4, #0]
 8005bec:	f001 fd1e 	bl	800762c <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	f001 fd4f 	bl	8007696 <USB_SetCurrentMode>
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4623      	mov	r3, r4
 8005bfe:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c02:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c04:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8005c06:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c0a:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8005c0e:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8005c10:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8005c12:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c16:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c1a:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c1c:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c1e:	6518      	str	r0, [r3, #80]	; 0x50
 8005c20:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8005c24:	d1ef      	bne.n	8005c06 <HAL_PCD_Init+0x64>
 8005c26:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c28:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8005c2a:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8005c2e:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 8005c30:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 8005c32:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c36:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c3a:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c3e:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c42:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8005c46:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8005c4a:	d1ee      	bne.n	8005c2a <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c4e:	466e      	mov	r6, sp
 8005c50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005c5a:	e886 0003 	stmia.w	r6, {r0, r1}
 8005c5e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005c62:	6820      	ldr	r0, [r4, #0]
 8005c64:	f001 fd58 	bl	8007718 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8005c68:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8005c6a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c6e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d102      	bne.n	8005c7e <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f80f 	bl	8005c9c <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8005c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d102      	bne.n	8005c8a <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 f81c 	bl	8005cc2 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	f001 fde0 	bl	8007850 <USB_DevDisconnect>

  return HAL_OK;
 8005c90:	2000      	movs	r0, #0
}
 8005c92:	b00a      	add	sp, #40	; 0x28
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005c98:	2001      	movs	r0, #1
 8005c9a:	e7fa      	b.n	8005c92 <HAL_PCD_Init+0xf0>

08005c9c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c9c:	6802      	ldr	r2, [r0, #0]
{
 8005c9e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cac:	6993      	ldr	r3, [r2, #24]
 8005cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb2:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005cb4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cba:	f043 0303 	orr.w	r3, r3, #3
 8005cbe:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc2:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8005cca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd0:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cd8:	4a02      	ldr	r2, [pc, #8]	; (8005ce4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005cda:	6813      	ldr	r3, [r2, #0]
 8005cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4770      	bx	lr
 8005ce4:	40007000 	.word	0x40007000

08005ce8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ce8:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <HAL_PWREx_GetVoltageRange+0xc>)
 8005cea:	6818      	ldr	r0, [r3, #0]
#endif
}
 8005cec:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	40007000 	.word	0x40007000

08005cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cf8:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cfa:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cfc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d00:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d04:	d11c      	bne.n	8005d40 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005d0a:	d015      	beq.n	8005d38 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d18:	4a10      	ldr	r2, [pc, #64]	; (8005d5c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8005d1a:	6811      	ldr	r1, [r2, #0]
 8005d1c:	2232      	movs	r2, #50	; 0x32
 8005d1e:	434a      	muls	r2, r1
 8005d20:	490f      	ldr	r1, [pc, #60]	; (8005d60 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8005d22:	fbb2 f2f1 	udiv	r2, r2, r1
 8005d26:	4619      	mov	r1, r3
 8005d28:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d2a:	6958      	ldr	r0, [r3, #20]
 8005d2c:	0540      	lsls	r0, r0, #21
 8005d2e:	d500      	bpl.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8005d30:	b922      	cbnz	r2, 8005d3c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d32:	694b      	ldr	r3, [r1, #20]
 8005d34:	055b      	lsls	r3, r3, #21
 8005d36:	d40d      	bmi.n	8005d54 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4770      	bx	lr
        wait_loop_index--;
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	e7f4      	b.n	8005d2a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d44:	bf1f      	itttt	ne
 8005d46:	681a      	ldrne	r2, [r3, #0]
 8005d48:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8005d4c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8005d50:	601a      	strne	r2, [r3, #0]
 8005d52:	e7f1      	b.n	8005d38 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8005d54:	2003      	movs	r0, #3
}
 8005d56:	4770      	bx	lr
 8005d58:	40007000 	.word	0x40007000
 8005d5c:	20000004 	.word	0x20000004
 8005d60:	000f4240 	.word	0x000f4240

08005d64 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d64:	4a02      	ldr	r2, [pc, #8]	; (8005d70 <HAL_PWREx_EnableVddUSB+0xc>)
 8005d66:	6853      	ldr	r3, [r2, #4]
 8005d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6c:	6053      	str	r3, [r2, #4]
 8005d6e:	4770      	bx	lr
 8005d70:	40007000 	.word	0x40007000

08005d74 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d78:	9d06      	ldr	r5, [sp, #24]
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	460f      	mov	r7, r1
 8005d7e:	4616      	mov	r6, r2
 8005d80:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	688a      	ldr	r2, [r1, #8]
 8005d86:	423a      	tst	r2, r7
 8005d88:	bf14      	ite	ne
 8005d8a:	2201      	movne	r2, #1
 8005d8c:	2200      	moveq	r2, #0
 8005d8e:	42b2      	cmp	r2, r6
 8005d90:	d102      	bne.n	8005d98 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005d92:	2000      	movs	r0, #0
}
 8005d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	1c6b      	adds	r3, r5, #1
 8005d9a:	d0f3      	beq.n	8005d84 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7fe ff5e 	bl	8004c5c <HAL_GetTick>
 8005da0:	eba0 0008 	sub.w	r0, r0, r8
 8005da4:	4285      	cmp	r5, r0
 8005da6:	d301      	bcc.n	8005dac <QSPI_WaitFlagStateUntilTimeout+0x38>
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	d1ea      	bne.n	8005d82 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005dac:	2304      	movs	r3, #4
 8005dae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005dba:	2001      	movs	r0, #1
 8005dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dc0 <HAL_QSPI_Init>:
{
 8005dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dc2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005dc4:	f7fe ff4a 	bl	8004c5c <HAL_GetTick>
 8005dc8:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8005dca:	2c00      	cmp	r4, #0
 8005dcc:	d049      	beq.n	8005e62 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8005dce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d047      	beq.n	8005e66 <HAL_QSPI_Init+0xa6>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ddc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005de0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8005de4:	b93a      	cbnz	r2, 8005df6 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8005de6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8005dea:	4620      	mov	r0, r4
 8005dec:	f7fb fc84 	bl	80016f8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005df0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005df4:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005df6:	6820      	ldr	r0, [r4, #0]
 8005df8:	68a1      	ldr	r1, [r4, #8]
 8005dfa:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005dfe:	3901      	subs	r1, #1
 8005e00:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8005e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e08:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	462b      	mov	r3, r5
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff ffae 	bl	8005d74 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005e18:	b9f0      	cbnz	r0, 8005e58 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	6865      	ldr	r5, [r4, #4]
 8005e1e:	6811      	ldr	r1, [r2, #0]
 8005e20:	68e3      	ldr	r3, [r4, #12]
 8005e22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005e26:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005e2a:	f021 0110 	bic.w	r1, r1, #16
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005e32:	69a1      	ldr	r1, [r4, #24]
 8005e34:	6963      	ldr	r3, [r4, #20]
 8005e36:	6855      	ldr	r5, [r2, #4]
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6921      	ldr	r1, [r4, #16]
 8005e3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005e40:	490a      	ldr	r1, [pc, #40]	; (8005e6c <HAL_QSPI_Init+0xac>)
 8005e42:	4029      	ands	r1, r5
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005e48:	6813      	ldr	r3, [r2, #0]
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005e50:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e52:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8005e54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8005e5e:	b003      	add	sp, #12
 8005e60:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005e62:	2001      	movs	r0, #1
 8005e64:	e7fb      	b.n	8005e5e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8005e66:	2002      	movs	r0, #2
 8005e68:	e7f9      	b.n	8005e5e <HAL_QSPI_Init+0x9e>
 8005e6a:	bf00      	nop
 8005e6c:	ffe0f8fe 	.word	0xffe0f8fe

08005e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e72:	4d1e      	ldr	r5, [pc, #120]	; (8005eec <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8005e74:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005e76:	00da      	lsls	r2, r3, #3
{
 8005e78:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e7a:	d518      	bpl.n	8005eae <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e7c:	f7ff ff34 	bl	8005ce8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005e84:	d123      	bne.n	8005ece <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e86:	2c80      	cmp	r4, #128	; 0x80
 8005e88:	d929      	bls.n	8005ede <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e8a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e8c:	bf8c      	ite	hi
 8005e8e:	2002      	movhi	r0, #2
 8005e90:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e92:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	f023 0307 	bic.w	r3, r3, #7
 8005e9a:	4303      	orrs	r3, r0
 8005e9c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8005ea4:	1a18      	subs	r0, r3, r0
 8005ea6:	bf18      	it	ne
 8005ea8:	2001      	movne	r0, #1
 8005eaa:	b003      	add	sp, #12
 8005eac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb4:	65ab      	str	r3, [r5, #88]	; 0x58
 8005eb6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005ec0:	f7ff ff12 	bl	8005ce8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005ec4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eca:	65ab      	str	r3, [r5, #88]	; 0x58
 8005ecc:	e7d8      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8005ece:	2c80      	cmp	r4, #128	; 0x80
 8005ed0:	d807      	bhi.n	8005ee2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8005ed2:	d008      	beq.n	8005ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8005ed4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005ed8:	4258      	negs	r0, r3
 8005eda:	4158      	adcs	r0, r3
 8005edc:	e7d9      	b.n	8005e92 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ede:	2000      	movs	r0, #0
 8005ee0:	e7d7      	b.n	8005e92 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ee2:	2003      	movs	r0, #3
 8005ee4:	e7d5      	b.n	8005e92 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ee6:	2002      	movs	r0, #2
 8005ee8:	e7d3      	b.n	8005e92 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40022000 	.word	0x40022000

08005ef4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ef6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005efa:	f012 020c 	ands.w	r2, r2, #12
 8005efe:	d005      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0x18>
 8005f00:	2a0c      	cmp	r2, #12
 8005f02:	d115      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f04:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f08:	2901      	cmp	r1, #1
 8005f0a:	d118      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f0c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8005f0e:	4820      	ldr	r0, [pc, #128]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f10:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f12:	bf55      	itete	pl
 8005f14:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f18:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f1a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f1e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8005f22:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f26:	b382      	cbz	r2, 8005f8a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f28:	2a0c      	cmp	r2, #12
 8005f2a:	d009      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x4c>
 8005f2c:	2000      	movs	r0, #0
  return sysclockfreq;
 8005f2e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f30:	2a04      	cmp	r2, #4
 8005f32:	d029      	beq.n	8005f88 <HAL_RCC_GetSysClockFreq+0x94>
 8005f34:	2a08      	cmp	r2, #8
 8005f36:	4817      	ldr	r0, [pc, #92]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f38:	bf18      	it	ne
 8005f3a:	2000      	movne	r0, #0
 8005f3c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f3e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f40:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f42:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f44:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f48:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8005f4c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f4e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x6c>
 8005f54:	2903      	cmp	r1, #3
 8005f56:	d012      	beq.n	8005f7e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f58:	68d9      	ldr	r1, [r3, #12]
 8005f5a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005f5e:	e003      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f60:	68d9      	ldr	r1, [r3, #12]
 8005f62:	480d      	ldr	r0, [pc, #52]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f64:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f68:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f6a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f6e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005f72:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f74:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f76:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005f78:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f7c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f7e:	68d9      	ldr	r1, [r3, #12]
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f82:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005f86:	e7ef      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8005f88:	4803      	ldr	r0, [pc, #12]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8005f8a:	4770      	bx	lr
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800a4cc 	.word	0x0800a4cc
 8005f94:	007a1200 	.word	0x007a1200
 8005f98:	00f42400 	.word	0x00f42400

08005f9c <HAL_RCC_OscConfig>:
{
 8005f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	b918      	cbnz	r0, 8005fac <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8005fa4:	2001      	movs	r0, #1
}
 8005fa6:	b003      	add	sp, #12
 8005fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fac:	4ca5      	ldr	r4, [pc, #660]	; (8006244 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fae:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb0:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fb4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb6:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fba:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fbe:	d53c      	bpl.n	800603a <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fc0:	b11e      	cbz	r6, 8005fca <HAL_RCC_OscConfig+0x2e>
 8005fc2:	2e0c      	cmp	r6, #12
 8005fc4:	d163      	bne.n	800608e <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fc6:	2f01      	cmp	r7, #1
 8005fc8:	d161      	bne.n	800608e <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0798      	lsls	r0, r3, #30
 8005fce:	d502      	bpl.n	8005fd6 <HAL_RCC_OscConfig+0x3a>
 8005fd0:	69ab      	ldr	r3, [r5, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0e6      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	6a28      	ldr	r0, [r5, #32]
 8005fda:	0719      	lsls	r1, r3, #28
 8005fdc:	bf56      	itet	pl
 8005fde:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8005fe2:	6823      	ldrmi	r3, [r4, #0]
 8005fe4:	091b      	lsrpl	r3, r3, #4
 8005fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fea:	4283      	cmp	r3, r0
 8005fec:	d23a      	bcs.n	8006064 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fee:	f7ff ff3f 	bl	8005e70 <RCC_SetFlashLatencyFromMSIRange>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d1d6      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	f043 0308 	orr.w	r3, r3, #8
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	6a2a      	ldr	r2, [r5, #32]
 8006002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006006:	4313      	orrs	r3, r2
 8006008:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	69ea      	ldr	r2, [r5, #28]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006016:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006018:	f7ff ff6c 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 800601c:	68a3      	ldr	r3, [r4, #8]
 800601e:	4a8a      	ldr	r2, [pc, #552]	; (8006248 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006024:	5cd3      	ldrb	r3, [r2, r3]
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	40d8      	lsrs	r0, r3
 800602c:	4b87      	ldr	r3, [pc, #540]	; (800624c <HAL_RCC_OscConfig+0x2b0>)
 800602e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8006030:	2000      	movs	r0, #0
 8006032:	f7fe fde3 	bl	8004bfc <HAL_InitTick>
        if(status != HAL_OK)
 8006036:	2800      	cmp	r0, #0
 8006038:	d1b5      	bne.n	8005fa6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603a:	682b      	ldr	r3, [r5, #0]
 800603c:	07d8      	lsls	r0, r3, #31
 800603e:	d45d      	bmi.n	80060fc <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	0799      	lsls	r1, r3, #30
 8006044:	f100 809c 	bmi.w	8006180 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	0718      	lsls	r0, r3, #28
 800604c:	f100 80d0 	bmi.w	80061f0 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	0759      	lsls	r1, r3, #29
 8006054:	f100 80fc 	bmi.w	8006250 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006058:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 8165 	bne.w	800632a <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8006060:	2000      	movs	r0, #0
 8006062:	e7a0      	b.n	8005fa6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	f043 0308 	orr.w	r3, r3, #8
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006072:	4303      	orrs	r3, r0
 8006074:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006076:	6863      	ldr	r3, [r4, #4]
 8006078:	69ea      	ldr	r2, [r5, #28]
 800607a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800607e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006082:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006084:	f7ff fef4 	bl	8005e70 <RCC_SetFlashLatencyFromMSIRange>
 8006088:	2800      	cmp	r0, #0
 800608a:	d0c5      	beq.n	8006018 <HAL_RCC_OscConfig+0x7c>
 800608c:	e78a      	b.n	8005fa4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800608e:	69ab      	ldr	r3, [r5, #24]
 8006090:	b31b      	cbz	r3, 80060da <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f043 0301 	orr.w	r3, r3, #1
 8006098:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800609a:	f7fe fddf 	bl	8004c5c <HAL_GetTick>
 800609e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	079a      	lsls	r2, r3, #30
 80060a4:	d511      	bpl.n	80060ca <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f043 0308 	orr.w	r3, r3, #8
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6a2a      	ldr	r2, [r5, #32]
 80060b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b6:	4313      	orrs	r3, r2
 80060b8:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060ba:	6863      	ldr	r3, [r4, #4]
 80060bc:	69ea      	ldr	r2, [r5, #28]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060c6:	6063      	str	r3, [r4, #4]
 80060c8:	e7b7      	b.n	800603a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060ca:	f7fe fdc7 	bl	8004c5c <HAL_GetTick>
 80060ce:	eba0 0008 	sub.w	r0, r0, r8
 80060d2:	2802      	cmp	r0, #2
 80060d4:	d9e4      	bls.n	80060a0 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 80060d6:	2003      	movs	r0, #3
 80060d8:	e765      	b.n	8005fa6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80060e2:	f7fe fdbb 	bl	8004c5c <HAL_GetTick>
 80060e6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	079b      	lsls	r3, r3, #30
 80060ec:	d5a5      	bpl.n	800603a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060ee:	f7fe fdb5 	bl	8004c5c <HAL_GetTick>
 80060f2:	eba0 0008 	sub.w	r0, r0, r8
 80060f6:	2802      	cmp	r0, #2
 80060f8:	d9f6      	bls.n	80060e8 <HAL_RCC_OscConfig+0x14c>
 80060fa:	e7ec      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060fc:	2e08      	cmp	r6, #8
 80060fe:	d003      	beq.n	8006108 <HAL_RCC_OscConfig+0x16c>
 8006100:	2e0c      	cmp	r6, #12
 8006102:	d108      	bne.n	8006116 <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8006104:	2f03      	cmp	r7, #3
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	039a      	lsls	r2, r3, #14
 800610c:	d598      	bpl.n	8006040 <HAL_RCC_OscConfig+0xa4>
 800610e:	686b      	ldr	r3, [r5, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d195      	bne.n	8006040 <HAL_RCC_OscConfig+0xa4>
 8006114:	e746      	b.n	8005fa4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006116:	686b      	ldr	r3, [r5, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d110      	bne.n	8006140 <HAL_RCC_OscConfig+0x1a4>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006126:	f7fe fd99 	bl	8004c5c <HAL_GetTick>
 800612a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	039b      	lsls	r3, r3, #14
 8006130:	d486      	bmi.n	8006040 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006132:	f7fe fd93 	bl	8004c5c <HAL_GetTick>
 8006136:	eba0 0008 	sub.w	r0, r0, r8
 800613a:	2864      	cmp	r0, #100	; 0x64
 800613c:	d9f6      	bls.n	800612c <HAL_RCC_OscConfig+0x190>
 800613e:	e7ca      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006144:	d104      	bne.n	8006150 <HAL_RCC_OscConfig+0x1b4>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	e7e6      	b.n	800611e <HAL_RCC_OscConfig+0x182>
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800615e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e0      	bne.n	8006126 <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8006164:	f7fe fd7a 	bl	8004c5c <HAL_GetTick>
 8006168:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	0398      	lsls	r0, r3, #14
 800616e:	f57f af67 	bpl.w	8006040 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006172:	f7fe fd73 	bl	8004c5c <HAL_GetTick>
 8006176:	eba0 0008 	sub.w	r0, r0, r8
 800617a:	2864      	cmp	r0, #100	; 0x64
 800617c:	d9f5      	bls.n	800616a <HAL_RCC_OscConfig+0x1ce>
 800617e:	e7aa      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006180:	2e04      	cmp	r6, #4
 8006182:	d003      	beq.n	800618c <HAL_RCC_OscConfig+0x1f0>
 8006184:	2e0c      	cmp	r6, #12
 8006186:	d110      	bne.n	80061aa <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8006188:	2f02      	cmp	r7, #2
 800618a:	d10e      	bne.n	80061aa <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	0559      	lsls	r1, r3, #21
 8006190:	d503      	bpl.n	800619a <HAL_RCC_OscConfig+0x1fe>
 8006192:	68eb      	ldr	r3, [r5, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f43f af05 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	692a      	ldr	r2, [r5, #16]
 800619e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80061a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	e74e      	b.n	8006048 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061aa:	68eb      	ldr	r3, [r5, #12]
 80061ac:	b17b      	cbz	r3, 80061ce <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061b6:	f7fe fd51 	bl	8004c5c <HAL_GetTick>
 80061ba:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	055a      	lsls	r2, r3, #21
 80061c0:	d4eb      	bmi.n	800619a <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c2:	f7fe fd4b 	bl	8004c5c <HAL_GetTick>
 80061c6:	1bc0      	subs	r0, r0, r7
 80061c8:	2802      	cmp	r0, #2
 80061ca:	d9f7      	bls.n	80061bc <HAL_RCC_OscConfig+0x220>
 80061cc:	e783      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061d6:	f7fe fd41 	bl	8004c5c <HAL_GetTick>
 80061da:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	055b      	lsls	r3, r3, #21
 80061e0:	f57f af32 	bpl.w	8006048 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061e4:	f7fe fd3a 	bl	8004c5c <HAL_GetTick>
 80061e8:	1bc0      	subs	r0, r0, r7
 80061ea:	2802      	cmp	r0, #2
 80061ec:	d9f6      	bls.n	80061dc <HAL_RCC_OscConfig+0x240>
 80061ee:	e772      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061f0:	696b      	ldr	r3, [r5, #20]
 80061f2:	b19b      	cbz	r3, 800621c <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80061f4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006200:	f7fe fd2c 	bl	8004c5c <HAL_GetTick>
 8006204:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006206:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800620a:	079a      	lsls	r2, r3, #30
 800620c:	f53f af20 	bmi.w	8006050 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006210:	f7fe fd24 	bl	8004c5c <HAL_GetTick>
 8006214:	1bc0      	subs	r0, r0, r7
 8006216:	2802      	cmp	r0, #2
 8006218:	d9f5      	bls.n	8006206 <HAL_RCC_OscConfig+0x26a>
 800621a:	e75c      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 800621c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006228:	f7fe fd18 	bl	8004c5c <HAL_GetTick>
 800622c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800622e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	f57f af0c 	bpl.w	8006050 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006238:	f7fe fd10 	bl	8004c5c <HAL_GetTick>
 800623c:	1bc0      	subs	r0, r0, r7
 800623e:	2802      	cmp	r0, #2
 8006240:	d9f5      	bls.n	800622e <HAL_RCC_OscConfig+0x292>
 8006242:	e748      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
 8006244:	40021000 	.word	0x40021000
 8006248:	0800a4b2 	.word	0x0800a4b2
 800624c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006252:	00d8      	lsls	r0, r3, #3
 8006254:	d429      	bmi.n	80062aa <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625c:	65a3      	str	r3, [r4, #88]	; 0x58
 800625e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006268:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800626c:	4f5d      	ldr	r7, [pc, #372]	; (80063e4 <HAL_RCC_OscConfig+0x448>)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	05d9      	lsls	r1, r3, #23
 8006272:	d51d      	bpl.n	80062b0 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006274:	68ab      	ldr	r3, [r5, #8]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d12b      	bne.n	80062d2 <HAL_RCC_OscConfig+0x336>
 800627a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006286:	f7fe fce9 	bl	8004c5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800628e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006290:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006294:	079b      	lsls	r3, r3, #30
 8006296:	d542      	bpl.n	800631e <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8006298:	f1b8 0f00 	cmp.w	r8, #0
 800629c:	f43f aedc 	beq.w	8006058 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80062a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80062a8:	e6d6      	b.n	8006058 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	e7dd      	b.n	800626c <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80062b8:	f7fe fcd0 	bl	8004c5c <HAL_GetTick>
 80062bc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	05da      	lsls	r2, r3, #23
 80062c2:	d4d7      	bmi.n	8006274 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c4:	f7fe fcca 	bl	8004c5c <HAL_GetTick>
 80062c8:	eba0 0009 	sub.w	r0, r0, r9
 80062cc:	2802      	cmp	r0, #2
 80062ce:	d9f6      	bls.n	80062be <HAL_RCC_OscConfig+0x322>
 80062d0:	e701      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d106      	bne.n	80062e4 <HAL_RCC_OscConfig+0x348>
 80062d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80062e2:	e7ca      	b.n	800627a <HAL_RCC_OscConfig+0x2de>
 80062e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80062f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80062f4:	f022 0204 	bic.w	r2, r2, #4
 80062f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1c2      	bne.n	8006286 <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8006300:	f7fe fcac 	bl	8004c5c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006308:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800630a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800630e:	0798      	lsls	r0, r3, #30
 8006310:	d5c2      	bpl.n	8006298 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fe fca3 	bl	8004c5c <HAL_GetTick>
 8006316:	1bc0      	subs	r0, r0, r7
 8006318:	4548      	cmp	r0, r9
 800631a:	d9f6      	bls.n	800630a <HAL_RCC_OscConfig+0x36e>
 800631c:	e6db      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631e:	f7fe fc9d 	bl	8004c5c <HAL_GetTick>
 8006322:	1bc0      	subs	r0, r0, r7
 8006324:	4548      	cmp	r0, r9
 8006326:	d9b3      	bls.n	8006290 <HAL_RCC_OscConfig+0x2f4>
 8006328:	e6d5      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800632a:	2e0c      	cmp	r6, #12
 800632c:	f43f ae3a 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006330:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006338:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800633a:	d137      	bne.n	80063ac <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 800633c:	f7fe fc8e 	bl	8004c5c <HAL_GetTick>
 8006340:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	0199      	lsls	r1, r3, #6
 8006346:	d42b      	bmi.n	80063a0 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006348:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800634a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800634c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006350:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006352:	3a01      	subs	r2, #1
 8006354:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006358:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800635a:	0912      	lsrs	r2, r2, #4
 800635c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006360:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006362:	0852      	lsrs	r2, r2, #1
 8006364:	3a01      	subs	r2, #1
 8006366:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800636a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800636c:	0852      	lsrs	r2, r2, #1
 800636e:	3a01      	subs	r2, #1
 8006370:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006374:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800637c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006384:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8006386:	f7fe fc69 	bl	8004c5c <HAL_GetTick>
 800638a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	019a      	lsls	r2, r3, #6
 8006390:	f53f ae66 	bmi.w	8006060 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006394:	f7fe fc62 	bl	8004c5c <HAL_GetTick>
 8006398:	1b40      	subs	r0, r0, r5
 800639a:	2802      	cmp	r0, #2
 800639c:	d9f6      	bls.n	800638c <HAL_RCC_OscConfig+0x3f0>
 800639e:	e69a      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a0:	f7fe fc5c 	bl	8004c5c <HAL_GetTick>
 80063a4:	1b80      	subs	r0, r0, r6
 80063a6:	2802      	cmp	r0, #2
 80063a8:	d9cb      	bls.n	8006342 <HAL_RCC_OscConfig+0x3a6>
 80063aa:	e694      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063b2:	bf02      	ittt	eq
 80063b4:	68e3      	ldreq	r3, [r4, #12]
 80063b6:	f023 0303 	biceq.w	r3, r3, #3
 80063ba:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80063c8:	f7fe fc48 	bl	8004c5c <HAL_GetTick>
 80063cc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	f57f ae45 	bpl.w	8006060 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d6:	f7fe fc41 	bl	8004c5c <HAL_GetTick>
 80063da:	1b40      	subs	r0, r0, r5
 80063dc:	2802      	cmp	r0, #2
 80063de:	d9f6      	bls.n	80063ce <HAL_RCC_OscConfig+0x432>
 80063e0:	e679      	b.n	80060d6 <HAL_RCC_OscConfig+0x13a>
 80063e2:	bf00      	nop
 80063e4:	40007000 	.word	0x40007000

080063e8 <HAL_RCC_ClockConfig>:
{
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80063ee:	4604      	mov	r4, r0
 80063f0:	b910      	cbnz	r0, 80063f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80063f2:	2001      	movs	r0, #1
 80063f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4a40      	ldr	r2, [pc, #256]	; (80064fc <HAL_RCC_ClockConfig+0x114>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	428b      	cmp	r3, r1
 8006402:	d329      	bcc.n	8006458 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	07d9      	lsls	r1, r3, #31
 8006408:	d431      	bmi.n	800646e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640a:	6821      	ldr	r1, [r4, #0]
 800640c:	078a      	lsls	r2, r1, #30
 800640e:	d45b      	bmi.n	80064c8 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4a3a      	ldr	r2, [pc, #232]	; (80064fc <HAL_RCC_ClockConfig+0x114>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	429e      	cmp	r6, r3
 800641a:	d35d      	bcc.n	80064d8 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800641c:	f011 0f04 	tst.w	r1, #4
 8006420:	4d37      	ldr	r5, [pc, #220]	; (8006500 <HAL_RCC_ClockConfig+0x118>)
 8006422:	d164      	bne.n	80064ee <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006424:	070b      	lsls	r3, r1, #28
 8006426:	d506      	bpl.n	8006436 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006428:	68ab      	ldr	r3, [r5, #8]
 800642a:	6922      	ldr	r2, [r4, #16]
 800642c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006430:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006434:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006436:	f7ff fd5d 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 800643a:	68ab      	ldr	r3, [r5, #8]
 800643c:	4a31      	ldr	r2, [pc, #196]	; (8006504 <HAL_RCC_ClockConfig+0x11c>)
 800643e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8006442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006446:	5cd3      	ldrb	r3, [r2, r3]
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	40d8      	lsrs	r0, r3
 800644e:	4b2e      	ldr	r3, [pc, #184]	; (8006508 <HAL_RCC_ClockConfig+0x120>)
 8006450:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8006452:	2000      	movs	r0, #0
 8006454:	f7fe bbd2 	b.w	8004bfc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	f023 0307 	bic.w	r3, r3, #7
 800645e:	430b      	orrs	r3, r1
 8006460:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	4299      	cmp	r1, r3
 800646a:	d1c2      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xa>
 800646c:	e7ca      	b.n	8006404 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800646e:	6862      	ldr	r2, [r4, #4]
 8006470:	4d23      	ldr	r5, [pc, #140]	; (8006500 <HAL_RCC_ClockConfig+0x118>)
 8006472:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006474:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006476:	d11b      	bne.n	80064b0 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006478:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800647c:	d0b9      	beq.n	80063f2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800647e:	68ab      	ldr	r3, [r5, #8]
 8006480:	f023 0303 	bic.w	r3, r3, #3
 8006484:	4313      	orrs	r3, r2
 8006486:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8006488:	f7fe fbe8 	bl	8004c5c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800648c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006490:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	68ab      	ldr	r3, [r5, #8]
 8006494:	6862      	ldr	r2, [r4, #4]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800649e:	d0b4      	beq.n	800640a <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a0:	f7fe fbdc 	bl	8004c5c <HAL_GetTick>
 80064a4:	1bc0      	subs	r0, r0, r7
 80064a6:	4540      	cmp	r0, r8
 80064a8:	d9f3      	bls.n	8006492 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80064aa:	2003      	movs	r0, #3
}
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b0:	2a02      	cmp	r2, #2
 80064b2:	d102      	bne.n	80064ba <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80064b8:	e7e0      	b.n	800647c <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064ba:	b912      	cbnz	r2, 80064c2 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064bc:	f013 0f02 	tst.w	r3, #2
 80064c0:	e7dc      	b.n	800647c <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80064c6:	e7d9      	b.n	800647c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <HAL_RCC_ClockConfig+0x118>)
 80064ca:	68a0      	ldr	r0, [r4, #8]
 80064cc:	6893      	ldr	r3, [r2, #8]
 80064ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d2:	4303      	orrs	r3, r0
 80064d4:	6093      	str	r3, [r2, #8]
 80064d6:	e79b      	b.n	8006410 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d8:	6813      	ldr	r3, [r2, #0]
 80064da:	f023 0307 	bic.w	r3, r3, #7
 80064de:	4333      	orrs	r3, r6
 80064e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	429e      	cmp	r6, r3
 80064ea:	d182      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xa>
 80064ec:	e796      	b.n	800641c <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ee:	68ab      	ldr	r3, [r5, #8]
 80064f0:	68e2      	ldr	r2, [r4, #12]
 80064f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60ab      	str	r3, [r5, #8]
 80064fa:	e793      	b.n	8006424 <HAL_RCC_ClockConfig+0x3c>
 80064fc:	40022000 	.word	0x40022000
 8006500:	40021000 	.word	0x40021000
 8006504:	0800a4b2 	.word	0x0800a4b2
 8006508:	20000004 	.word	0x20000004

0800650c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x18>)
 800650e:	4a06      	ldr	r2, [pc, #24]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006516:	5cd3      	ldrb	r3, [r2, r3]
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCC_GetPCLK1Freq+0x20>)
 800651a:	6810      	ldr	r0, [r2, #0]
 800651c:	f003 031f 	and.w	r3, r3, #31
}
 8006520:	40d8      	lsrs	r0, r3
 8006522:	4770      	bx	lr
 8006524:	40021000 	.word	0x40021000
 8006528:	0800a4c2 	.word	0x0800a4c2
 800652c:	20000004 	.word	0x20000004

08006530 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006532:	4a06      	ldr	r2, [pc, #24]	; (800654c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800653a:	5cd3      	ldrb	r3, [r2, r3]
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800653e:	6810      	ldr	r0, [r2, #0]
 8006540:	f003 031f 	and.w	r3, r3, #31
}
 8006544:	40d8      	lsrs	r0, r3
 8006546:	4770      	bx	lr
 8006548:	40021000 	.word	0x40021000
 800654c:	0800a4c2 	.word	0x0800a4c2
 8006550:	20000004 	.word	0x20000004

08006554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006556:	4b45      	ldr	r3, [pc, #276]	; (800666c <RCCEx_PLLSAI1_Config+0x118>)
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	f012 0f03 	tst.w	r2, #3
{
 800655e:	4605      	mov	r5, r0
 8006560:	460e      	mov	r6, r1
 8006562:	461c      	mov	r4, r3
 8006564:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006566:	d02a      	beq.n	80065be <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	f002 0203 	and.w	r2, r2, #3
 800656e:	4282      	cmp	r2, r0
 8006570:	d13c      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0x98>
       ||
 8006572:	2a00      	cmp	r2, #0
 8006574:	d03a      	beq.n	80065ec <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006576:	68db      	ldr	r3, [r3, #12]
       ||
 8006578:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800657a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800657e:	3301      	adds	r3, #1
       ||
 8006580:	4293      	cmp	r3, r2
 8006582:	d133      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800658a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800658c:	f7fe fb66 	bl	8004c5c <HAL_GetTick>
 8006590:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	011a      	lsls	r2, r3, #4
 8006596:	d432      	bmi.n	80065fe <RCCEx_PLLSAI1_Config+0xaa>
 8006598:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800659a:	2e00      	cmp	r6, #0
 800659c:	d036      	beq.n	800660c <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800659e:	2e01      	cmp	r6, #1
 80065a0:	d150      	bne.n	8006644 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065a2:	6922      	ldr	r2, [r4, #16]
 80065a4:	6928      	ldr	r0, [r5, #16]
 80065a6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80065aa:	0840      	lsrs	r0, r0, #1
 80065ac:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80065b0:	3801      	subs	r0, #1
 80065b2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80065b6:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80065ba:	6122      	str	r2, [r4, #16]
 80065bc:	e032      	b.n	8006624 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 80065be:	2802      	cmp	r0, #2
 80065c0:	d010      	beq.n	80065e4 <RCCEx_PLLSAI1_Config+0x90>
 80065c2:	2803      	cmp	r0, #3
 80065c4:	d014      	beq.n	80065f0 <RCCEx_PLLSAI1_Config+0x9c>
 80065c6:	2801      	cmp	r0, #1
 80065c8:	d110      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	079f      	lsls	r7, r3, #30
 80065ce:	d538      	bpl.n	8006642 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065d0:	68e3      	ldr	r3, [r4, #12]
 80065d2:	686a      	ldr	r2, [r5, #4]
 80065d4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80065d8:	3a01      	subs	r2, #1
 80065da:	4318      	orrs	r0, r3
 80065dc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80065e0:	60e0      	str	r0, [r4, #12]
 80065e2:	e7cf      	b.n	8006584 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ea:	d1f1      	bne.n	80065d0 <RCCEx_PLLSAI1_Config+0x7c>
 80065ec:	2001      	movs	r0, #1
 80065ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	0391      	lsls	r1, r2, #14
 80065f4:	d4ec      	bmi.n	80065d0 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80065fc:	e7f5      	b.n	80065ea <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065fe:	f7fe fb2d 	bl	8004c5c <HAL_GetTick>
 8006602:	1bc0      	subs	r0, r0, r7
 8006604:	2802      	cmp	r0, #2
 8006606:	d9c4      	bls.n	8006592 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8006608:	2003      	movs	r0, #3
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800660c:	6921      	ldr	r1, [r4, #16]
 800660e:	68eb      	ldr	r3, [r5, #12]
 8006610:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8006614:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006618:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8006622:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800662a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662c:	f7fe fb16 	bl	8004c5c <HAL_GetTick>
 8006630:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	d513      	bpl.n	8006660 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	69aa      	ldr	r2, [r5, #24]
 800663c:	4313      	orrs	r3, r2
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8006642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	6968      	ldr	r0, [r5, #20]
 8006648:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800664c:	0840      	lsrs	r0, r0, #1
 800664e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006652:	3801      	subs	r0, #1
 8006654:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8006658:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	e7e1      	b.n	8006624 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006660:	f7fe fafc 	bl	8004c5c <HAL_GetTick>
 8006664:	1b80      	subs	r0, r0, r6
 8006666:	2802      	cmp	r0, #2
 8006668:	d9e3      	bls.n	8006632 <RCCEx_PLLSAI1_Config+0xde>
 800666a:	e7cd      	b.n	8006608 <RCCEx_PLLSAI1_Config+0xb4>
 800666c:	40021000 	.word	0x40021000

08006670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006672:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <RCCEx_PLLSAI2_Config+0xf8>)
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	f012 0f03 	tst.w	r2, #3
{
 800667a:	4605      	mov	r5, r0
 800667c:	460e      	mov	r6, r1
 800667e:	461c      	mov	r4, r3
 8006680:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006682:	d028      	beq.n	80066d6 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	f002 0203 	and.w	r2, r2, #3
 800668a:	4282      	cmp	r2, r0
 800668c:	d13a      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800668e:	2a00      	cmp	r2, #0
 8006690:	d038      	beq.n	8006704 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006692:	68db      	ldr	r3, [r3, #12]
       ||
 8006694:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006696:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800669a:	3301      	adds	r3, #1
       ||
 800669c:	4293      	cmp	r3, r2
 800669e:	d131      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a8:	f7fe fad8 	bl	8004c5c <HAL_GetTick>
 80066ac:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	009a      	lsls	r2, r3, #2
 80066b2:	d430      	bmi.n	8006716 <RCCEx_PLLSAI2_Config+0xa6>
 80066b4:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	d034      	beq.n	8006724 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	6929      	ldr	r1, [r5, #16]
 80066be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066c2:	0849      	lsrs	r1, r1, #1
 80066c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066c8:	3901      	subs	r1, #1
 80066ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80066ce:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80066d2:	6163      	str	r3, [r4, #20]
 80066d4:	e032      	b.n	800673c <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 80066d6:	2802      	cmp	r0, #2
 80066d8:	d010      	beq.n	80066fc <RCCEx_PLLSAI2_Config+0x8c>
 80066da:	2803      	cmp	r0, #3
 80066dc:	d014      	beq.n	8006708 <RCCEx_PLLSAI2_Config+0x98>
 80066de:	2801      	cmp	r0, #1
 80066e0:	d110      	bne.n	8006704 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	079f      	lsls	r7, r3, #30
 80066e6:	d538      	bpl.n	800675a <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066e8:	68e3      	ldr	r3, [r4, #12]
 80066ea:	686a      	ldr	r2, [r5, #4]
 80066ec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80066f0:	3a01      	subs	r2, #1
 80066f2:	4318      	orrs	r0, r3
 80066f4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80066f8:	60e0      	str	r0, [r4, #12]
 80066fa:	e7d1      	b.n	80066a0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006702:	d1f1      	bne.n	80066e8 <RCCEx_PLLSAI2_Config+0x78>
 8006704:	2001      	movs	r0, #1
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	0391      	lsls	r1, r2, #14
 800670c:	d4ec      	bmi.n	80066e8 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006714:	e7f5      	b.n	8006702 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006716:	f7fe faa1 	bl	8004c5c <HAL_GetTick>
 800671a:	1bc0      	subs	r0, r0, r7
 800671c:	2802      	cmp	r0, #2
 800671e:	d9c6      	bls.n	80066ae <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8006720:	2003      	movs	r0, #3
 8006722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006724:	6962      	ldr	r2, [r4, #20]
 8006726:	68eb      	ldr	r3, [r5, #12]
 8006728:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800672c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006730:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006734:	091b      	lsrs	r3, r3, #4
 8006736:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800673a:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006742:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fe fa8a 	bl	8004c5c <HAL_GetTick>
 8006748:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	d505      	bpl.n	800675c <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006750:	6963      	ldr	r3, [r4, #20]
 8006752:	696a      	ldr	r2, [r5, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	6163      	str	r3, [r4, #20]
 8006758:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800675c:	f7fe fa7e 	bl	8004c5c <HAL_GetTick>
 8006760:	1b80      	subs	r0, r0, r6
 8006762:	2802      	cmp	r0, #2
 8006764:	d9f1      	bls.n	800674a <RCCEx_PLLSAI2_Config+0xda>
 8006766:	e7db      	b.n	8006720 <RCCEx_PLLSAI2_Config+0xb0>
 8006768:	40021000 	.word	0x40021000

0800676c <HAL_RCCEx_PeriphCLKConfig>:
{
 800676c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006770:	6806      	ldr	r6, [r0, #0]
 8006772:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8006776:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006778:	d024      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800677a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800677c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8006780:	d02c      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x70>
 8006782:	d802      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006784:	b1c1      	cbz	r1, 80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8006786:	2601      	movs	r6, #1
 8006788:	e01c      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800678a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800678e:	d00d      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006790:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8006794:	d1f7      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006796:	4a4d      	ldr	r2, [pc, #308]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006798:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800679a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800679e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80067a2:	430b      	orrs	r3, r1
 80067a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80067a8:	2600      	movs	r6, #0
 80067aa:	e00b      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067ac:	4a47      	ldr	r2, [pc, #284]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	68d3      	ldr	r3, [r2, #12]
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	60d3      	str	r3, [r2, #12]
      break;
 80067b6:	e7ee      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067b8:	3004      	adds	r0, #4
 80067ba:	f7ff fecb 	bl	8006554 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067be:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d0e8      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	04d8      	lsls	r0, r3, #19
 80067c8:	d506      	bpl.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80067ca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80067cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80067d0:	d074      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x150>
 80067d2:	d808      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067d4:	b1a9      	cbz	r1, 8006802 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 80067d6:	2601      	movs	r6, #1
 80067d8:	4635      	mov	r5, r6
 80067da:	e021      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067dc:	2100      	movs	r1, #0
 80067de:	3020      	adds	r0, #32
 80067e0:	f7ff ff46 	bl	8006670 <RCCEx_PLLSAI2_Config>
 80067e4:	e7eb      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80067e6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80067ea:	d004      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80067ec:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80067f0:	d1f1      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80067f2:	4635      	mov	r5, r6
 80067f4:	e009      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067f6:	4a35      	ldr	r2, [pc, #212]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f8:	68d3      	ldr	r3, [r2, #12]
 80067fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fe:	60d3      	str	r3, [r2, #12]
 8006800:	e7f7      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006802:	1d20      	adds	r0, r4, #4
 8006804:	f7ff fea6 	bl	8006554 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006808:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800680a:	2d00      	cmp	r5, #0
 800680c:	d15c      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800680e:	4a2f      	ldr	r2, [pc, #188]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006810:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006812:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006816:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800681a:	430b      	orrs	r3, r1
 800681c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	0399      	lsls	r1, r3, #14
 8006824:	f140 814f 	bpl.w	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006828:	4f28      	ldr	r7, [pc, #160]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800682c:	00da      	lsls	r2, r3, #3
 800682e:	f140 8176 	bpl.w	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8006832:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006836:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80068d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800683a:	f8d9 3000 	ldr.w	r3, [r9]
 800683e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006842:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8006846:	f7fe fa09 	bl	8004c5c <HAL_GetTick>
 800684a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800684c:	f8d9 3000 	ldr.w	r3, [r9]
 8006850:	05db      	lsls	r3, r3, #23
 8006852:	d53f      	bpl.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8006854:	2d00      	cmp	r5, #0
 8006856:	d144      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800685c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006860:	d015      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8006862:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006866:	4293      	cmp	r3, r2
 8006868:	d011      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800686a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800686e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006872:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006876:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800687a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800687e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006886:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800688a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800688e:	07d8      	lsls	r0, r3, #31
 8006890:	d509      	bpl.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8006892:	f7fe f9e3 	bl	8004c5c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800689a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800689c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068a0:	0799      	lsls	r1, r3, #30
 80068a2:	f140 8109 	bpl.w	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068b8:	4635      	mov	r5, r6
 80068ba:	e012      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80068bc:	2100      	movs	r1, #0
 80068be:	f104 0020 	add.w	r0, r4, #32
 80068c2:	f7ff fed5 	bl	8006670 <RCCEx_PLLSAI2_Config>
 80068c6:	e79f      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80068c8:	462e      	mov	r6, r5
 80068ca:	e7a9      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d4:	f7fe f9c2 	bl	8004c5c <HAL_GetTick>
 80068d8:	eba0 000a 	sub.w	r0, r0, sl
 80068dc:	2802      	cmp	r0, #2
 80068de:	d9b5      	bls.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80068e0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	07da      	lsls	r2, r3, #31
 80068f4:	d508      	bpl.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068f6:	4990      	ldr	r1, [pc, #576]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80068f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80068fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068fe:	f022 0203 	bic.w	r2, r2, #3
 8006902:	4302      	orrs	r2, r0
 8006904:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006908:	079f      	lsls	r7, r3, #30
 800690a:	d508      	bpl.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800690c:	498a      	ldr	r1, [pc, #552]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800690e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006910:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006914:	f022 020c 	bic.w	r2, r2, #12
 8006918:	4302      	orrs	r2, r0
 800691a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800691e:	075e      	lsls	r6, r3, #29
 8006920:	d508      	bpl.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006922:	4985      	ldr	r1, [pc, #532]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006924:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006926:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800692a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800692e:	4302      	orrs	r2, r0
 8006930:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006934:	0718      	lsls	r0, r3, #28
 8006936:	d508      	bpl.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006938:	497f      	ldr	r1, [pc, #508]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800693a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800693c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006940:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006944:	4302      	orrs	r2, r0
 8006946:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800694a:	06d9      	lsls	r1, r3, #27
 800694c:	d508      	bpl.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800694e:	497a      	ldr	r1, [pc, #488]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006950:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006952:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006956:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800695a:	4302      	orrs	r2, r0
 800695c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006960:	069a      	lsls	r2, r3, #26
 8006962:	d508      	bpl.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006964:	4974      	ldr	r1, [pc, #464]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006966:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006968:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800696c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006970:	4302      	orrs	r2, r0
 8006972:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006976:	059f      	lsls	r7, r3, #22
 8006978:	d508      	bpl.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800697a:	496f      	ldr	r1, [pc, #444]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800697c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800697e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006982:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006986:	4302      	orrs	r2, r0
 8006988:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800698c:	055e      	lsls	r6, r3, #21
 800698e:	d508      	bpl.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006990:	4969      	ldr	r1, [pc, #420]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006992:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006994:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006998:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800699c:	4302      	orrs	r2, r0
 800699e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069a2:	0658      	lsls	r0, r3, #25
 80069a4:	d508      	bpl.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069a6:	4964      	ldr	r1, [pc, #400]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80069a8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80069aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80069b2:	4302      	orrs	r2, r0
 80069b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069b8:	0619      	lsls	r1, r3, #24
 80069ba:	d508      	bpl.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069bc:	495e      	ldr	r1, [pc, #376]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80069be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069c4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80069c8:	4302      	orrs	r2, r0
 80069ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069ce:	05da      	lsls	r2, r3, #23
 80069d0:	d508      	bpl.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069d2:	4959      	ldr	r1, [pc, #356]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80069d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80069da:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80069de:	4302      	orrs	r2, r0
 80069e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069e4:	049b      	lsls	r3, r3, #18
 80069e6:	d50f      	bpl.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069e8:	4a53      	ldr	r2, [pc, #332]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80069ea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80069ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80069f0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80069f4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069f6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069fe:	d164      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	68d3      	ldr	r3, [r2, #12]
 8006a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a06:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	031f      	lsls	r7, r3, #12
 8006a0c:	d50f      	bpl.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a0e:	4a4a      	ldr	r2, [pc, #296]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a10:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006a12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006a16:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006a1a:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a1c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a24:	d15c      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a26:	68d3      	ldr	r3, [r2, #12]
 8006a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	035e      	lsls	r6, r3, #13
 8006a32:	d50f      	bpl.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a34:	4a40      	ldr	r2, [pc, #256]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a36:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8006a38:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006a3c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006a40:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a42:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a4a:	d154      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a4c:	68d3      	ldr	r3, [r2, #12]
 8006a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a52:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	0458      	lsls	r0, r3, #17
 8006a58:	d512      	bpl.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a5a:	4937      	ldr	r1, [pc, #220]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a5c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006a5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006a62:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006a66:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a68:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a70:	d14c      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a72:	2102      	movs	r1, #2
 8006a74:	1d20      	adds	r0, r4, #4
 8006a76:	f7ff fd6d 	bl	8006554 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	bf18      	it	ne
 8006a7e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	0411      	lsls	r1, r2, #16
 8006a84:	d508      	bpl.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a86:	492c      	ldr	r1, [pc, #176]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a88:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a92:	4303      	orrs	r3, r0
 8006a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a98:	03d3      	lsls	r3, r2, #15
 8006a9a:	d509      	bpl.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a9c:	4a26      	ldr	r2, [pc, #152]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006a9e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006aa2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	430b      	orrs	r3, r1
 8006aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	b002      	add	sp, #8
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab8:	f7fe f8d0 	bl	8004c5c <HAL_GetTick>
 8006abc:	1b40      	subs	r0, r0, r5
 8006abe:	4548      	cmp	r0, r9
 8006ac0:	f67f aeec 	bls.w	800689c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8006ac4:	e70c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006ac6:	4635      	mov	r5, r6
 8006ac8:	e712      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006aca:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006ace:	d19b      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	1d20      	adds	r0, r4, #4
 8006ad4:	f7ff fd3e 	bl	8006554 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	bf18      	it	ne
 8006adc:	4605      	movne	r5, r0
 8006ade:	e793      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006ae0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006ae4:	d1a3      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	1d20      	adds	r0, r4, #4
 8006aea:	f7ff fd33 	bl	8006554 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006aee:	2800      	cmp	r0, #0
 8006af0:	bf18      	it	ne
 8006af2:	4605      	movne	r5, r0
 8006af4:	e79b      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006af6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006afa:	d1ab      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006afc:	2101      	movs	r1, #1
 8006afe:	1d20      	adds	r0, r4, #4
 8006b00:	f7ff fd28 	bl	8006554 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006b04:	2800      	cmp	r0, #0
 8006b06:	bf18      	it	ne
 8006b08:	4605      	movne	r5, r0
 8006b0a:	e7a3      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006b0c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006b10:	d1b6      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006b12:	2102      	movs	r1, #2
 8006b14:	f104 0020 	add.w	r0, r4, #32
 8006b18:	f7ff fdaa 	bl	8006670 <RCCEx_PLLSAI2_Config>
 8006b1c:	e7ad      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006b30:	f04f 0801 	mov.w	r8, #1
 8006b34:	e67f      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000

08006b3c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b3c:	4a02      	ldr	r2, [pc, #8]	; (8006b48 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	4770      	bx	lr
 8006b48:	40021000 	.word	0x40021000

08006b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b4e:	4604      	mov	r4, r0
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d04a      	beq.n	8006bea <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b58:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006b5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b60:	b91b      	cbnz	r3, 8006b6a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b62:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b66:	f7fa fdfd 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006b72:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b74:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8006b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b7a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8006b7e:	600b      	str	r3, [r1, #0]
 8006b80:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b84:	d92e      	bls.n	8006be4 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b86:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b88:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b8c:	bf18      	it	ne
 8006b8e:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b92:	b92b      	cbnz	r3, 8006ba0 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b94:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006b98:	bf8c      	ite	hi
 8006b9a:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006b9c:	2301      	movls	r3, #1
 8006b9e:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006ba0:	68a6      	ldr	r6, [r4, #8]
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	69a5      	ldr	r5, [r4, #24]
 8006ba6:	4333      	orrs	r3, r6
 8006ba8:	6926      	ldr	r6, [r4, #16]
 8006baa:	4333      	orrs	r3, r6
 8006bac:	6966      	ldr	r6, [r4, #20]
 8006bae:	4333      	orrs	r3, r6
 8006bb0:	69e6      	ldr	r6, [r4, #28]
 8006bb2:	4333      	orrs	r3, r6
 8006bb4:	6a26      	ldr	r6, [r4, #32]
 8006bb6:	4333      	orrs	r3, r6
 8006bb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bba:	4333      	orrs	r3, r6
 8006bbc:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8006bc0:	4333      	orrs	r3, r6
 8006bc2:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bca:	0c2d      	lsrs	r5, r5, #16
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	f005 0504 	and.w	r5, r5, #4
 8006bd2:	432a      	orrs	r2, r5
 8006bd4:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8006bd6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bd8:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006bda:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bdc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bde:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006be4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006be8:	e7d0      	b.n	8006b8c <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8006bea:	2001      	movs	r0, #1
}
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bf0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf0:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8006bf2:	480a      	ldr	r0, [pc, #40]	; (8006c1c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	4001      	ands	r1, r0
 8006c00:	2906      	cmp	r1, #6
 8006c02:	d008      	beq.n	8006c16 <HAL_TIM_Base_Start_IT+0x26>
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	4002      	ands	r2, r0
 8006c08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8006c0c:	bf1e      	ittt	ne
 8006c0e:	681a      	ldrne	r2, [r3, #0]
 8006c10:	f042 0201 	orrne.w	r2, r2, #1
 8006c14:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8006c16:	2000      	movs	r0, #0
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	00010007 	.word	0x00010007

08006c20 <HAL_TIM_OC_DelayElapsedCallback>:
 8006c20:	4770      	bx	lr

08006c22 <HAL_TIM_IC_CaptureCallback>:
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_TriggerCallback>:
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c28:	6803      	ldr	r3, [r0, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	0791      	lsls	r1, r2, #30
{
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c32:	d50f      	bpl.n	8006c54 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	0792      	lsls	r2, r2, #30
 8006c38:	d50c      	bpl.n	8006c54 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c3a:	f06f 0202 	mvn.w	r2, #2
 8006c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c40:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c42:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c44:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c46:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c48:	f000 8085 	beq.w	8006d56 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c4c:	f7ff ffe9 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c50:	2300      	movs	r3, #0
 8006c52:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	0752      	lsls	r2, r2, #29
 8006c5a:	d510      	bpl.n	8006c7e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	0750      	lsls	r0, r2, #29
 8006c60:	d50d      	bpl.n	8006c7e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c62:	f06f 0204 	mvn.w	r2, #4
 8006c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c68:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c6c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c70:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c72:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c74:	d075      	beq.n	8006d62 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c76:	f7ff ffd4 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	0711      	lsls	r1, r2, #28
 8006c84:	d50f      	bpl.n	8006ca6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	0712      	lsls	r2, r2, #28
 8006c8a:	d50c      	bpl.n	8006ca6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c8c:	f06f 0208 	mvn.w	r2, #8
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c92:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c94:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c96:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c98:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c9c:	d067      	beq.n	8006d6e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9e:	f7ff ffc0 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	06d0      	lsls	r0, r2, #27
 8006cac:	d510      	bpl.n	8006cd0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	06d1      	lsls	r1, r2, #27
 8006cb2:	d50d      	bpl.n	8006cd0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb4:	f06f 0210 	mvn.w	r2, #16
 8006cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cbc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cbe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cc2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc6:	d058      	beq.n	8006d7a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc8:	f7ff ffab 	bl	8006c22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	07d2      	lsls	r2, r2, #31
 8006cd6:	d508      	bpl.n	8006cea <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	07d0      	lsls	r0, r2, #31
 8006cdc:	d505      	bpl.n	8006cea <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cde:	f06f 0201 	mvn.w	r2, #1
 8006ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7fa fc6d 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	0611      	lsls	r1, r2, #24
 8006cf0:	d508      	bpl.n	8006d04 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	0612      	lsls	r2, r2, #24
 8006cf6:	d505      	bpl.n	8006d04 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 f8ef 	bl	8006ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	05d0      	lsls	r0, r2, #23
 8006d0a:	d508      	bpl.n	8006d1e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	0611      	lsls	r1, r2, #24
 8006d10:	d505      	bpl.n	8006d1e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 f8e3 	bl	8006ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	0652      	lsls	r2, r2, #25
 8006d24:	d508      	bpl.n	8006d38 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	0650      	lsls	r0, r2, #25
 8006d2a:	d505      	bpl.n	8006d38 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7ff ff77 	bl	8006c26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	0691      	lsls	r1, r2, #26
 8006d3e:	d522      	bpl.n	8006d86 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	0692      	lsls	r2, r2, #26
 8006d44:	d51f      	bpl.n	8006d86 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d46:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006d4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d4c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8006d52:	f000 b8c5 	b.w	8006ee0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d56:	f7ff ff63 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f7ff ff62 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d60:	e776      	b.n	8006c50 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	f7ff ff5d 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d66:	4620      	mov	r0, r4
 8006d68:	f7ff ff5c 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d6c:	e785      	b.n	8006c7a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	f7ff ff57 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7ff ff56 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d78:	e793      	b.n	8006ca2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7a:	f7ff ff51 	bl	8006c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff ff50 	bl	8006c24 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d84:	e7a2      	b.n	8006ccc <HAL_TIM_IRQHandler+0xa4>
 8006d86:	bd10      	pop	{r4, pc}

08006d88 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d88:	4a30      	ldr	r2, [pc, #192]	; (8006e4c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006d8a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d8c:	4290      	cmp	r0, r2
 8006d8e:	d012      	beq.n	8006db6 <TIM_Base_SetConfig+0x2e>
 8006d90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0x2e>
 8006d96:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006d9a:	4290      	cmp	r0, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0x2e>
 8006d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006da2:	4290      	cmp	r0, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0x2e>
 8006da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006daa:	4290      	cmp	r0, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0x2e>
 8006dae:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006db2:	4290      	cmp	r0, r2
 8006db4:	d119      	bne.n	8006dea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006db6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006dbc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dbe:	4a23      	ldr	r2, [pc, #140]	; (8006e4c <TIM_Base_SetConfig+0xc4>)
 8006dc0:	4290      	cmp	r0, r2
 8006dc2:	d01d      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006dc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006dc8:	d01a      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006dca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006dce:	4290      	cmp	r0, r2
 8006dd0:	d016      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd6:	4290      	cmp	r0, r2
 8006dd8:	d012      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dde:	4290      	cmp	r0, r2
 8006de0:	d00e      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006de2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8006de6:	4290      	cmp	r0, r2
 8006de8:	d00a      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006dea:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <TIM_Base_SetConfig+0xc8>)
 8006dec:	4290      	cmp	r0, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006df0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006df4:	4290      	cmp	r0, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0x78>
 8006df8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dfc:	4290      	cmp	r0, r2
 8006dfe:	d103      	bne.n	8006e08 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e00:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e08:	694a      	ldr	r2, [r1, #20]
 8006e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006e10:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e12:	688b      	ldr	r3, [r1, #8]
 8006e14:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e16:	680b      	ldr	r3, [r1, #0]
 8006e18:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <TIM_Base_SetConfig+0xc4>)
 8006e1c:	4298      	cmp	r0, r3
 8006e1e:	d00f      	beq.n	8006e40 <TIM_Base_SetConfig+0xb8>
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	4298      	cmp	r0, r3
 8006e26:	d00b      	beq.n	8006e40 <TIM_Base_SetConfig+0xb8>
 8006e28:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006e2c:	4298      	cmp	r0, r3
 8006e2e:	d007      	beq.n	8006e40 <TIM_Base_SetConfig+0xb8>
 8006e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e34:	4298      	cmp	r0, r3
 8006e36:	d003      	beq.n	8006e40 <TIM_Base_SetConfig+0xb8>
 8006e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e3c:	4298      	cmp	r0, r3
 8006e3e:	d101      	bne.n	8006e44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e40:	690b      	ldr	r3, [r1, #16]
 8006e42:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e44:	2301      	movs	r3, #1
 8006e46:	6143      	str	r3, [r0, #20]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40014000 	.word	0x40014000

08006e54 <HAL_TIM_Base_Init>:
{
 8006e54:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006e56:	4604      	mov	r4, r0
 8006e58:	b1a0      	cbz	r0, 8006e84 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006e5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e62:	b91b      	cbnz	r3, 8006e6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006e64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006e68:	f7fa fcb0 	bl	80017cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e72:	6820      	ldr	r0, [r4, #0]
 8006e74:	1d21      	adds	r1, r4, #4
 8006e76:	f7ff ff87 	bl	8006d88 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e80:	2000      	movs	r0, #0
 8006e82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006e84:	2001      	movs	r0, #1
}
 8006e86:	bd10      	pop	{r4, pc}

08006e88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
{
 8006e8e:	b530      	push	{r4, r5, lr}
 8006e90:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006e94:	d01f      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e96:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e98:	4d10      	ldr	r5, [pc, #64]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e9e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006ea2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ea4:	d003      	beq.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006ea6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006eaa:	42aa      	cmp	r2, r5
 8006eac:	d103      	bne.n	8006eb6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eae:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb6:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eb8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ebe:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec0:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec6:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8006eca:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006ecc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006ed6:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006ed8:	bd30      	pop	{r4, r5, pc}
 8006eda:	bf00      	nop
 8006edc:	40012c00 	.word	0x40012c00

08006ee0 <HAL_TIMEx_CommutationCallback>:
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_TIMEx_BreakCallback>:
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ee4:	4770      	bx	lr

08006ee6 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ee6:	6803      	ldr	r3, [r0, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	6603      	str	r3, [r0, #96]	; 0x60
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_TxCpltCallback>:
 8006f04:	4770      	bx	lr

08006f06 <HAL_UART_ErrorCallback>:
 8006f06:	4770      	bx	lr

08006f08 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f08:	6803      	ldr	r3, [r0, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f0c:	6819      	ldr	r1, [r3, #0]
{
 8006f0e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8006f10:	0716      	lsls	r6, r2, #28
{
 8006f12:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f14:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8006f16:	d10a      	bne.n	8006f2e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8006f18:	0696      	lsls	r6, r2, #26
 8006f1a:	d564      	bpl.n	8006fe6 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f1c:	068e      	lsls	r6, r1, #26
 8006f1e:	d562      	bpl.n	8006fe6 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8006f20:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8083 	beq.w	800702e <HAL_UART_IRQHandler+0x126>
}
 8006f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006f2c:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8006f2e:	f015 0001 	ands.w	r0, r5, #1
 8006f32:	d102      	bne.n	8006f3a <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f34:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006f38:	d055      	beq.n	8006fe6 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f3a:	07d5      	lsls	r5, r2, #31
 8006f3c:	d507      	bpl.n	8006f4e <HAL_UART_IRQHandler+0x46>
 8006f3e:	05ce      	lsls	r6, r1, #23
 8006f40:	d505      	bpl.n	8006f4e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f42:	2501      	movs	r5, #1
 8006f44:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f46:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8006f48:	f045 0501 	orr.w	r5, r5, #1
 8006f4c:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f4e:	0795      	lsls	r5, r2, #30
 8006f50:	d506      	bpl.n	8006f60 <HAL_UART_IRQHandler+0x58>
 8006f52:	b128      	cbz	r0, 8006f60 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f54:	2502      	movs	r5, #2
 8006f56:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f58:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8006f5a:	f045 0504 	orr.w	r5, r5, #4
 8006f5e:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f60:	0756      	lsls	r6, r2, #29
 8006f62:	d506      	bpl.n	8006f72 <HAL_UART_IRQHandler+0x6a>
 8006f64:	b128      	cbz	r0, 8006f72 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f66:	2504      	movs	r5, #4
 8006f68:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f6a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8006f6c:	f045 0502 	orr.w	r5, r5, #2
 8006f70:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006f72:	0715      	lsls	r5, r2, #28
 8006f74:	d507      	bpl.n	8006f86 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8006f76:	068e      	lsls	r6, r1, #26
 8006f78:	d400      	bmi.n	8006f7c <HAL_UART_IRQHandler+0x74>
 8006f7a:	b120      	cbz	r0, 8006f86 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f7c:	2008      	movs	r0, #8
 8006f7e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f80:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006f82:	4303      	orrs	r3, r0
 8006f84:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d050      	beq.n	800702e <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8006f8c:	0695      	lsls	r5, r2, #26
 8006f8e:	d505      	bpl.n	8006f9c <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f90:	0688      	lsls	r0, r1, #26
 8006f92:	d503      	bpl.n	8006f9c <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8006f94:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006f96:	b10b      	cbz	r3, 8006f9c <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8006f98:	4620      	mov	r0, r4
 8006f9a:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006f9c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006f9e:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8006fa0:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006fa2:	d404      	bmi.n	8006fae <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006fa8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8006fac:	d017      	beq.n	8006fde <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8006fae:	f7ff ff9a 	bl	8006ee6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	0652      	lsls	r2, r2, #25
 8006fb8:	d50d      	bpl.n	8006fd6 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006fbc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006fc4:	b138      	cbz	r0, 8006fd6 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <HAL_UART_IRQHandler+0x128>)
 8006fc8:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fca:	f7fd ff63 	bl	8004e94 <HAL_DMA_Abort_IT>
 8006fce:	b370      	cbz	r0, 800702e <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fd0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006fd4:	e7a8      	b.n	8006f28 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff ff95 	bl	8006f06 <HAL_UART_ErrorCallback>
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006fde:	f7ff ff92 	bl	8006f06 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe2:	6765      	str	r5, [r4, #116]	; 0x74
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006fe6:	02d6      	lsls	r6, r2, #11
 8006fe8:	d509      	bpl.n	8006ffe <HAL_UART_IRQHandler+0xf6>
 8006fea:	0268      	lsls	r0, r5, #9
 8006fec:	d507      	bpl.n	8006ffe <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006ff2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006ffa:	f000 bafd 	b.w	80075f8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8006ffe:	0616      	lsls	r6, r2, #24
 8007000:	d505      	bpl.n	800700e <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007002:	060d      	lsls	r5, r1, #24
 8007004:	d503      	bpl.n	800700e <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8007006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007008:	b18b      	cbz	r3, 800702e <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 800700a:	4620      	mov	r0, r4
 800700c:	e78c      	b.n	8006f28 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800700e:	0650      	lsls	r0, r2, #25
 8007010:	d50d      	bpl.n	800702e <HAL_UART_IRQHandler+0x126>
 8007012:	064a      	lsls	r2, r1, #25
 8007014:	d50b      	bpl.n	800702e <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800701c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800701e:	2320      	movs	r3, #32
 8007020:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007028:	4620      	mov	r0, r4
 800702a:	f7ff ff6b 	bl	8006f04 <HAL_UART_TxCpltCallback>
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	08007035 	.word	0x08007035

08007034 <UART_DMAAbortOnError>:
{
 8007034:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007036:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800703e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8007042:	f7ff ff60 	bl	8006f06 <HAL_UART_ErrorCallback>
 8007046:	bd08      	pop	{r3, pc}

08007048 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8007048:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800704a:	69c1      	ldr	r1, [r0, #28]
{
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007050:	6883      	ldr	r3, [r0, #8]
 8007052:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007054:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007056:	4303      	orrs	r3, r0
 8007058:	6960      	ldr	r0, [r4, #20]
 800705a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800705c:	48ba      	ldr	r0, [pc, #744]	; (8007348 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800705e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007060:	4028      	ands	r0, r5
 8007062:	4303      	orrs	r3, r0
 8007064:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007066:	6853      	ldr	r3, [r2, #4]
 8007068:	68e0      	ldr	r0, [r4, #12]
 800706a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800706e:	4303      	orrs	r3, r0
 8007070:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007072:	4bb6      	ldr	r3, [pc, #728]	; (800734c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007074:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007076:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8007078:	bf1c      	itt	ne
 800707a:	6a23      	ldrne	r3, [r4, #32]
 800707c:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800707e:	6893      	ldr	r3, [r2, #8]
 8007080:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007084:	4303      	orrs	r3, r0
 8007086:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007088:	4bb1      	ldr	r3, [pc, #708]	; (8007350 <UART_SetConfig+0x308>)
 800708a:	429a      	cmp	r2, r3
 800708c:	d119      	bne.n	80070c2 <UART_SetConfig+0x7a>
 800708e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007092:	4ab0      	ldr	r2, [pc, #704]	; (8007354 <UART_SetConfig+0x30c>)
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80070a0:	5cd3      	ldrb	r3, [r2, r3]
 80070a2:	f040 8138 	bne.w	8007316 <UART_SetConfig+0x2ce>
    switch (clocksource)
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	f200 808f 	bhi.w	80071ca <UART_SetConfig+0x182>
 80070ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80070b0:	00ca011a 	.word	0x00ca011a
 80070b4:	008d00f9 	.word	0x008d00f9
 80070b8:	008d0114 	.word	0x008d0114
 80070bc:	008d008d 	.word	0x008d008d
 80070c0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070c2:	4ba5      	ldr	r3, [pc, #660]	; (8007358 <UART_SetConfig+0x310>)
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d107      	bne.n	80070d8 <UART_SetConfig+0x90>
 80070c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80070cc:	4aa3      	ldr	r2, [pc, #652]	; (800735c <UART_SetConfig+0x314>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	e7e1      	b.n	800709c <UART_SetConfig+0x54>
 80070d8:	4ba1      	ldr	r3, [pc, #644]	; (8007360 <UART_SetConfig+0x318>)
 80070da:	429a      	cmp	r2, r3
 80070dc:	d123      	bne.n	8007126 <UART_SetConfig+0xde>
 80070de:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070ea:	2b10      	cmp	r3, #16
 80070ec:	f000 80f1 	beq.w	80072d2 <UART_SetConfig+0x28a>
 80070f0:	d80b      	bhi.n	800710a <UART_SetConfig+0xc2>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80f3 	beq.w	80072de <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 80070fc:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007100:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007104:	f000 80f8 	beq.w	80072f8 <UART_SetConfig+0x2b0>
 8007108:	e0a8      	b.n	800725c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800710a:	2b20      	cmp	r3, #32
 800710c:	f000 80c6 	beq.w	800729c <UART_SetConfig+0x254>
 8007110:	2b30      	cmp	r3, #48	; 0x30
 8007112:	d1f1      	bne.n	80070f8 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007114:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007118:	f040 80b8 	bne.w	800728c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800711c:	6860      	ldr	r0, [r4, #4]
 800711e:	0843      	lsrs	r3, r0, #1
 8007120:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007124:	e0c3      	b.n	80072ae <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007126:	4b8f      	ldr	r3, [pc, #572]	; (8007364 <UART_SetConfig+0x31c>)
 8007128:	429a      	cmp	r2, r3
 800712a:	d11e      	bne.n	800716a <UART_SetConfig+0x122>
 800712c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	f000 80bb 	beq.w	80072b4 <UART_SetConfig+0x26c>
 800713e:	d80a      	bhi.n	8007156 <UART_SetConfig+0x10e>
 8007140:	b97b      	cbnz	r3, 8007162 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007142:	4b82      	ldr	r3, [pc, #520]	; (800734c <UART_SetConfig+0x304>)
 8007144:	429a      	cmp	r2, r3
 8007146:	f040 80ca 	bne.w	80072de <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800714a:	f7ff f9df 	bl	800650c <HAL_RCC_GetPCLK1Freq>
        break;
 800714e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8007150:	bbb0      	cbnz	r0, 80071c0 <UART_SetConfig+0x178>
 8007152:	4602      	mov	r2, r0
 8007154:	e03a      	b.n	80071cc <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007156:	2b80      	cmp	r3, #128	; 0x80
 8007158:	f000 809d 	beq.w	8007296 <UART_SetConfig+0x24e>
 800715c:	2bc0      	cmp	r3, #192	; 0xc0
 800715e:	f000 80b0 	beq.w	80072c2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007162:	4b7a      	ldr	r3, [pc, #488]	; (800734c <UART_SetConfig+0x304>)
 8007164:	429a      	cmp	r2, r3
 8007166:	d1c7      	bne.n	80070f8 <UART_SetConfig+0xb0>
 8007168:	e02f      	b.n	80071ca <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716a:	4b7f      	ldr	r3, [pc, #508]	; (8007368 <UART_SetConfig+0x320>)
 800716c:	429a      	cmp	r2, r3
 800716e:	d111      	bne.n	8007194 <UART_SetConfig+0x14c>
 8007170:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800717c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007180:	f000 8098 	beq.w	80072b4 <UART_SetConfig+0x26c>
 8007184:	d9dc      	bls.n	8007140 <UART_SetConfig+0xf8>
 8007186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718a:	f000 8084 	beq.w	8007296 <UART_SetConfig+0x24e>
 800718e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007192:	e7e4      	b.n	800715e <UART_SetConfig+0x116>
 8007194:	4b6d      	ldr	r3, [pc, #436]	; (800734c <UART_SetConfig+0x304>)
 8007196:	429a      	cmp	r2, r3
 8007198:	d1ae      	bne.n	80070f8 <UART_SetConfig+0xb0>
 800719a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800719e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071aa:	f000 8083 	beq.w	80072b4 <UART_SetConfig+0x26c>
 80071ae:	d9c7      	bls.n	8007140 <UART_SetConfig+0xf8>
 80071b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b4:	d06f      	beq.n	8007296 <UART_SetConfig+0x24e>
 80071b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ba:	e7d0      	b.n	800715e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80071bc:	486b      	ldr	r0, [pc, #428]	; (800736c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80071be:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80071c0:	6862      	ldr	r2, [r4, #4]
 80071c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80071c6:	4281      	cmp	r1, r0
 80071c8:	d905      	bls.n	80071d6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80071ca:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80071d0:	6663      	str	r3, [r4, #100]	; 0x64
}
 80071d2:	4610      	mov	r0, r2
 80071d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80071d6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80071da:	d8f6      	bhi.n	80071ca <UART_SetConfig+0x182>
        switch (clocksource)
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d82e      	bhi.n	800723e <UART_SetConfig+0x1f6>
 80071e0:	e8df f003 	tbb	[pc, r3]
 80071e4:	2d1c2d05 	.word	0x2d1c2d05
 80071e8:	2d2d2d24 	.word	0x2d2d2d24
 80071ec:	27          	.byte	0x27
 80071ed:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80071ee:	f7ff f98d 	bl	800650c <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80071f2:	6862      	ldr	r2, [r4, #4]
 80071f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071f8:	0856      	lsrs	r6, r2, #1
 80071fa:	2700      	movs	r7, #0
 80071fc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8007200:	2300      	movs	r3, #0
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007206:	f7f9 fccb 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 800720a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800720c:	4b58      	ldr	r3, [pc, #352]	; (8007370 <UART_SetConfig+0x328>)
 800720e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007212:	4299      	cmp	r1, r3
 8007214:	d8d9      	bhi.n	80071ca <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	60d8      	str	r0, [r3, #12]
 800721a:	e7d7      	b.n	80071cc <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800721c:	4855      	ldr	r0, [pc, #340]	; (8007374 <UART_SetConfig+0x32c>)
 800721e:	0855      	lsrs	r5, r2, #1
 8007220:	2300      	movs	r3, #0
 8007222:	2100      	movs	r1, #0
 8007224:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007226:	f141 0100 	adc.w	r1, r1, #0
 800722a:	e7ec      	b.n	8007206 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800722c:	f7fe fe62 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8007230:	e7df      	b.n	80071f2 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007232:	0850      	lsrs	r0, r2, #1
 8007234:	2100      	movs	r1, #0
 8007236:	2300      	movs	r3, #0
 8007238:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800723c:	e7f3      	b.n	8007226 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800723e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007240:	2000      	movs	r0, #0
 8007242:	e7e3      	b.n	800720c <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007244:	f7ff f974 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007248:	e04e      	b.n	80072e8 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800724a:	f7ff f95f 	bl	800650c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800724e:	6862      	ldr	r2, [r4, #4]
 8007250:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8007254:	fbb3 f3f2 	udiv	r3, r3, r2
 8007258:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800725a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800725c:	f1a3 0010 	sub.w	r0, r3, #16
 8007260:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8007264:	4288      	cmp	r0, r1
 8007266:	d8b0      	bhi.n	80071ca <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	60cb      	str	r3, [r1, #12]
 800726c:	e7ae      	b.n	80071cc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800726e:	f7ff f95f 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007272:	e7ec      	b.n	800724e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007274:	6860      	ldr	r0, [r4, #4]
 8007276:	0843      	lsrs	r3, r0, #1
 8007278:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800727c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007280:	fbb3 f3f0 	udiv	r3, r3, r0
 8007284:	e7e8      	b.n	8007258 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007286:	f7fe fe35 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 800728a:	e7e0      	b.n	800724e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800728c:	6860      	ldr	r0, [r4, #4]
 800728e:	0843      	lsrs	r3, r0, #1
 8007290:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007294:	e7f4      	b.n	8007280 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007296:	4b2d      	ldr	r3, [pc, #180]	; (800734c <UART_SetConfig+0x304>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d08f      	beq.n	80071bc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800729c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80072a0:	d1e8      	bne.n	8007274 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80072a2:	6860      	ldr	r0, [r4, #4]
 80072a4:	0843      	lsrs	r3, r0, #1
 80072a6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80072aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80072ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80072b2:	e01f      	b.n	80072f4 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b4:	4b25      	ldr	r3, [pc, #148]	; (800734c <UART_SetConfig+0x304>)
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10b      	bne.n	80072d2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80072ba:	f7fe fe1b 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
        break;
 80072be:	2304      	movs	r3, #4
 80072c0:	e746      	b.n	8007150 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c2:	4b22      	ldr	r3, [pc, #136]	; (800734c <UART_SetConfig+0x304>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	f47f af25 	bne.w	8007114 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80072ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80072ce:	2308      	movs	r3, #8
 80072d0:	e776      	b.n	80071c0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80072d6:	d1d6      	bne.n	8007286 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072d8:	f7fe fe0c 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 80072dc:	e004      	b.n	80072e8 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80072e2:	d1b2      	bne.n	800724a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80072e4:	f7ff f912 	bl	800650c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80072e8:	6861      	ldr	r1, [r4, #4]
 80072ea:	084a      	lsrs	r2, r1, #1
 80072ec:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80072f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80072f4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f8:	f1a3 0010 	sub.w	r0, r3, #16
 80072fc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8007300:	4288      	cmp	r0, r1
 8007302:	f63f af62 	bhi.w	80071ca <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8007306:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800730a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800730c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8007310:	430b      	orrs	r3, r1
 8007312:	60c3      	str	r3, [r0, #12]
 8007314:	e75a      	b.n	80071cc <UART_SetConfig+0x184>
    switch (clocksource)
 8007316:	2b08      	cmp	r3, #8
 8007318:	f63f af57 	bhi.w	80071ca <UART_SetConfig+0x182>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <UART_SetConfig+0x2dc>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	0800724b 	.word	0x0800724b
 8007328:	0800726f 	.word	0x0800726f
 800732c:	08007275 	.word	0x08007275
 8007330:	080071cb 	.word	0x080071cb
 8007334:	08007287 	.word	0x08007287
 8007338:	080071cb 	.word	0x080071cb
 800733c:	080071cb 	.word	0x080071cb
 8007340:	080071cb 	.word	0x080071cb
 8007344:	0800728d 	.word	0x0800728d
 8007348:	efff69f3 	.word	0xefff69f3
 800734c:	40008000 	.word	0x40008000
 8007350:	40013800 	.word	0x40013800
 8007354:	0800a757 	.word	0x0800a757
 8007358:	40004400 	.word	0x40004400
 800735c:	0800a75b 	.word	0x0800a75b
 8007360:	40004800 	.word	0x40004800
 8007364:	40004c00 	.word	0x40004c00
 8007368:	40005000 	.word	0x40005000
 800736c:	00f42400 	.word	0x00f42400
 8007370:	000ffcff 	.word	0x000ffcff
 8007374:	f4240000 	.word	0xf4240000

08007378 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800737a:	07da      	lsls	r2, r3, #31
{
 800737c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800737e:	d506      	bpl.n	800738e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007380:	6801      	ldr	r1, [r0, #0]
 8007382:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007384:	684a      	ldr	r2, [r1, #4]
 8007386:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800738a:	4322      	orrs	r2, r4
 800738c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800738e:	079c      	lsls	r4, r3, #30
 8007390:	d506      	bpl.n	80073a0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007392:	6801      	ldr	r1, [r0, #0]
 8007394:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007396:	684a      	ldr	r2, [r1, #4]
 8007398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800739c:	4322      	orrs	r2, r4
 800739e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073a0:	0759      	lsls	r1, r3, #29
 80073a2:	d506      	bpl.n	80073b2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a4:	6801      	ldr	r1, [r0, #0]
 80073a6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80073a8:	684a      	ldr	r2, [r1, #4]
 80073aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073ae:	4322      	orrs	r2, r4
 80073b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073b2:	071a      	lsls	r2, r3, #28
 80073b4:	d506      	bpl.n	80073c4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073b6:	6801      	ldr	r1, [r0, #0]
 80073b8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80073ba:	684a      	ldr	r2, [r1, #4]
 80073bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c0:	4322      	orrs	r2, r4
 80073c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c4:	06dc      	lsls	r4, r3, #27
 80073c6:	d506      	bpl.n	80073d6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c8:	6801      	ldr	r1, [r0, #0]
 80073ca:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d2:	4322      	orrs	r2, r4
 80073d4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d6:	0699      	lsls	r1, r3, #26
 80073d8:	d506      	bpl.n	80073e8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073da:	6801      	ldr	r1, [r0, #0]
 80073dc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80073de:	688a      	ldr	r2, [r1, #8]
 80073e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e4:	4322      	orrs	r2, r4
 80073e6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e8:	065a      	lsls	r2, r3, #25
 80073ea:	d50f      	bpl.n	800740c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073ec:	6801      	ldr	r1, [r0, #0]
 80073ee:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80073f0:	684a      	ldr	r2, [r1, #4]
 80073f2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80073f6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073fc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fe:	d105      	bne.n	800740c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007400:	684a      	ldr	r2, [r1, #4]
 8007402:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007404:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007408:	4322      	orrs	r2, r4
 800740a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	d506      	bpl.n	800741e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007410:	6802      	ldr	r2, [r0, #0]
 8007412:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007414:	6853      	ldr	r3, [r2, #4]
 8007416:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800741a:	430b      	orrs	r3, r1
 800741c:	6053      	str	r3, [r2, #4]
 800741e:	bd10      	pop	{r4, pc}

08007420 <UART_WaitOnFlagUntilTimeout>:
{
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007424:	9d06      	ldr	r5, [sp, #24]
 8007426:	4604      	mov	r4, r0
 8007428:	460f      	mov	r7, r1
 800742a:	4616      	mov	r6, r2
 800742c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742e:	6821      	ldr	r1, [r4, #0]
 8007430:	69ca      	ldr	r2, [r1, #28]
 8007432:	ea37 0302 	bics.w	r3, r7, r2
 8007436:	bf0c      	ite	eq
 8007438:	2201      	moveq	r2, #1
 800743a:	2200      	movne	r2, #0
 800743c:	42b2      	cmp	r2, r6
 800743e:	d002      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007440:	2000      	movs	r0, #0
}
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8007446:	1c6b      	adds	r3, r5, #1
 8007448:	d0f2      	beq.n	8007430 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800744a:	b99d      	cbnz	r5, 8007474 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007454:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	f022 0201 	bic.w	r2, r2, #1
 800745c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800745e:	2320      	movs	r3, #32
 8007460:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8007464:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8007468:	2300      	movs	r3, #0
 800746a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800746e:	2003      	movs	r0, #3
 8007470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007474:	f7fd fbf2 	bl	8004c5c <HAL_GetTick>
 8007478:	eba0 0008 	sub.w	r0, r0, r8
 800747c:	4285      	cmp	r5, r0
 800747e:	d2d6      	bcs.n	800742e <UART_WaitOnFlagUntilTimeout+0xe>
 8007480:	e7e4      	b.n	800744c <UART_WaitOnFlagUntilTimeout+0x2c>

08007482 <HAL_UART_Transmit>:
{
 8007482:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007486:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007488:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800748c:	2b20      	cmp	r3, #32
{
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007494:	d14a      	bne.n	800752c <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8007496:	2900      	cmp	r1, #0
 8007498:	d046      	beq.n	8007528 <HAL_UART_Transmit+0xa6>
 800749a:	2a00      	cmp	r2, #0
 800749c:	d044      	beq.n	8007528 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800749e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d042      	beq.n	800752c <HAL_UART_Transmit+0xaa>
 80074a6:	2301      	movs	r3, #1
 80074a8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	2300      	movs	r3, #0
 80074ae:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b0:	2321      	movs	r3, #33	; 0x21
 80074b2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80074b6:	f7fd fbd1 	bl	8004c5c <HAL_GetTick>
    huart->TxXferSize  = Size;
 80074ba:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80074be:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80074c0:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80074c4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c8:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 80074ca:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074cc:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 80074ce:	b952      	cbnz	r2, 80074e6 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074d0:	2140      	movs	r1, #64	; 0x40
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7ff ffa4 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 80074d8:	b958      	cbnz	r0, 80074f2 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80074da:	2320      	movs	r3, #32
 80074dc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 80074e0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80074e4:	e006      	b.n	80074f4 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074e6:	2200      	movs	r2, #0
 80074e8:	2180      	movs	r1, #128	; 0x80
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff ff98 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 80074f0:	b118      	cbz	r0, 80074fa <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 80074f2:	2003      	movs	r0, #3
}
 80074f4:	b002      	add	sp, #8
 80074f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d10d      	bne.n	8007520 <HAL_UART_Transmit+0x9e>
 8007504:	6923      	ldr	r3, [r4, #16]
 8007506:	b95b      	cbnz	r3, 8007520 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8007508:	f835 3b02 	ldrh.w	r3, [r5], #2
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007512:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8007516:	3b01      	subs	r3, #1
 8007518:	b29b      	uxth	r3, r3
 800751a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800751e:	e7d1      	b.n	80074c4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8007520:	782b      	ldrb	r3, [r5, #0]
 8007522:	8513      	strh	r3, [r2, #40]	; 0x28
 8007524:	3501      	adds	r5, #1
 8007526:	e7f4      	b.n	8007512 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8007528:	2001      	movs	r0, #1
 800752a:	e7e3      	b.n	80074f4 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800752c:	2002      	movs	r0, #2
 800752e:	e7e1      	b.n	80074f4 <HAL_UART_Transmit+0x72>

08007530 <UART_CheckIdleState>:
{
 8007530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007532:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	2600      	movs	r6, #0
 8007536:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8007538:	f7fd fb90 	bl	8004c5c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8007542:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007544:	d417      	bmi.n	8007576 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	075b      	lsls	r3, r3, #29
 800754c:	d50a      	bpl.n	8007564 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800754e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	462b      	mov	r3, r5
 8007558:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff ff5f 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8007562:	b9a0      	cbnz	r0, 800758e <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8007564:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8007566:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007568:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800756c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8007570:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8007574:	e00c      	b.n	8007590 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007576:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4632      	mov	r2, r6
 800757e:	4603      	mov	r3, r0
 8007580:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007584:	4620      	mov	r0, r4
 8007586:	f7ff ff4b 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 800758a:	2800      	cmp	r0, #0
 800758c:	d0db      	beq.n	8007546 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800758e:	2003      	movs	r0, #3
}
 8007590:	b002      	add	sp, #8
 8007592:	bd70      	pop	{r4, r5, r6, pc}

08007594 <HAL_UART_Init>:
{
 8007594:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007596:	4604      	mov	r4, r0
 8007598:	b360      	cbz	r0, 80075f4 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800759a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800759e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075a2:	b91b      	cbnz	r3, 80075ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80075a4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80075a8:	f7fa f92e 	bl	8001808 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80075ac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075ae:	2324      	movs	r3, #36	; 0x24
 80075b0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80075b4:	6813      	ldr	r3, [r2, #0]
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075bc:	4620      	mov	r0, r4
 80075be:	f7ff fd43 	bl	8007048 <UART_SetConfig>
 80075c2:	2801      	cmp	r0, #1
 80075c4:	d016      	beq.n	80075f4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c8:	b113      	cbz	r3, 80075d0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7ff fed4 	bl	8007378 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80075e8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80075ea:	601a      	str	r2, [r3, #0]
}
 80075ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80075f0:	f7ff bf9e 	b.w	8007530 <UART_CheckIdleState>
}
 80075f4:	2001      	movs	r0, #1
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075f8:	4770      	bx	lr
	...

080075fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075fe:	3b01      	subs	r3, #1
 8007600:	d101      	bne.n	8007606 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8007602:	2003      	movs	r0, #3
 8007604:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007606:	6902      	ldr	r2, [r0, #16]
 8007608:	2a00      	cmp	r2, #0
 800760a:	daf8      	bge.n	80075fe <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800760c:	6903      	ldr	r3, [r0, #16]
 800760e:	4a06      	ldr	r2, [pc, #24]	; (8007628 <USB_CoreReset+0x2c>)
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8007616:	3a01      	subs	r2, #1
 8007618:	d0f3      	beq.n	8007602 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800761a:	6903      	ldr	r3, [r0, #16]
 800761c:	f013 0301 	ands.w	r3, r3, #1
 8007620:	d1f9      	bne.n	8007616 <USB_CoreReset+0x1a>

  return HAL_OK;
 8007622:	4618      	mov	r0, r3
}
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	00030d41 	.word	0x00030d41

0800762c <USB_CoreInit>:
{
 800762c:	b084      	sub	sp, #16
 800762e:	b538      	push	{r3, r4, r5, lr}
 8007630:	ad05      	add	r5, sp, #20
 8007632:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007638:	2b01      	cmp	r3, #1
{
 800763a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800763c:	d11b      	bne.n	8007676 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800763e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007644:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007646:	68c3      	ldr	r3, [r0, #12]
 8007648:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800764c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007650:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007652:	68c3      	ldr	r3, [r0, #12]
 8007654:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007658:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800765a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800765c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800765e:	bf02      	ittt	eq
 8007660:	68c3      	ldreq	r3, [r0, #12]
 8007662:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8007666:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007668:	f7ff ffc8 	bl	80075fc <USB_CoreReset>
}
 800766c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007670:	2000      	movs	r0, #0
 8007672:	b004      	add	sp, #16
 8007674:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007676:	68c3      	ldr	r3, [r0, #12]
 8007678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767c:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800767e:	f7ff ffbd 	bl	80075fc <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007686:	63a3      	str	r3, [r4, #56]	; 0x38
 8007688:	e7f0      	b.n	800766c <USB_CoreInit+0x40>

0800768a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800768a:	6883      	ldr	r3, [r0, #8]
 800768c:	f023 0301 	bic.w	r3, r3, #1
 8007690:	6083      	str	r3, [r0, #8]
}
 8007692:	2000      	movs	r0, #0
 8007694:	4770      	bx	lr

08007696 <USB_SetCurrentMode>:
{
 8007696:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007698:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800769a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800769c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076a0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80076a2:	d108      	bne.n	80076b6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076a4:	68c3      	ldr	r3, [r0, #12]
 80076a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076aa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80076ac:	2032      	movs	r0, #50	; 0x32
 80076ae:	f7fd fadb 	bl	8004c68 <HAL_Delay>
  return HAL_OK;
 80076b2:	2000      	movs	r0, #0
 80076b4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80076b6:	b919      	cbnz	r1, 80076c0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076b8:	68c3      	ldr	r3, [r0, #12]
 80076ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076be:	e7f4      	b.n	80076aa <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80076c0:	2001      	movs	r0, #1
}
 80076c2:	bd08      	pop	{r3, pc}

080076c4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076c4:	0189      	lsls	r1, r1, #6
 80076c6:	f041 0120 	orr.w	r1, r1, #32
 80076ca:	4a06      	ldr	r2, [pc, #24]	; (80076e4 <USB_FlushTxFifo+0x20>)
 80076cc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80076ce:	3a01      	subs	r2, #1
 80076d0:	d005      	beq.n	80076de <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076d2:	6903      	ldr	r3, [r0, #16]
 80076d4:	f013 0320 	ands.w	r3, r3, #32
 80076d8:	d1f9      	bne.n	80076ce <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80076da:	4618      	mov	r0, r3
 80076dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80076de:	2003      	movs	r0, #3
}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	00030d41 	.word	0x00030d41

080076e8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076e8:	2310      	movs	r3, #16
 80076ea:	4a06      	ldr	r2, [pc, #24]	; (8007704 <USB_FlushRxFifo+0x1c>)
 80076ec:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80076ee:	3a01      	subs	r2, #1
 80076f0:	d005      	beq.n	80076fe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076f2:	6903      	ldr	r3, [r0, #16]
 80076f4:	f013 0310 	ands.w	r3, r3, #16
 80076f8:	d1f9      	bne.n	80076ee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80076fa:	4618      	mov	r0, r3
 80076fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80076fe:	2003      	movs	r0, #3
}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	00030d41 	.word	0x00030d41

08007708 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8007708:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800770c:	4319      	orrs	r1, r3
 800770e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007712:	2000      	movs	r0, #0
 8007714:	4770      	bx	lr
	...

08007718 <USB_DevInit>:
{
 8007718:	b084      	sub	sp, #16
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	4604      	mov	r4, r0
 8007720:	a807      	add	r0, sp, #28
 8007722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8007726:	2300      	movs	r3, #0
 8007728:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800772a:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800772c:	4619      	mov	r1, r3
 800772e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007732:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8007736:	3301      	adds	r3, #1
 8007738:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800773a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800773c:	d1f7      	bne.n	800772e <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800773e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007744:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8007746:	b95f      	cbnz	r7, 8007760 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800774a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800774e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007756:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007760:	2500      	movs	r5, #0
 8007762:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007766:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800776a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800776e:	2103      	movs	r1, #3
 8007770:	4620      	mov	r0, r4
 8007772:	f7ff ffc9 	bl	8007708 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007776:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800777a:	2110      	movs	r1, #16
 800777c:	4620      	mov	r0, r4
 800777e:	f7ff ffa1 	bl	80076c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff ffb0 	bl	80076e8 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8007788:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800778a:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 800778c:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800778e:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007790:	61f5      	str	r5, [r6, #28]
 8007792:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800779a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800779e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077a2:	4543      	cmp	r3, r8
 80077a4:	d12f      	bne.n	8007806 <USB_DevInit+0xee>
 80077a6:	2100      	movs	r1, #0
 80077a8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077ac:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077ae:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077b2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077b6:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077ba:	428b      	cmp	r3, r1
 80077bc:	d134      	bne.n	8007828 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077be:	6933      	ldr	r3, [r6, #16]
 80077c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077ca:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80077ce:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077d0:	69a3      	ldr	r3, [r4, #24]
 80077d2:	f043 0310 	orr.w	r3, r3, #16
 80077d6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077d8:	69a2      	ldr	r2, [r4, #24]
 80077da:	4b1c      	ldr	r3, [pc, #112]	; (800784c <USB_DevInit+0x134>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80077e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077e2:	b11b      	cbz	r3, 80077ec <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077e4:	69a3      	ldr	r3, [r4, #24]
 80077e6:	f043 0308 	orr.w	r3, r3, #8
 80077ea:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80077ec:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077ee:	bf01      	itttt	eq
 80077f0:	69a3      	ldreq	r3, [r4, #24]
 80077f2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	f043 0304 	orreq.w	r3, r3, #4
 80077fa:	61a3      	streq	r3, [r4, #24]
}
 80077fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	2000      	movs	r0, #0
 8007802:	b004      	add	sp, #16
 8007804:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007806:	f8d2 c000 	ldr.w	ip, [r2]
 800780a:	f1bc 0f00 	cmp.w	ip, #0
 800780e:	da09      	bge.n	8007824 <USB_DevInit+0x10c>
      if (i == 0U)
 8007810:	b933      	cbnz	r3, 8007820 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007812:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007814:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007816:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007818:	f8c2 e008 	str.w	lr, [r2, #8]
 800781c:	3220      	adds	r2, #32
 800781e:	e7c0      	b.n	80077a2 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007820:	6010      	str	r0, [r2, #0]
 8007822:	e7f7      	b.n	8007814 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	e7f5      	b.n	8007814 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007828:	f8d2 8000 	ldr.w	r8, [r2]
 800782c:	f1b8 0f00 	cmp.w	r8, #0
 8007830:	da0a      	bge.n	8007848 <USB_DevInit+0x130>
      if (i == 0U)
 8007832:	b939      	cbnz	r1, 8007844 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007834:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007838:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800783a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800783c:	f8c2 c008 	str.w	ip, [r2, #8]
 8007840:	3220      	adds	r2, #32
 8007842:	e7ba      	b.n	80077ba <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007844:	6015      	str	r5, [r2, #0]
 8007846:	e7f7      	b.n	8007838 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007848:	6010      	str	r0, [r2, #0]
 800784a:	e7f5      	b.n	8007838 <USB_DevInit+0x120>
 800784c:	803c3800 	.word	0x803c3800

08007850 <USB_DevDisconnect>:
{
 8007850:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007852:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007856:	f043 0302 	orr.w	r3, r3, #2
 800785a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800785e:	2003      	movs	r0, #3
 8007860:	f7fd fa02 	bl	8004c68 <HAL_Delay>
}
 8007864:	2000      	movs	r0, #0
 8007866:	bd08      	pop	{r3, pc}

08007868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800786c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800786e:	e003      	b.n	8007878 <LoopCopyDataInit>

08007870 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007872:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007874:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007876:	3104      	adds	r1, #4

08007878 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007878:	480b      	ldr	r0, [pc, #44]	; (80078a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800787c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800787e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007880:	d3f6      	bcc.n	8007870 <CopyDataInit>
	ldr	r2, =_sbss
 8007882:	4a0b      	ldr	r2, [pc, #44]	; (80078b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007884:	e002      	b.n	800788c <LoopFillZerobss>

08007886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007886:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007888:	f842 3b04 	str.w	r3, [r2], #4

0800788c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <LoopForever+0x16>)
	cmp	r2, r3
 800788e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007890:	d3f9      	bcc.n	8007886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007892:	f7fa f8db 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007896:	f000 f811 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800789a:	f7f9 fb67 	bl	8000f6c <main>

0800789e <LoopForever>:

LoopForever:
    b LoopForever
 800789e:	e7fe      	b.n	800789e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80078a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80078a4:	0800aa38 	.word	0x0800aa38
	ldr	r0, =_sdata
 80078a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80078ac:	200006e4 	.word	0x200006e4
	ldr	r2, =_sbss
 80078b0:	200006e4 	.word	0x200006e4
	ldr	r3, = _ebss
 80078b4:	20000f8c 	.word	0x20000f8c

080078b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078b8:	e7fe      	b.n	80078b8 <ADC1_2_IRQHandler>
	...

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4e0d      	ldr	r6, [pc, #52]	; (80078f4 <__libc_init_array+0x38>)
 80078c0:	4c0d      	ldr	r4, [pc, #52]	; (80078f8 <__libc_init_array+0x3c>)
 80078c2:	1ba4      	subs	r4, r4, r6
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	2500      	movs	r5, #0
 80078c8:	42a5      	cmp	r5, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	4e0b      	ldr	r6, [pc, #44]	; (80078fc <__libc_init_array+0x40>)
 80078ce:	4c0c      	ldr	r4, [pc, #48]	; (8007900 <__libc_init_array+0x44>)
 80078d0:	f002 fdd0 	bl	800a474 <_init>
 80078d4:	1ba4      	subs	r4, r4, r6
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	2500      	movs	r5, #0
 80078da:	42a5      	cmp	r5, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078e4:	4798      	blx	r3
 80078e6:	3501      	adds	r5, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ee:	4798      	blx	r3
 80078f0:	3501      	adds	r5, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	0800aa30 	.word	0x0800aa30
 80078f8:	0800aa30 	.word	0x0800aa30
 80078fc:	0800aa30 	.word	0x0800aa30
 8007900:	0800aa34 	.word	0x0800aa34

08007904 <memcpy>:
 8007904:	b510      	push	{r4, lr}
 8007906:	1e43      	subs	r3, r0, #1
 8007908:	440a      	add	r2, r1
 800790a:	4291      	cmp	r1, r2
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	bd10      	pop	{r4, pc}
 8007910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007918:	e7f7      	b.n	800790a <memcpy+0x6>

0800791a <memset>:
 800791a:	4402      	add	r2, r0
 800791c:	4603      	mov	r3, r0
 800791e:	4293      	cmp	r3, r2
 8007920:	d100      	bne.n	8007924 <memset+0xa>
 8007922:	4770      	bx	lr
 8007924:	f803 1b01 	strb.w	r1, [r3], #1
 8007928:	e7f9      	b.n	800791e <memset+0x4>

0800792a <__cvt>:
 800792a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800792e:	ec55 4b10 	vmov	r4, r5, d0
 8007932:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007934:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007938:	2d00      	cmp	r5, #0
 800793a:	460e      	mov	r6, r1
 800793c:	4691      	mov	r9, r2
 800793e:	4619      	mov	r1, r3
 8007940:	bfb8      	it	lt
 8007942:	4622      	movlt	r2, r4
 8007944:	462b      	mov	r3, r5
 8007946:	f027 0720 	bic.w	r7, r7, #32
 800794a:	bfbb      	ittet	lt
 800794c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007950:	461d      	movlt	r5, r3
 8007952:	2300      	movge	r3, #0
 8007954:	232d      	movlt	r3, #45	; 0x2d
 8007956:	bfb8      	it	lt
 8007958:	4614      	movlt	r4, r2
 800795a:	2f46      	cmp	r7, #70	; 0x46
 800795c:	700b      	strb	r3, [r1, #0]
 800795e:	d004      	beq.n	800796a <__cvt+0x40>
 8007960:	2f45      	cmp	r7, #69	; 0x45
 8007962:	d100      	bne.n	8007966 <__cvt+0x3c>
 8007964:	3601      	adds	r6, #1
 8007966:	2102      	movs	r1, #2
 8007968:	e000      	b.n	800796c <__cvt+0x42>
 800796a:	2103      	movs	r1, #3
 800796c:	ab03      	add	r3, sp, #12
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	ab02      	add	r3, sp, #8
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4632      	mov	r2, r6
 8007976:	4653      	mov	r3, sl
 8007978:	ec45 4b10 	vmov	d0, r4, r5
 800797c:	f000 fe38 	bl	80085f0 <_dtoa_r>
 8007980:	2f47      	cmp	r7, #71	; 0x47
 8007982:	4680      	mov	r8, r0
 8007984:	d102      	bne.n	800798c <__cvt+0x62>
 8007986:	f019 0f01 	tst.w	r9, #1
 800798a:	d026      	beq.n	80079da <__cvt+0xb0>
 800798c:	2f46      	cmp	r7, #70	; 0x46
 800798e:	eb08 0906 	add.w	r9, r8, r6
 8007992:	d111      	bne.n	80079b8 <__cvt+0x8e>
 8007994:	f898 3000 	ldrb.w	r3, [r8]
 8007998:	2b30      	cmp	r3, #48	; 0x30
 800799a:	d10a      	bne.n	80079b2 <__cvt+0x88>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4620      	mov	r0, r4
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f9 f88c 	bl	8000ac0 <__aeabi_dcmpeq>
 80079a8:	b918      	cbnz	r0, 80079b2 <__cvt+0x88>
 80079aa:	f1c6 0601 	rsb	r6, r6, #1
 80079ae:	f8ca 6000 	str.w	r6, [sl]
 80079b2:	f8da 3000 	ldr.w	r3, [sl]
 80079b6:	4499      	add	r9, r3
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f9 f87e 	bl	8000ac0 <__aeabi_dcmpeq>
 80079c4:	b938      	cbnz	r0, 80079d6 <__cvt+0xac>
 80079c6:	2230      	movs	r2, #48	; 0x30
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	4599      	cmp	r9, r3
 80079cc:	d905      	bls.n	80079da <__cvt+0xb0>
 80079ce:	1c59      	adds	r1, r3, #1
 80079d0:	9103      	str	r1, [sp, #12]
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e7f8      	b.n	80079c8 <__cvt+0x9e>
 80079d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079de:	eba3 0308 	sub.w	r3, r3, r8
 80079e2:	4640      	mov	r0, r8
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	b004      	add	sp, #16
 80079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080079ec <__exponent>:
 80079ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ee:	4603      	mov	r3, r0
 80079f0:	2900      	cmp	r1, #0
 80079f2:	bfb8      	it	lt
 80079f4:	4249      	neglt	r1, r1
 80079f6:	f803 2b02 	strb.w	r2, [r3], #2
 80079fa:	bfb4      	ite	lt
 80079fc:	222d      	movlt	r2, #45	; 0x2d
 80079fe:	222b      	movge	r2, #43	; 0x2b
 8007a00:	2909      	cmp	r1, #9
 8007a02:	7042      	strb	r2, [r0, #1]
 8007a04:	dd20      	ble.n	8007a48 <__exponent+0x5c>
 8007a06:	f10d 0207 	add.w	r2, sp, #7
 8007a0a:	4617      	mov	r7, r2
 8007a0c:	260a      	movs	r6, #10
 8007a0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a12:	fb06 1115 	mls	r1, r6, r5, r1
 8007a16:	3130      	adds	r1, #48	; 0x30
 8007a18:	2d09      	cmp	r5, #9
 8007a1a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a1e:	f102 34ff 	add.w	r4, r2, #4294967295
 8007a22:	4629      	mov	r1, r5
 8007a24:	dc09      	bgt.n	8007a3a <__exponent+0x4e>
 8007a26:	3130      	adds	r1, #48	; 0x30
 8007a28:	3a02      	subs	r2, #2
 8007a2a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a2e:	42ba      	cmp	r2, r7
 8007a30:	461c      	mov	r4, r3
 8007a32:	d304      	bcc.n	8007a3e <__exponent+0x52>
 8007a34:	1a20      	subs	r0, r4, r0
 8007a36:	b003      	add	sp, #12
 8007a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	e7e7      	b.n	8007a0e <__exponent+0x22>
 8007a3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f2      	b.n	8007a2e <__exponent+0x42>
 8007a48:	2230      	movs	r2, #48	; 0x30
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	4411      	add	r1, r2
 8007a4e:	f804 2b02 	strb.w	r2, [r4], #2
 8007a52:	7059      	strb	r1, [r3, #1]
 8007a54:	e7ee      	b.n	8007a34 <__exponent+0x48>
	...

08007a58 <_printf_float>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	b08d      	sub	sp, #52	; 0x34
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007a64:	4616      	mov	r6, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	4605      	mov	r5, r0
 8007a6a:	f001 fd0b 	bl	8009484 <_localeconv_r>
 8007a6e:	6803      	ldr	r3, [r0, #0]
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f8 fbac 	bl	80001d0 <strlen>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a80:	9005      	str	r0, [sp, #20]
 8007a82:	3307      	adds	r3, #7
 8007a84:	f023 0307 	bic.w	r3, r3, #7
 8007a88:	f103 0208 	add.w	r2, r3, #8
 8007a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a90:	f8d4 b000 	ldr.w	fp, [r4]
 8007a94:	f8c8 2000 	str.w	r2, [r8]
 8007a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007aa0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007aa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007aa8:	9307      	str	r3, [sp, #28]
 8007aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab2:	4ba5      	ldr	r3, [pc, #660]	; (8007d48 <_printf_float+0x2f0>)
 8007ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab8:	f7f9 f834 	bl	8000b24 <__aeabi_dcmpun>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f040 81fb 	bne.w	8007eb8 <_printf_float+0x460>
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	4ba0      	ldr	r3, [pc, #640]	; (8007d48 <_printf_float+0x2f0>)
 8007ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007acc:	f7f9 f80c 	bl	8000ae8 <__aeabi_dcmple>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f040 81f1 	bne.w	8007eb8 <_printf_float+0x460>
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fff9 	bl	8000ad4 <__aeabi_dcmplt>
 8007ae2:	b110      	cbz	r0, 8007aea <_printf_float+0x92>
 8007ae4:	232d      	movs	r3, #45	; 0x2d
 8007ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aea:	4b98      	ldr	r3, [pc, #608]	; (8007d4c <_printf_float+0x2f4>)
 8007aec:	4a98      	ldr	r2, [pc, #608]	; (8007d50 <_printf_float+0x2f8>)
 8007aee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007af2:	bf8c      	ite	hi
 8007af4:	4690      	movhi	r8, r2
 8007af6:	4698      	movls	r8, r3
 8007af8:	2303      	movs	r3, #3
 8007afa:	f02b 0204 	bic.w	r2, fp, #4
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	f04f 0900 	mov.w	r9, #0
 8007b06:	9700      	str	r7, [sp, #0]
 8007b08:	4633      	mov	r3, r6
 8007b0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f9e2 	bl	8007ed8 <_printf_common>
 8007b14:	3001      	adds	r0, #1
 8007b16:	f040 8093 	bne.w	8007c40 <_printf_float+0x1e8>
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	b00d      	add	sp, #52	; 0x34
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	1c4b      	adds	r3, r1, #1
 8007b28:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007b2c:	d13f      	bne.n	8007bae <_printf_float+0x156>
 8007b2e:	2306      	movs	r3, #6
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	ab0a      	add	r3, sp, #40	; 0x28
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	ab09      	add	r3, sp, #36	; 0x24
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	ec49 8b10 	vmov	d0, r8, r9
 8007b42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b46:	6022      	str	r2, [r4, #0]
 8007b48:	f8cd a004 	str.w	sl, [sp, #4]
 8007b4c:	6861      	ldr	r1, [r4, #4]
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7ff feeb 	bl	800792a <__cvt>
 8007b54:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007b58:	2b47      	cmp	r3, #71	; 0x47
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	d109      	bne.n	8007b72 <_printf_float+0x11a>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	1cd8      	adds	r0, r3, #3
 8007b62:	db02      	blt.n	8007b6a <_printf_float+0x112>
 8007b64:	6862      	ldr	r2, [r4, #4]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	dd57      	ble.n	8007c1a <_printf_float+0x1c2>
 8007b6a:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b6e:	fa5f fa8a 	uxtb.w	sl, sl
 8007b72:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b78:	d834      	bhi.n	8007be4 <_printf_float+0x18c>
 8007b7a:	3901      	subs	r1, #1
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b82:	9109      	str	r1, [sp, #36]	; 0x24
 8007b84:	f7ff ff32 	bl	80079ec <__exponent>
 8007b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b8a:	1883      	adds	r3, r0, r2
 8007b8c:	2a01      	cmp	r2, #1
 8007b8e:	4681      	mov	r9, r0
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	dc02      	bgt.n	8007b9a <_printf_float+0x142>
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	07d1      	lsls	r1, r2, #31
 8007b98:	d501      	bpl.n	8007b9e <_printf_float+0x146>
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0af      	beq.n	8007b06 <_printf_float+0xae>
 8007ba6:	232d      	movs	r3, #45	; 0x2d
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	e7ab      	b.n	8007b06 <_printf_float+0xae>
 8007bae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007bb2:	d002      	beq.n	8007bba <_printf_float+0x162>
 8007bb4:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007bb8:	d1bb      	bne.n	8007b32 <_printf_float+0xda>
 8007bba:	b189      	cbz	r1, 8007be0 <_printf_float+0x188>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9303      	str	r3, [sp, #12]
 8007bc0:	ab0a      	add	r3, sp, #40	; 0x28
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	ab09      	add	r3, sp, #36	; 0x24
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	ec49 8b10 	vmov	d0, r8, r9
 8007bcc:	6022      	str	r2, [r4, #0]
 8007bce:	f8cd a004 	str.w	sl, [sp, #4]
 8007bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7ff fea7 	bl	800792a <__cvt>
 8007bdc:	4680      	mov	r8, r0
 8007bde:	e7be      	b.n	8007b5e <_printf_float+0x106>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e7a5      	b.n	8007b30 <_printf_float+0xd8>
 8007be4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007be8:	d119      	bne.n	8007c1e <_printf_float+0x1c6>
 8007bea:	2900      	cmp	r1, #0
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	dd0c      	ble.n	8007c0a <_printf_float+0x1b2>
 8007bf0:	6121      	str	r1, [r4, #16]
 8007bf2:	b913      	cbnz	r3, 8007bfa <_printf_float+0x1a2>
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	07d2      	lsls	r2, r2, #31
 8007bf8:	d502      	bpl.n	8007c00 <_printf_float+0x1a8>
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	440b      	add	r3, r1
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c02:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c04:	f04f 0900 	mov.w	r9, #0
 8007c08:	e7c9      	b.n	8007b9e <_printf_float+0x146>
 8007c0a:	b913      	cbnz	r3, 8007c12 <_printf_float+0x1ba>
 8007c0c:	6822      	ldr	r2, [r4, #0]
 8007c0e:	07d0      	lsls	r0, r2, #31
 8007c10:	d501      	bpl.n	8007c16 <_printf_float+0x1be>
 8007c12:	3302      	adds	r3, #2
 8007c14:	e7f3      	b.n	8007bfe <_printf_float+0x1a6>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7f1      	b.n	8007bfe <_printf_float+0x1a6>
 8007c1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c22:	4293      	cmp	r3, r2
 8007c24:	db05      	blt.n	8007c32 <_printf_float+0x1da>
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	07d1      	lsls	r1, r2, #31
 8007c2c:	d5e8      	bpl.n	8007c00 <_printf_float+0x1a8>
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7e5      	b.n	8007bfe <_printf_float+0x1a6>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfd4      	ite	le
 8007c36:	f1c3 0302 	rsble	r3, r3, #2
 8007c3a:	2301      	movgt	r3, #1
 8007c3c:	4413      	add	r3, r2
 8007c3e:	e7de      	b.n	8007bfe <_printf_float+0x1a6>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	055a      	lsls	r2, r3, #21
 8007c44:	d407      	bmi.n	8007c56 <_printf_float+0x1fe>
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	4642      	mov	r2, r8
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	d12b      	bne.n	8007cac <_printf_float+0x254>
 8007c54:	e761      	b.n	8007b1a <_printf_float+0xc2>
 8007c56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c5a:	f240 80e2 	bls.w	8007e22 <_printf_float+0x3ca>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2300      	movs	r3, #0
 8007c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c66:	f7f8 ff2b 	bl	8000ac0 <__aeabi_dcmpeq>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d03c      	beq.n	8007ce8 <_printf_float+0x290>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4a38      	ldr	r2, [pc, #224]	; (8007d54 <_printf_float+0x2fc>)
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f af4e 	beq.w	8007b1a <_printf_float+0xc2>
 8007c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c82:	429a      	cmp	r2, r3
 8007c84:	db02      	blt.n	8007c8c <_printf_float+0x234>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	07d8      	lsls	r0, r3, #31
 8007c8a:	d50f      	bpl.n	8007cac <_printf_float+0x254>
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	9a04      	ldr	r2, [sp, #16]
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f af3f 	beq.w	8007b1a <_printf_float+0xc2>
 8007c9c:	f04f 0800 	mov.w	r8, #0
 8007ca0:	f104 091a 	add.w	r9, r4, #26
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4598      	cmp	r8, r3
 8007caa:	db12      	blt.n	8007cd2 <_printf_float+0x27a>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	079b      	lsls	r3, r3, #30
 8007cb0:	d509      	bpl.n	8007cc6 <_printf_float+0x26e>
 8007cb2:	f04f 0800 	mov.w	r8, #0
 8007cb6:	f104 0919 	add.w	r9, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	4598      	cmp	r8, r3
 8007cc2:	f2c0 80ee 	blt.w	8007ea2 <_printf_float+0x44a>
 8007cc6:	68e0      	ldr	r0, [r4, #12]
 8007cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cca:	4298      	cmp	r0, r3
 8007ccc:	bfb8      	it	lt
 8007cce:	4618      	movlt	r0, r3
 8007cd0:	e725      	b.n	8007b1e <_printf_float+0xc6>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	464a      	mov	r2, r9
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f af1c 	beq.w	8007b1a <_printf_float+0xc2>
 8007ce2:	f108 0801 	add.w	r8, r8, #1
 8007ce6:	e7dd      	b.n	8007ca4 <_printf_float+0x24c>
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc34      	bgt.n	8007d58 <_printf_float+0x300>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <_printf_float+0x2fc>)
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f af0e 	beq.w	8007b1a <_printf_float+0xc2>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	b923      	cbnz	r3, 8007d0c <_printf_float+0x2b4>
 8007d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d04:	b913      	cbnz	r3, 8007d0c <_printf_float+0x2b4>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	07d9      	lsls	r1, r3, #31
 8007d0a:	d5cf      	bpl.n	8007cac <_printf_float+0x254>
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f aeff 	beq.w	8007b1a <_printf_float+0xc2>
 8007d1c:	f04f 0900 	mov.w	r9, #0
 8007d20:	f104 0a1a 	add.w	sl, r4, #26
 8007d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d26:	425b      	negs	r3, r3
 8007d28:	4599      	cmp	r9, r3
 8007d2a:	db01      	blt.n	8007d30 <_printf_float+0x2d8>
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	e78b      	b.n	8007c48 <_printf_float+0x1f0>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b8      	blx	r7
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f43f aeed 	beq.w	8007b1a <_printf_float+0xc2>
 8007d40:	f109 0901 	add.w	r9, r9, #1
 8007d44:	e7ee      	b.n	8007d24 <_printf_float+0x2cc>
 8007d46:	bf00      	nop
 8007d48:	7fefffff 	.word	0x7fefffff
 8007d4c:	0800a76c 	.word	0x0800a76c
 8007d50:	0800a770 	.word	0x0800a770
 8007d54:	0800a5fe 	.word	0x0800a5fe
 8007d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	bfa8      	it	ge
 8007d60:	461a      	movge	r2, r3
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	4691      	mov	r9, r2
 8007d66:	dc38      	bgt.n	8007dda <_printf_float+0x382>
 8007d68:	f104 031a 	add.w	r3, r4, #26
 8007d6c:	f04f 0b00 	mov.w	fp, #0
 8007d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d74:	9306      	str	r3, [sp, #24]
 8007d76:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007d7a:	ebaa 0309 	sub.w	r3, sl, r9
 8007d7e:	459b      	cmp	fp, r3
 8007d80:	db33      	blt.n	8007dea <_printf_float+0x392>
 8007d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d86:	429a      	cmp	r2, r3
 8007d88:	db3a      	blt.n	8007e00 <_printf_float+0x3a8>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	07da      	lsls	r2, r3, #31
 8007d8e:	d437      	bmi.n	8007e00 <_printf_float+0x3a8>
 8007d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d94:	eba3 020a 	sub.w	r2, r3, sl
 8007d98:	eba3 0901 	sub.w	r9, r3, r1
 8007d9c:	4591      	cmp	r9, r2
 8007d9e:	bfa8      	it	ge
 8007da0:	4691      	movge	r9, r2
 8007da2:	f1b9 0f00 	cmp.w	r9, #0
 8007da6:	dc33      	bgt.n	8007e10 <_printf_float+0x3b8>
 8007da8:	f04f 0800 	mov.w	r8, #0
 8007dac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007db0:	f104 0a1a 	add.w	sl, r4, #26
 8007db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	eba3 0309 	sub.w	r3, r3, r9
 8007dbe:	4598      	cmp	r8, r3
 8007dc0:	f6bf af74 	bge.w	8007cac <_printf_float+0x254>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f aea3 	beq.w	8007b1a <_printf_float+0xc2>
 8007dd4:	f108 0801 	add.w	r8, r8, #1
 8007dd8:	e7ec      	b.n	8007db4 <_printf_float+0x35c>
 8007dda:	4613      	mov	r3, r2
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4642      	mov	r2, r8
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	d1bf      	bne.n	8007d68 <_printf_float+0x310>
 8007de8:	e697      	b.n	8007b1a <_printf_float+0xc2>
 8007dea:	2301      	movs	r3, #1
 8007dec:	9a06      	ldr	r2, [sp, #24]
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f ae90 	beq.w	8007b1a <_printf_float+0xc2>
 8007dfa:	f10b 0b01 	add.w	fp, fp, #1
 8007dfe:	e7ba      	b.n	8007d76 <_printf_float+0x31e>
 8007e00:	9b05      	ldr	r3, [sp, #20]
 8007e02:	9a04      	ldr	r2, [sp, #16]
 8007e04:	4631      	mov	r1, r6
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d1c0      	bne.n	8007d90 <_printf_float+0x338>
 8007e0e:	e684      	b.n	8007b1a <_printf_float+0xc2>
 8007e10:	464b      	mov	r3, r9
 8007e12:	eb08 020a 	add.w	r2, r8, sl
 8007e16:	4631      	mov	r1, r6
 8007e18:	4628      	mov	r0, r5
 8007e1a:	47b8      	blx	r7
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	d1c3      	bne.n	8007da8 <_printf_float+0x350>
 8007e20:	e67b      	b.n	8007b1a <_printf_float+0xc2>
 8007e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e24:	2a01      	cmp	r2, #1
 8007e26:	dc01      	bgt.n	8007e2c <_printf_float+0x3d4>
 8007e28:	07db      	lsls	r3, r3, #31
 8007e2a:	d537      	bpl.n	8007e9c <_printf_float+0x444>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	4642      	mov	r2, r8
 8007e30:	4631      	mov	r1, r6
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b8      	blx	r7
 8007e36:	3001      	adds	r0, #1
 8007e38:	f43f ae6f 	beq.w	8007b1a <_printf_float+0xc2>
 8007e3c:	9b05      	ldr	r3, [sp, #20]
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f ae67 	beq.w	8007b1a <_printf_float+0xc2>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e54:	f7f8 fe34 	bl	8000ac0 <__aeabi_dcmpeq>
 8007e58:	b158      	cbz	r0, 8007e72 <_printf_float+0x41a>
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	f104 0a1a 	add.w	sl, r4, #26
 8007e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e64:	3b01      	subs	r3, #1
 8007e66:	4598      	cmp	r8, r3
 8007e68:	db0d      	blt.n	8007e86 <_printf_float+0x42e>
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e70:	e6eb      	b.n	8007c4a <_printf_float+0x1f2>
 8007e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e74:	f108 0201 	add.w	r2, r8, #1
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	d1f2      	bne.n	8007e6a <_printf_float+0x412>
 8007e84:	e649      	b.n	8007b1a <_printf_float+0xc2>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4652      	mov	r2, sl
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	f43f ae42 	beq.w	8007b1a <_printf_float+0xc2>
 8007e96:	f108 0801 	add.w	r8, r8, #1
 8007e9a:	e7e2      	b.n	8007e62 <_printf_float+0x40a>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	e7eb      	b.n	8007e7a <_printf_float+0x422>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	464a      	mov	r2, r9
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b8      	blx	r7
 8007eac:	3001      	adds	r0, #1
 8007eae:	f43f ae34 	beq.w	8007b1a <_printf_float+0xc2>
 8007eb2:	f108 0801 	add.w	r8, r8, #1
 8007eb6:	e700      	b.n	8007cba <_printf_float+0x262>
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe30 	bl	8000b24 <__aeabi_dcmpun>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f ae2d 	beq.w	8007b24 <_printf_float+0xcc>
 8007eca:	4b01      	ldr	r3, [pc, #4]	; (8007ed0 <_printf_float+0x478>)
 8007ecc:	4a01      	ldr	r2, [pc, #4]	; (8007ed4 <_printf_float+0x47c>)
 8007ece:	e60e      	b.n	8007aee <_printf_float+0x96>
 8007ed0:	0800a774 	.word	0x0800a774
 8007ed4:	0800a778 	.word	0x0800a778

08007ed8 <_printf_common>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	4691      	mov	r9, r2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	688a      	ldr	r2, [r1, #8]
 8007ee2:	690b      	ldr	r3, [r1, #16]
 8007ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	bfb8      	it	lt
 8007eec:	4613      	movlt	r3, r2
 8007eee:	f8c9 3000 	str.w	r3, [r9]
 8007ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460c      	mov	r4, r1
 8007efa:	b112      	cbz	r2, 8007f02 <_printf_common+0x2a>
 8007efc:	3301      	adds	r3, #1
 8007efe:	f8c9 3000 	str.w	r3, [r9]
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	0699      	lsls	r1, r3, #26
 8007f06:	bf42      	ittt	mi
 8007f08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f0c:	3302      	addmi	r3, #2
 8007f0e:	f8c9 3000 	strmi.w	r3, [r9]
 8007f12:	6825      	ldr	r5, [r4, #0]
 8007f14:	f015 0506 	ands.w	r5, r5, #6
 8007f18:	d107      	bne.n	8007f2a <_printf_common+0x52>
 8007f1a:	f104 0a19 	add.w	sl, r4, #25
 8007f1e:	68e3      	ldr	r3, [r4, #12]
 8007f20:	f8d9 2000 	ldr.w	r2, [r9]
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	429d      	cmp	r5, r3
 8007f28:	db29      	blt.n	8007f7e <_printf_common+0xa6>
 8007f2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	3300      	adds	r3, #0
 8007f32:	bf18      	it	ne
 8007f34:	2301      	movne	r3, #1
 8007f36:	0692      	lsls	r2, r2, #26
 8007f38:	d42e      	bmi.n	8007f98 <_printf_common+0xc0>
 8007f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f3e:	4639      	mov	r1, r7
 8007f40:	4630      	mov	r0, r6
 8007f42:	47c0      	blx	r8
 8007f44:	3001      	adds	r0, #1
 8007f46:	d021      	beq.n	8007f8c <_printf_common+0xb4>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	68e5      	ldr	r5, [r4, #12]
 8007f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f50:	f003 0306 	and.w	r3, r3, #6
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	bf08      	it	eq
 8007f58:	1aad      	subeq	r5, r5, r2
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	bf0c      	ite	eq
 8007f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f64:	2500      	movne	r5, #0
 8007f66:	4293      	cmp	r3, r2
 8007f68:	bfc4      	itt	gt
 8007f6a:	1a9b      	subgt	r3, r3, r2
 8007f6c:	18ed      	addgt	r5, r5, r3
 8007f6e:	f04f 0900 	mov.w	r9, #0
 8007f72:	341a      	adds	r4, #26
 8007f74:	454d      	cmp	r5, r9
 8007f76:	d11b      	bne.n	8007fb0 <_printf_common+0xd8>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7e:	2301      	movs	r3, #1
 8007f80:	4652      	mov	r2, sl
 8007f82:	4639      	mov	r1, r7
 8007f84:	4630      	mov	r0, r6
 8007f86:	47c0      	blx	r8
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d103      	bne.n	8007f94 <_printf_common+0xbc>
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f94:	3501      	adds	r5, #1
 8007f96:	e7c2      	b.n	8007f1e <_printf_common+0x46>
 8007f98:	18e1      	adds	r1, r4, r3
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	2030      	movs	r0, #48	; 0x30
 8007f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fa2:	4422      	add	r2, r4
 8007fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fac:	3302      	adds	r3, #2
 8007fae:	e7c4      	b.n	8007f3a <_printf_common+0x62>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	47c0      	blx	r8
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d0e6      	beq.n	8007f8c <_printf_common+0xb4>
 8007fbe:	f109 0901 	add.w	r9, r9, #1
 8007fc2:	e7d7      	b.n	8007f74 <_printf_common+0x9c>

08007fc4 <_printf_i>:
 8007fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4617      	mov	r7, r2
 8007fca:	7e0a      	ldrb	r2, [r1, #24]
 8007fcc:	b085      	sub	sp, #20
 8007fce:	2a6e      	cmp	r2, #110	; 0x6e
 8007fd0:	4698      	mov	r8, r3
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fd8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007fdc:	f000 80bc 	beq.w	8008158 <_printf_i+0x194>
 8007fe0:	d81a      	bhi.n	8008018 <_printf_i+0x54>
 8007fe2:	2a63      	cmp	r2, #99	; 0x63
 8007fe4:	d02e      	beq.n	8008044 <_printf_i+0x80>
 8007fe6:	d80a      	bhi.n	8007ffe <_printf_i+0x3a>
 8007fe8:	2a00      	cmp	r2, #0
 8007fea:	f000 80c8 	beq.w	800817e <_printf_i+0x1ba>
 8007fee:	2a58      	cmp	r2, #88	; 0x58
 8007ff0:	f000 808a 	beq.w	8008108 <_printf_i+0x144>
 8007ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ff8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007ffc:	e02a      	b.n	8008054 <_printf_i+0x90>
 8007ffe:	2a64      	cmp	r2, #100	; 0x64
 8008000:	d001      	beq.n	8008006 <_printf_i+0x42>
 8008002:	2a69      	cmp	r2, #105	; 0x69
 8008004:	d1f6      	bne.n	8007ff4 <_printf_i+0x30>
 8008006:	6821      	ldr	r1, [r4, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800800e:	d023      	beq.n	8008058 <_printf_i+0x94>
 8008010:	1d11      	adds	r1, r2, #4
 8008012:	6019      	str	r1, [r3, #0]
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	e027      	b.n	8008068 <_printf_i+0xa4>
 8008018:	2a73      	cmp	r2, #115	; 0x73
 800801a:	f000 80b4 	beq.w	8008186 <_printf_i+0x1c2>
 800801e:	d808      	bhi.n	8008032 <_printf_i+0x6e>
 8008020:	2a6f      	cmp	r2, #111	; 0x6f
 8008022:	d02a      	beq.n	800807a <_printf_i+0xb6>
 8008024:	2a70      	cmp	r2, #112	; 0x70
 8008026:	d1e5      	bne.n	8007ff4 <_printf_i+0x30>
 8008028:	680a      	ldr	r2, [r1, #0]
 800802a:	f042 0220 	orr.w	r2, r2, #32
 800802e:	600a      	str	r2, [r1, #0]
 8008030:	e003      	b.n	800803a <_printf_i+0x76>
 8008032:	2a75      	cmp	r2, #117	; 0x75
 8008034:	d021      	beq.n	800807a <_printf_i+0xb6>
 8008036:	2a78      	cmp	r2, #120	; 0x78
 8008038:	d1dc      	bne.n	8007ff4 <_printf_i+0x30>
 800803a:	2278      	movs	r2, #120	; 0x78
 800803c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008040:	496e      	ldr	r1, [pc, #440]	; (80081fc <_printf_i+0x238>)
 8008042:	e064      	b.n	800810e <_printf_i+0x14a>
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800804a:	1d11      	adds	r1, r2, #4
 800804c:	6019      	str	r1, [r3, #0]
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008054:	2301      	movs	r3, #1
 8008056:	e0a3      	b.n	80081a0 <_printf_i+0x1dc>
 8008058:	f011 0f40 	tst.w	r1, #64	; 0x40
 800805c:	f102 0104 	add.w	r1, r2, #4
 8008060:	6019      	str	r1, [r3, #0]
 8008062:	d0d7      	beq.n	8008014 <_printf_i+0x50>
 8008064:	f9b2 3000 	ldrsh.w	r3, [r2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	da03      	bge.n	8008074 <_printf_i+0xb0>
 800806c:	222d      	movs	r2, #45	; 0x2d
 800806e:	425b      	negs	r3, r3
 8008070:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008074:	4962      	ldr	r1, [pc, #392]	; (8008200 <_printf_i+0x23c>)
 8008076:	220a      	movs	r2, #10
 8008078:	e017      	b.n	80080aa <_printf_i+0xe6>
 800807a:	6820      	ldr	r0, [r4, #0]
 800807c:	6819      	ldr	r1, [r3, #0]
 800807e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008082:	d003      	beq.n	800808c <_printf_i+0xc8>
 8008084:	1d08      	adds	r0, r1, #4
 8008086:	6018      	str	r0, [r3, #0]
 8008088:	680b      	ldr	r3, [r1, #0]
 800808a:	e006      	b.n	800809a <_printf_i+0xd6>
 800808c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008090:	f101 0004 	add.w	r0, r1, #4
 8008094:	6018      	str	r0, [r3, #0]
 8008096:	d0f7      	beq.n	8008088 <_printf_i+0xc4>
 8008098:	880b      	ldrh	r3, [r1, #0]
 800809a:	4959      	ldr	r1, [pc, #356]	; (8008200 <_printf_i+0x23c>)
 800809c:	2a6f      	cmp	r2, #111	; 0x6f
 800809e:	bf14      	ite	ne
 80080a0:	220a      	movne	r2, #10
 80080a2:	2208      	moveq	r2, #8
 80080a4:	2000      	movs	r0, #0
 80080a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80080aa:	6865      	ldr	r5, [r4, #4]
 80080ac:	60a5      	str	r5, [r4, #8]
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	f2c0 809c 	blt.w	80081ec <_printf_i+0x228>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	f020 0004 	bic.w	r0, r0, #4
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d13f      	bne.n	8008140 <_printf_i+0x17c>
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	f040 8095 	bne.w	80081f0 <_printf_i+0x22c>
 80080c6:	4675      	mov	r5, lr
 80080c8:	2a08      	cmp	r2, #8
 80080ca:	d10b      	bne.n	80080e4 <_printf_i+0x120>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d508      	bpl.n	80080e4 <_printf_i+0x120>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	6862      	ldr	r2, [r4, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	bfde      	ittt	le
 80080da:	2330      	movle	r3, #48	; 0x30
 80080dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080e4:	ebae 0305 	sub.w	r3, lr, r5
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	f8cd 8000 	str.w	r8, [sp]
 80080ee:	463b      	mov	r3, r7
 80080f0:	aa03      	add	r2, sp, #12
 80080f2:	4621      	mov	r1, r4
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff feef 	bl	8007ed8 <_printf_common>
 80080fa:	3001      	adds	r0, #1
 80080fc:	d155      	bne.n	80081aa <_printf_i+0x1e6>
 80080fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008102:	b005      	add	sp, #20
 8008104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008108:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800810c:	493c      	ldr	r1, [pc, #240]	; (8008200 <_printf_i+0x23c>)
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008116:	f100 0504 	add.w	r5, r0, #4
 800811a:	601d      	str	r5, [r3, #0]
 800811c:	d001      	beq.n	8008122 <_printf_i+0x15e>
 800811e:	6803      	ldr	r3, [r0, #0]
 8008120:	e002      	b.n	8008128 <_printf_i+0x164>
 8008122:	0655      	lsls	r5, r2, #25
 8008124:	d5fb      	bpl.n	800811e <_printf_i+0x15a>
 8008126:	8803      	ldrh	r3, [r0, #0]
 8008128:	07d0      	lsls	r0, r2, #31
 800812a:	bf44      	itt	mi
 800812c:	f042 0220 	orrmi.w	r2, r2, #32
 8008130:	6022      	strmi	r2, [r4, #0]
 8008132:	b91b      	cbnz	r3, 800813c <_printf_i+0x178>
 8008134:	6822      	ldr	r2, [r4, #0]
 8008136:	f022 0220 	bic.w	r2, r2, #32
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	2210      	movs	r2, #16
 800813e:	e7b1      	b.n	80080a4 <_printf_i+0xe0>
 8008140:	4675      	mov	r5, lr
 8008142:	fbb3 f0f2 	udiv	r0, r3, r2
 8008146:	fb02 3310 	mls	r3, r2, r0, r3
 800814a:	5ccb      	ldrb	r3, [r1, r3]
 800814c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008150:	4603      	mov	r3, r0
 8008152:	2800      	cmp	r0, #0
 8008154:	d1f5      	bne.n	8008142 <_printf_i+0x17e>
 8008156:	e7b7      	b.n	80080c8 <_printf_i+0x104>
 8008158:	6808      	ldr	r0, [r1, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	6949      	ldr	r1, [r1, #20]
 800815e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008162:	d004      	beq.n	800816e <_printf_i+0x1aa>
 8008164:	1d10      	adds	r0, r2, #4
 8008166:	6018      	str	r0, [r3, #0]
 8008168:	6813      	ldr	r3, [r2, #0]
 800816a:	6019      	str	r1, [r3, #0]
 800816c:	e007      	b.n	800817e <_printf_i+0x1ba>
 800816e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008172:	f102 0004 	add.w	r0, r2, #4
 8008176:	6018      	str	r0, [r3, #0]
 8008178:	6813      	ldr	r3, [r2, #0]
 800817a:	d0f6      	beq.n	800816a <_printf_i+0x1a6>
 800817c:	8019      	strh	r1, [r3, #0]
 800817e:	2300      	movs	r3, #0
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	4675      	mov	r5, lr
 8008184:	e7b1      	b.n	80080ea <_printf_i+0x126>
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	1d11      	adds	r1, r2, #4
 800818a:	6019      	str	r1, [r3, #0]
 800818c:	6815      	ldr	r5, [r2, #0]
 800818e:	6862      	ldr	r2, [r4, #4]
 8008190:	2100      	movs	r1, #0
 8008192:	4628      	mov	r0, r5
 8008194:	f7f8 f824 	bl	80001e0 <memchr>
 8008198:	b108      	cbz	r0, 800819e <_printf_i+0x1da>
 800819a:	1b40      	subs	r0, r0, r5
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	6863      	ldr	r3, [r4, #4]
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	2300      	movs	r3, #0
 80081a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081a8:	e79f      	b.n	80080ea <_printf_i+0x126>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	462a      	mov	r2, r5
 80081ae:	4639      	mov	r1, r7
 80081b0:	4630      	mov	r0, r6
 80081b2:	47c0      	blx	r8
 80081b4:	3001      	adds	r0, #1
 80081b6:	d0a2      	beq.n	80080fe <_printf_i+0x13a>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	079b      	lsls	r3, r3, #30
 80081bc:	d507      	bpl.n	80081ce <_printf_i+0x20a>
 80081be:	2500      	movs	r5, #0
 80081c0:	f104 0919 	add.w	r9, r4, #25
 80081c4:	68e3      	ldr	r3, [r4, #12]
 80081c6:	9a03      	ldr	r2, [sp, #12]
 80081c8:	1a9b      	subs	r3, r3, r2
 80081ca:	429d      	cmp	r5, r3
 80081cc:	db05      	blt.n	80081da <_printf_i+0x216>
 80081ce:	68e0      	ldr	r0, [r4, #12]
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	4298      	cmp	r0, r3
 80081d4:	bfb8      	it	lt
 80081d6:	4618      	movlt	r0, r3
 80081d8:	e793      	b.n	8008102 <_printf_i+0x13e>
 80081da:	2301      	movs	r3, #1
 80081dc:	464a      	mov	r2, r9
 80081de:	4639      	mov	r1, r7
 80081e0:	4630      	mov	r0, r6
 80081e2:	47c0      	blx	r8
 80081e4:	3001      	adds	r0, #1
 80081e6:	d08a      	beq.n	80080fe <_printf_i+0x13a>
 80081e8:	3501      	adds	r5, #1
 80081ea:	e7eb      	b.n	80081c4 <_printf_i+0x200>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1a7      	bne.n	8008140 <_printf_i+0x17c>
 80081f0:	780b      	ldrb	r3, [r1, #0]
 80081f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fa:	e765      	b.n	80080c8 <_printf_i+0x104>
 80081fc:	0800a78d 	.word	0x0800a78d
 8008200:	0800a77c 	.word	0x0800a77c

08008204 <iprintf>:
 8008204:	b40f      	push	{r0, r1, r2, r3}
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <iprintf+0x2c>)
 8008208:	b513      	push	{r0, r1, r4, lr}
 800820a:	681c      	ldr	r4, [r3, #0]
 800820c:	b124      	cbz	r4, 8008218 <iprintf+0x14>
 800820e:	69a3      	ldr	r3, [r4, #24]
 8008210:	b913      	cbnz	r3, 8008218 <iprintf+0x14>
 8008212:	4620      	mov	r0, r4
 8008214:	f001 f8ac 	bl	8009370 <__sinit>
 8008218:	ab05      	add	r3, sp, #20
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	68a1      	ldr	r1, [r4, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	4620      	mov	r0, r4
 8008222:	f001 fead 	bl	8009f80 <_vfiprintf_r>
 8008226:	b002      	add	sp, #8
 8008228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822c:	b004      	add	sp, #16
 800822e:	4770      	bx	lr
 8008230:	20000514 	.word	0x20000514

08008234 <_puts_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	460e      	mov	r6, r1
 8008238:	4605      	mov	r5, r0
 800823a:	b118      	cbz	r0, 8008244 <_puts_r+0x10>
 800823c:	6983      	ldr	r3, [r0, #24]
 800823e:	b90b      	cbnz	r3, 8008244 <_puts_r+0x10>
 8008240:	f001 f896 	bl	8009370 <__sinit>
 8008244:	69ab      	ldr	r3, [r5, #24]
 8008246:	68ac      	ldr	r4, [r5, #8]
 8008248:	b913      	cbnz	r3, 8008250 <_puts_r+0x1c>
 800824a:	4628      	mov	r0, r5
 800824c:	f001 f890 	bl	8009370 <__sinit>
 8008250:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <_puts_r+0xac>)
 8008252:	429c      	cmp	r4, r3
 8008254:	d117      	bne.n	8008286 <_puts_r+0x52>
 8008256:	686c      	ldr	r4, [r5, #4]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	071b      	lsls	r3, r3, #28
 800825c:	d51d      	bpl.n	800829a <_puts_r+0x66>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	b1db      	cbz	r3, 800829a <_puts_r+0x66>
 8008262:	3e01      	subs	r6, #1
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800826a:	3b01      	subs	r3, #1
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	b9e9      	cbnz	r1, 80082ac <_puts_r+0x78>
 8008270:	2b00      	cmp	r3, #0
 8008272:	da2e      	bge.n	80082d2 <_puts_r+0x9e>
 8008274:	4622      	mov	r2, r4
 8008276:	210a      	movs	r1, #10
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f86b 	bl	8008354 <__swbuf_r>
 800827e:	3001      	adds	r0, #1
 8008280:	d011      	beq.n	80082a6 <_puts_r+0x72>
 8008282:	200a      	movs	r0, #10
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <_puts_r+0xb0>)
 8008288:	429c      	cmp	r4, r3
 800828a:	d101      	bne.n	8008290 <_puts_r+0x5c>
 800828c:	68ac      	ldr	r4, [r5, #8]
 800828e:	e7e3      	b.n	8008258 <_puts_r+0x24>
 8008290:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <_puts_r+0xb4>)
 8008292:	429c      	cmp	r4, r3
 8008294:	bf08      	it	eq
 8008296:	68ec      	ldreq	r4, [r5, #12]
 8008298:	e7de      	b.n	8008258 <_puts_r+0x24>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f8ab 	bl	80083f8 <__swsetup_r>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0dd      	beq.n	8008262 <_puts_r+0x2e>
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da04      	bge.n	80082ba <_puts_r+0x86>
 80082b0:	69a2      	ldr	r2, [r4, #24]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	db06      	blt.n	80082c4 <_puts_r+0x90>
 80082b6:	290a      	cmp	r1, #10
 80082b8:	d004      	beq.n	80082c4 <_puts_r+0x90>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	7019      	strb	r1, [r3, #0]
 80082c2:	e7cf      	b.n	8008264 <_puts_r+0x30>
 80082c4:	4622      	mov	r2, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f844 	bl	8008354 <__swbuf_r>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d1c9      	bne.n	8008264 <_puts_r+0x30>
 80082d0:	e7e9      	b.n	80082a6 <_puts_r+0x72>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	200a      	movs	r0, #10
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	7018      	strb	r0, [r3, #0]
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	bf00      	nop
 80082e0:	0800a7cc 	.word	0x0800a7cc
 80082e4:	0800a7ec 	.word	0x0800a7ec
 80082e8:	0800a7ac 	.word	0x0800a7ac

080082ec <puts>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <puts+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f7ff bf9f 	b.w	8008234 <_puts_r>
 80082f6:	bf00      	nop
 80082f8:	20000514 	.word	0x20000514

080082fc <siprintf>:
 80082fc:	b40e      	push	{r1, r2, r3}
 80082fe:	b500      	push	{lr}
 8008300:	b09c      	sub	sp, #112	; 0x70
 8008302:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008306:	ab1d      	add	r3, sp, #116	; 0x74
 8008308:	f8ad 1014 	strh.w	r1, [sp, #20]
 800830c:	9002      	str	r0, [sp, #8]
 800830e:	9006      	str	r0, [sp, #24]
 8008310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008314:	480a      	ldr	r0, [pc, #40]	; (8008340 <siprintf+0x44>)
 8008316:	9104      	str	r1, [sp, #16]
 8008318:	9107      	str	r1, [sp, #28]
 800831a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800831e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008322:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	a902      	add	r1, sp, #8
 800832c:	f001 fd0a 	bl	8009d44 <_svfiprintf_r>
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	b01c      	add	sp, #112	; 0x70
 8008338:	f85d eb04 	ldr.w	lr, [sp], #4
 800833c:	b003      	add	sp, #12
 800833e:	4770      	bx	lr
 8008340:	20000514 	.word	0x20000514

08008344 <strcpy>:
 8008344:	4603      	mov	r3, r0
 8008346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800834a:	f803 2b01 	strb.w	r2, [r3], #1
 800834e:	2a00      	cmp	r2, #0
 8008350:	d1f9      	bne.n	8008346 <strcpy+0x2>
 8008352:	4770      	bx	lr

08008354 <__swbuf_r>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	460e      	mov	r6, r1
 8008358:	4614      	mov	r4, r2
 800835a:	4605      	mov	r5, r0
 800835c:	b118      	cbz	r0, 8008366 <__swbuf_r+0x12>
 800835e:	6983      	ldr	r3, [r0, #24]
 8008360:	b90b      	cbnz	r3, 8008366 <__swbuf_r+0x12>
 8008362:	f001 f805 	bl	8009370 <__sinit>
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <__swbuf_r+0x98>)
 8008368:	429c      	cmp	r4, r3
 800836a:	d12a      	bne.n	80083c2 <__swbuf_r+0x6e>
 800836c:	686c      	ldr	r4, [r5, #4]
 800836e:	69a3      	ldr	r3, [r4, #24]
 8008370:	60a3      	str	r3, [r4, #8]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	071a      	lsls	r2, r3, #28
 8008376:	d52e      	bpl.n	80083d6 <__swbuf_r+0x82>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	b363      	cbz	r3, 80083d6 <__swbuf_r+0x82>
 800837c:	6923      	ldr	r3, [r4, #16]
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	1ac0      	subs	r0, r0, r3
 8008382:	6963      	ldr	r3, [r4, #20]
 8008384:	b2f6      	uxtb	r6, r6
 8008386:	4298      	cmp	r0, r3
 8008388:	4637      	mov	r7, r6
 800838a:	db04      	blt.n	8008396 <__swbuf_r+0x42>
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 ff84 	bl	800929c <_fflush_r>
 8008394:	bb28      	cbnz	r0, 80083e2 <__swbuf_r+0x8e>
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	3b01      	subs	r3, #1
 800839a:	60a3      	str	r3, [r4, #8]
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	6022      	str	r2, [r4, #0]
 80083a2:	701e      	strb	r6, [r3, #0]
 80083a4:	6963      	ldr	r3, [r4, #20]
 80083a6:	3001      	adds	r0, #1
 80083a8:	4298      	cmp	r0, r3
 80083aa:	d004      	beq.n	80083b6 <__swbuf_r+0x62>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	07db      	lsls	r3, r3, #31
 80083b0:	d519      	bpl.n	80083e6 <__swbuf_r+0x92>
 80083b2:	2e0a      	cmp	r6, #10
 80083b4:	d117      	bne.n	80083e6 <__swbuf_r+0x92>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 ff6f 	bl	800929c <_fflush_r>
 80083be:	b190      	cbz	r0, 80083e6 <__swbuf_r+0x92>
 80083c0:	e00f      	b.n	80083e2 <__swbuf_r+0x8e>
 80083c2:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <__swbuf_r+0x9c>)
 80083c4:	429c      	cmp	r4, r3
 80083c6:	d101      	bne.n	80083cc <__swbuf_r+0x78>
 80083c8:	68ac      	ldr	r4, [r5, #8]
 80083ca:	e7d0      	b.n	800836e <__swbuf_r+0x1a>
 80083cc:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <__swbuf_r+0xa0>)
 80083ce:	429c      	cmp	r4, r3
 80083d0:	bf08      	it	eq
 80083d2:	68ec      	ldreq	r4, [r5, #12]
 80083d4:	e7cb      	b.n	800836e <__swbuf_r+0x1a>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f80d 	bl	80083f8 <__swsetup_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0cc      	beq.n	800837c <__swbuf_r+0x28>
 80083e2:	f04f 37ff 	mov.w	r7, #4294967295
 80083e6:	4638      	mov	r0, r7
 80083e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	0800a7cc 	.word	0x0800a7cc
 80083f0:	0800a7ec 	.word	0x0800a7ec
 80083f4:	0800a7ac 	.word	0x0800a7ac

080083f8 <__swsetup_r>:
 80083f8:	4b32      	ldr	r3, [pc, #200]	; (80084c4 <__swsetup_r+0xcc>)
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	681d      	ldr	r5, [r3, #0]
 80083fe:	4606      	mov	r6, r0
 8008400:	460c      	mov	r4, r1
 8008402:	b125      	cbz	r5, 800840e <__swsetup_r+0x16>
 8008404:	69ab      	ldr	r3, [r5, #24]
 8008406:	b913      	cbnz	r3, 800840e <__swsetup_r+0x16>
 8008408:	4628      	mov	r0, r5
 800840a:	f000 ffb1 	bl	8009370 <__sinit>
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <__swsetup_r+0xd0>)
 8008410:	429c      	cmp	r4, r3
 8008412:	d10f      	bne.n	8008434 <__swsetup_r+0x3c>
 8008414:	686c      	ldr	r4, [r5, #4]
 8008416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841a:	b29a      	uxth	r2, r3
 800841c:	0715      	lsls	r5, r2, #28
 800841e:	d42c      	bmi.n	800847a <__swsetup_r+0x82>
 8008420:	06d0      	lsls	r0, r2, #27
 8008422:	d411      	bmi.n	8008448 <__swsetup_r+0x50>
 8008424:	2209      	movs	r2, #9
 8008426:	6032      	str	r2, [r6, #0]
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	f04f 30ff 	mov.w	r0, #4294967295
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	4b25      	ldr	r3, [pc, #148]	; (80084cc <__swsetup_r+0xd4>)
 8008436:	429c      	cmp	r4, r3
 8008438:	d101      	bne.n	800843e <__swsetup_r+0x46>
 800843a:	68ac      	ldr	r4, [r5, #8]
 800843c:	e7eb      	b.n	8008416 <__swsetup_r+0x1e>
 800843e:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <__swsetup_r+0xd8>)
 8008440:	429c      	cmp	r4, r3
 8008442:	bf08      	it	eq
 8008444:	68ec      	ldreq	r4, [r5, #12]
 8008446:	e7e6      	b.n	8008416 <__swsetup_r+0x1e>
 8008448:	0751      	lsls	r1, r2, #29
 800844a:	d512      	bpl.n	8008472 <__swsetup_r+0x7a>
 800844c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800844e:	b141      	cbz	r1, 8008462 <__swsetup_r+0x6a>
 8008450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008454:	4299      	cmp	r1, r3
 8008456:	d002      	beq.n	800845e <__swsetup_r+0x66>
 8008458:	4630      	mov	r0, r6
 800845a:	f001 fb6b 	bl	8009b34 <_free_r>
 800845e:	2300      	movs	r3, #0
 8008460:	6363      	str	r3, [r4, #52]	; 0x34
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	2300      	movs	r3, #0
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f043 0308 	orr.w	r3, r3, #8
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	b94b      	cbnz	r3, 8008492 <__swsetup_r+0x9a>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008488:	d003      	beq.n	8008492 <__swsetup_r+0x9a>
 800848a:	4621      	mov	r1, r4
 800848c:	4630      	mov	r0, r6
 800848e:	f001 f82b 	bl	80094e8 <__smakebuf_r>
 8008492:	89a2      	ldrh	r2, [r4, #12]
 8008494:	f012 0301 	ands.w	r3, r2, #1
 8008498:	d00c      	beq.n	80084b4 <__swsetup_r+0xbc>
 800849a:	2300      	movs	r3, #0
 800849c:	60a3      	str	r3, [r4, #8]
 800849e:	6963      	ldr	r3, [r4, #20]
 80084a0:	425b      	negs	r3, r3
 80084a2:	61a3      	str	r3, [r4, #24]
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	b953      	cbnz	r3, 80084be <__swsetup_r+0xc6>
 80084a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80084b0:	d1ba      	bne.n	8008428 <__swsetup_r+0x30>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	0792      	lsls	r2, r2, #30
 80084b6:	bf58      	it	pl
 80084b8:	6963      	ldrpl	r3, [r4, #20]
 80084ba:	60a3      	str	r3, [r4, #8]
 80084bc:	e7f2      	b.n	80084a4 <__swsetup_r+0xac>
 80084be:	2000      	movs	r0, #0
 80084c0:	e7f7      	b.n	80084b2 <__swsetup_r+0xba>
 80084c2:	bf00      	nop
 80084c4:	20000514 	.word	0x20000514
 80084c8:	0800a7cc 	.word	0x0800a7cc
 80084cc:	0800a7ec 	.word	0x0800a7ec
 80084d0:	0800a7ac 	.word	0x0800a7ac

080084d4 <quorem>:
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	6903      	ldr	r3, [r0, #16]
 80084da:	690c      	ldr	r4, [r1, #16]
 80084dc:	429c      	cmp	r4, r3
 80084de:	4680      	mov	r8, r0
 80084e0:	f300 8082 	bgt.w	80085e8 <quorem+0x114>
 80084e4:	3c01      	subs	r4, #1
 80084e6:	f101 0714 	add.w	r7, r1, #20
 80084ea:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80084ee:	f100 0614 	add.w	r6, r0, #20
 80084f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80084f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084fa:	eb06 030e 	add.w	r3, r6, lr
 80084fe:	3501      	adds	r5, #1
 8008500:	eb07 090e 	add.w	r9, r7, lr
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	fbb0 f5f5 	udiv	r5, r0, r5
 800850a:	b395      	cbz	r5, 8008572 <quorem+0x9e>
 800850c:	f04f 0a00 	mov.w	sl, #0
 8008510:	4638      	mov	r0, r7
 8008512:	46b4      	mov	ip, r6
 8008514:	46d3      	mov	fp, sl
 8008516:	f850 2b04 	ldr.w	r2, [r0], #4
 800851a:	b293      	uxth	r3, r2
 800851c:	fb05 a303 	mla	r3, r5, r3, sl
 8008520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008524:	b29b      	uxth	r3, r3
 8008526:	ebab 0303 	sub.w	r3, fp, r3
 800852a:	0c12      	lsrs	r2, r2, #16
 800852c:	f8bc b000 	ldrh.w	fp, [ip]
 8008530:	fb05 a202 	mla	r2, r5, r2, sl
 8008534:	fa13 f38b 	uxtah	r3, r3, fp
 8008538:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800853c:	fa1f fb82 	uxth.w	fp, r2
 8008540:	f8dc 2000 	ldr.w	r2, [ip]
 8008544:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008552:	4581      	cmp	r9, r0
 8008554:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008558:	f84c 3b04 	str.w	r3, [ip], #4
 800855c:	d2db      	bcs.n	8008516 <quorem+0x42>
 800855e:	f856 300e 	ldr.w	r3, [r6, lr]
 8008562:	b933      	cbnz	r3, 8008572 <quorem+0x9e>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	3b04      	subs	r3, #4
 8008568:	429e      	cmp	r6, r3
 800856a:	461a      	mov	r2, r3
 800856c:	d330      	bcc.n	80085d0 <quorem+0xfc>
 800856e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008572:	4640      	mov	r0, r8
 8008574:	f001 fa09 	bl	800998a <__mcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	db25      	blt.n	80085c8 <quorem+0xf4>
 800857c:	3501      	adds	r5, #1
 800857e:	4630      	mov	r0, r6
 8008580:	f04f 0e00 	mov.w	lr, #0
 8008584:	f857 2b04 	ldr.w	r2, [r7], #4
 8008588:	f8d0 c000 	ldr.w	ip, [r0]
 800858c:	b293      	uxth	r3, r2
 800858e:	ebae 0303 	sub.w	r3, lr, r3
 8008592:	0c12      	lsrs	r2, r2, #16
 8008594:	fa13 f38c 	uxtah	r3, r3, ip
 8008598:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800859c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a6:	45b9      	cmp	r9, r7
 80085a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80085ac:	f840 3b04 	str.w	r3, [r0], #4
 80085b0:	d2e8      	bcs.n	8008584 <quorem+0xb0>
 80085b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80085b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80085ba:	b92a      	cbnz	r2, 80085c8 <quorem+0xf4>
 80085bc:	3b04      	subs	r3, #4
 80085be:	429e      	cmp	r6, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	d30b      	bcc.n	80085dc <quorem+0x108>
 80085c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80085c8:	4628      	mov	r0, r5
 80085ca:	b003      	add	sp, #12
 80085cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	3b04      	subs	r3, #4
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d1ca      	bne.n	800856e <quorem+0x9a>
 80085d8:	3c01      	subs	r4, #1
 80085da:	e7c5      	b.n	8008568 <quorem+0x94>
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	3b04      	subs	r3, #4
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	d1ef      	bne.n	80085c4 <quorem+0xf0>
 80085e4:	3c01      	subs	r4, #1
 80085e6:	e7ea      	b.n	80085be <quorem+0xea>
 80085e8:	2000      	movs	r0, #0
 80085ea:	e7ee      	b.n	80085ca <quorem+0xf6>
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <_dtoa_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	ec57 6b10 	vmov	r6, r7, d0
 80085f8:	b097      	sub	sp, #92	; 0x5c
 80085fa:	e9cd 6700 	strd	r6, r7, [sp]
 80085fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008600:	9107      	str	r1, [sp, #28]
 8008602:	4604      	mov	r4, r0
 8008604:	920a      	str	r2, [sp, #40]	; 0x28
 8008606:	930f      	str	r3, [sp, #60]	; 0x3c
 8008608:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800860a:	b93e      	cbnz	r6, 800861c <_dtoa_r+0x2c>
 800860c:	2010      	movs	r0, #16
 800860e:	f000 ffab 	bl	8009568 <malloc>
 8008612:	6260      	str	r0, [r4, #36]	; 0x24
 8008614:	6046      	str	r6, [r0, #4]
 8008616:	6086      	str	r6, [r0, #8]
 8008618:	6006      	str	r6, [r0, #0]
 800861a:	60c6      	str	r6, [r0, #12]
 800861c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861e:	6819      	ldr	r1, [r3, #0]
 8008620:	b151      	cbz	r1, 8008638 <_dtoa_r+0x48>
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	604a      	str	r2, [r1, #4]
 8008626:	2301      	movs	r3, #1
 8008628:	4093      	lsls	r3, r2
 800862a:	608b      	str	r3, [r1, #8]
 800862c:	4620      	mov	r0, r4
 800862e:	f000 ffd7 	bl	80095e0 <_Bfree>
 8008632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfbf      	itttt	lt
 800863e:	2301      	movlt	r3, #1
 8008640:	602b      	strlt	r3, [r5, #0]
 8008642:	9b01      	ldrlt	r3, [sp, #4]
 8008644:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008648:	bfb2      	itee	lt
 800864a:	9301      	strlt	r3, [sp, #4]
 800864c:	2300      	movge	r3, #0
 800864e:	602b      	strge	r3, [r5, #0]
 8008650:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008654:	4ba8      	ldr	r3, [pc, #672]	; (80088f8 <_dtoa_r+0x308>)
 8008656:	ea33 0308 	bics.w	r3, r3, r8
 800865a:	d11b      	bne.n	8008694 <_dtoa_r+0xa4>
 800865c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800865e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	9b00      	ldr	r3, [sp, #0]
 8008666:	b923      	cbnz	r3, 8008672 <_dtoa_r+0x82>
 8008668:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800866c:	2800      	cmp	r0, #0
 800866e:	f000 8578 	beq.w	8009162 <_dtoa_r+0xb72>
 8008672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008674:	b953      	cbnz	r3, 800868c <_dtoa_r+0x9c>
 8008676:	4ba1      	ldr	r3, [pc, #644]	; (80088fc <_dtoa_r+0x30c>)
 8008678:	e021      	b.n	80086be <_dtoa_r+0xce>
 800867a:	4ba1      	ldr	r3, [pc, #644]	; (8008900 <_dtoa_r+0x310>)
 800867c:	9302      	str	r3, [sp, #8]
 800867e:	3308      	adds	r3, #8
 8008680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	9802      	ldr	r0, [sp, #8]
 8008686:	b017      	add	sp, #92	; 0x5c
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	4b9b      	ldr	r3, [pc, #620]	; (80088fc <_dtoa_r+0x30c>)
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	3303      	adds	r3, #3
 8008692:	e7f5      	b.n	8008680 <_dtoa_r+0x90>
 8008694:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008698:	2200      	movs	r2, #0
 800869a:	2300      	movs	r3, #0
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f8 fa0e 	bl	8000ac0 <__aeabi_dcmpeq>
 80086a4:	4681      	mov	r9, r0
 80086a6:	b160      	cbz	r0, 80086c2 <_dtoa_r+0xd2>
 80086a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086aa:	2301      	movs	r3, #1
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8553 	beq.w	800915c <_dtoa_r+0xb6c>
 80086b6:	4b93      	ldr	r3, [pc, #588]	; (8008904 <_dtoa_r+0x314>)
 80086b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	3b01      	subs	r3, #1
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	e7e0      	b.n	8008684 <_dtoa_r+0x94>
 80086c2:	aa14      	add	r2, sp, #80	; 0x50
 80086c4:	a915      	add	r1, sp, #84	; 0x54
 80086c6:	ec47 6b10 	vmov	d0, r6, r7
 80086ca:	4620      	mov	r0, r4
 80086cc:	f001 f9d5 	bl	8009a7a <__d2b>
 80086d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086d4:	4682      	mov	sl, r0
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	d07e      	beq.n	80087d8 <_dtoa_r+0x1e8>
 80086da:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80086e2:	4630      	mov	r0, r6
 80086e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80086e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ec:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80086f0:	2200      	movs	r2, #0
 80086f2:	4b85      	ldr	r3, [pc, #532]	; (8008908 <_dtoa_r+0x318>)
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	a379      	add	r3, pc, #484	; (adr r3, 80088e0 <_dtoa_r+0x2f0>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff77 	bl	80005f0 <__aeabi_dmul>
 8008702:	a379      	add	r3, pc, #484	; (adr r3, 80088e8 <_dtoa_r+0x2f8>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fdc0 	bl	800028c <__adddf3>
 800870c:	4606      	mov	r6, r0
 800870e:	4628      	mov	r0, r5
 8008710:	460f      	mov	r7, r1
 8008712:	f7f7 ff07 	bl	8000524 <__aeabi_i2d>
 8008716:	a376      	add	r3, pc, #472	; (adr r3, 80088f0 <_dtoa_r+0x300>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff68 	bl	80005f0 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f7 fdb0 	bl	800028c <__adddf3>
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	f7f8 fa0e 	bl	8000b50 <__aeabi_d2iz>
 8008734:	2200      	movs	r2, #0
 8008736:	4683      	mov	fp, r0
 8008738:	2300      	movs	r3, #0
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f8 f9c9 	bl	8000ad4 <__aeabi_dcmplt>
 8008742:	b158      	cbz	r0, 800875c <_dtoa_r+0x16c>
 8008744:	4658      	mov	r0, fp
 8008746:	f7f7 feed 	bl	8000524 <__aeabi_i2d>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4630      	mov	r0, r6
 8008750:	4639      	mov	r1, r7
 8008752:	f7f8 f9b5 	bl	8000ac0 <__aeabi_dcmpeq>
 8008756:	b908      	cbnz	r0, 800875c <_dtoa_r+0x16c>
 8008758:	f10b 3bff 	add.w	fp, fp, #4294967295
 800875c:	f1bb 0f16 	cmp.w	fp, #22
 8008760:	d859      	bhi.n	8008816 <_dtoa_r+0x226>
 8008762:	496a      	ldr	r1, [pc, #424]	; (800890c <_dtoa_r+0x31c>)
 8008764:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800876c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008770:	f7f8 f9ce 	bl	8000b10 <__aeabi_dcmpgt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d050      	beq.n	800881a <_dtoa_r+0x22a>
 8008778:	f10b 3bff 	add.w	fp, fp, #4294967295
 800877c:	2300      	movs	r3, #0
 800877e:	930e      	str	r3, [sp, #56]	; 0x38
 8008780:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008782:	1b5d      	subs	r5, r3, r5
 8008784:	1e6b      	subs	r3, r5, #1
 8008786:	9306      	str	r3, [sp, #24]
 8008788:	bf45      	ittet	mi
 800878a:	f1c5 0301 	rsbmi	r3, r5, #1
 800878e:	9305      	strmi	r3, [sp, #20]
 8008790:	2300      	movpl	r3, #0
 8008792:	2300      	movmi	r3, #0
 8008794:	bf4c      	ite	mi
 8008796:	9306      	strmi	r3, [sp, #24]
 8008798:	9305      	strpl	r3, [sp, #20]
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	db3e      	blt.n	800881e <_dtoa_r+0x22e>
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087a6:	445b      	add	r3, fp
 80087a8:	9306      	str	r3, [sp, #24]
 80087aa:	2300      	movs	r3, #0
 80087ac:	9308      	str	r3, [sp, #32]
 80087ae:	9b07      	ldr	r3, [sp, #28]
 80087b0:	2b09      	cmp	r3, #9
 80087b2:	f200 80af 	bhi.w	8008914 <_dtoa_r+0x324>
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	bfc4      	itt	gt
 80087ba:	3b04      	subgt	r3, #4
 80087bc:	9307      	strgt	r3, [sp, #28]
 80087be:	9b07      	ldr	r3, [sp, #28]
 80087c0:	f1a3 0302 	sub.w	r3, r3, #2
 80087c4:	bfcc      	ite	gt
 80087c6:	2600      	movgt	r6, #0
 80087c8:	2601      	movle	r6, #1
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	f200 80ae 	bhi.w	800892c <_dtoa_r+0x33c>
 80087d0:	e8df f003 	tbb	[pc, r3]
 80087d4:	772f8482 	.word	0x772f8482
 80087d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087da:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80087dc:	441d      	add	r5, r3
 80087de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	dd11      	ble.n	800880a <_dtoa_r+0x21a>
 80087e6:	9a00      	ldr	r2, [sp, #0]
 80087e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80087ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80087f0:	fa22 f000 	lsr.w	r0, r2, r0
 80087f4:	fa08 f303 	lsl.w	r3, r8, r3
 80087f8:	4318      	orrs	r0, r3
 80087fa:	f7f7 fe83 	bl	8000504 <__aeabi_ui2d>
 80087fe:	2301      	movs	r3, #1
 8008800:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008804:	3d01      	subs	r5, #1
 8008806:	9312      	str	r3, [sp, #72]	; 0x48
 8008808:	e772      	b.n	80086f0 <_dtoa_r+0x100>
 800880a:	f1c3 0020 	rsb	r0, r3, #32
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	fa03 f000 	lsl.w	r0, r3, r0
 8008814:	e7f1      	b.n	80087fa <_dtoa_r+0x20a>
 8008816:	2301      	movs	r3, #1
 8008818:	e7b1      	b.n	800877e <_dtoa_r+0x18e>
 800881a:	900e      	str	r0, [sp, #56]	; 0x38
 800881c:	e7b0      	b.n	8008780 <_dtoa_r+0x190>
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	eba3 030b 	sub.w	r3, r3, fp
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	f1cb 0300 	rsb	r3, fp, #0
 800882a:	9308      	str	r3, [sp, #32]
 800882c:	2300      	movs	r3, #0
 800882e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008830:	e7bd      	b.n	80087ae <_dtoa_r+0x1be>
 8008832:	2301      	movs	r3, #1
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
 8008836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008838:	2b00      	cmp	r3, #0
 800883a:	dd7a      	ble.n	8008932 <_dtoa_r+0x342>
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	9303      	str	r3, [sp, #12]
 8008840:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008842:	2200      	movs	r2, #0
 8008844:	606a      	str	r2, [r5, #4]
 8008846:	2104      	movs	r1, #4
 8008848:	f101 0214 	add.w	r2, r1, #20
 800884c:	429a      	cmp	r2, r3
 800884e:	d975      	bls.n	800893c <_dtoa_r+0x34c>
 8008850:	6869      	ldr	r1, [r5, #4]
 8008852:	4620      	mov	r0, r4
 8008854:	f000 fe90 	bl	8009578 <_Balloc>
 8008858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800885a:	6028      	str	r0, [r5, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	9302      	str	r3, [sp, #8]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	2b0e      	cmp	r3, #14
 8008864:	f200 80e5 	bhi.w	8008a32 <_dtoa_r+0x442>
 8008868:	2e00      	cmp	r6, #0
 800886a:	f000 80e2 	beq.w	8008a32 <_dtoa_r+0x442>
 800886e:	ed9d 7b00 	vldr	d7, [sp]
 8008872:	f1bb 0f00 	cmp.w	fp, #0
 8008876:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800887a:	dd74      	ble.n	8008966 <_dtoa_r+0x376>
 800887c:	4a23      	ldr	r2, [pc, #140]	; (800890c <_dtoa_r+0x31c>)
 800887e:	f00b 030f 	and.w	r3, fp, #15
 8008882:	ea4f 162b 	mov.w	r6, fp, asr #4
 8008886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800888a:	06f0      	lsls	r0, r6, #27
 800888c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008890:	d559      	bpl.n	8008946 <_dtoa_r+0x356>
 8008892:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <_dtoa_r+0x320>)
 8008894:	ec51 0b17 	vmov	r0, r1, d7
 8008898:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800889c:	f7f7 ffd2 	bl	8000844 <__aeabi_ddiv>
 80088a0:	e9cd 0100 	strd	r0, r1, [sp]
 80088a4:	f006 060f 	and.w	r6, r6, #15
 80088a8:	2503      	movs	r5, #3
 80088aa:	4f19      	ldr	r7, [pc, #100]	; (8008910 <_dtoa_r+0x320>)
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	d14c      	bne.n	800894a <_dtoa_r+0x35a>
 80088b0:	4642      	mov	r2, r8
 80088b2:	464b      	mov	r3, r9
 80088b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088b8:	f7f7 ffc4 	bl	8000844 <__aeabi_ddiv>
 80088bc:	e9cd 0100 	strd	r0, r1, [sp]
 80088c0:	e06a      	b.n	8008998 <_dtoa_r+0x3a8>
 80088c2:	2301      	movs	r3, #1
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c8:	445b      	add	r3, fp
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	bfb8      	it	lt
 80088d4:	2301      	movlt	r3, #1
 80088d6:	e7b3      	b.n	8008840 <_dtoa_r+0x250>
 80088d8:	2300      	movs	r3, #0
 80088da:	e7ab      	b.n	8008834 <_dtoa_r+0x244>
 80088dc:	2300      	movs	r3, #0
 80088de:	e7f1      	b.n	80088c4 <_dtoa_r+0x2d4>
 80088e0:	636f4361 	.word	0x636f4361
 80088e4:	3fd287a7 	.word	0x3fd287a7
 80088e8:	8b60c8b3 	.word	0x8b60c8b3
 80088ec:	3fc68a28 	.word	0x3fc68a28
 80088f0:	509f79fb 	.word	0x509f79fb
 80088f4:	3fd34413 	.word	0x3fd34413
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	0800a7a7 	.word	0x0800a7a7
 8008900:	0800a79e 	.word	0x0800a79e
 8008904:	0800a5ff 	.word	0x0800a5ff
 8008908:	3ff80000 	.word	0x3ff80000
 800890c:	0800a838 	.word	0x0800a838
 8008910:	0800a810 	.word	0x0800a810
 8008914:	2601      	movs	r6, #1
 8008916:	2300      	movs	r3, #0
 8008918:	9307      	str	r3, [sp, #28]
 800891a:	9609      	str	r6, [sp, #36]	; 0x24
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	2312      	movs	r3, #18
 8008928:	920a      	str	r2, [sp, #40]	; 0x28
 800892a:	e789      	b.n	8008840 <_dtoa_r+0x250>
 800892c:	2301      	movs	r3, #1
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	e7f4      	b.n	800891c <_dtoa_r+0x32c>
 8008932:	2301      	movs	r3, #1
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	9303      	str	r3, [sp, #12]
 8008938:	461a      	mov	r2, r3
 800893a:	e7f5      	b.n	8008928 <_dtoa_r+0x338>
 800893c:	686a      	ldr	r2, [r5, #4]
 800893e:	3201      	adds	r2, #1
 8008940:	606a      	str	r2, [r5, #4]
 8008942:	0049      	lsls	r1, r1, #1
 8008944:	e780      	b.n	8008848 <_dtoa_r+0x258>
 8008946:	2502      	movs	r5, #2
 8008948:	e7af      	b.n	80088aa <_dtoa_r+0x2ba>
 800894a:	07f1      	lsls	r1, r6, #31
 800894c:	d508      	bpl.n	8008960 <_dtoa_r+0x370>
 800894e:	4640      	mov	r0, r8
 8008950:	4649      	mov	r1, r9
 8008952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008956:	f7f7 fe4b 	bl	80005f0 <__aeabi_dmul>
 800895a:	3501      	adds	r5, #1
 800895c:	4680      	mov	r8, r0
 800895e:	4689      	mov	r9, r1
 8008960:	1076      	asrs	r6, r6, #1
 8008962:	3708      	adds	r7, #8
 8008964:	e7a2      	b.n	80088ac <_dtoa_r+0x2bc>
 8008966:	f000 809d 	beq.w	8008aa4 <_dtoa_r+0x4b4>
 800896a:	f1cb 0600 	rsb	r6, fp, #0
 800896e:	4b9f      	ldr	r3, [pc, #636]	; (8008bec <_dtoa_r+0x5fc>)
 8008970:	4f9f      	ldr	r7, [pc, #636]	; (8008bf0 <_dtoa_r+0x600>)
 8008972:	f006 020f 	and.w	r2, r6, #15
 8008976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008982:	f7f7 fe35 	bl	80005f0 <__aeabi_dmul>
 8008986:	e9cd 0100 	strd	r0, r1, [sp]
 800898a:	1136      	asrs	r6, r6, #4
 800898c:	2300      	movs	r3, #0
 800898e:	2502      	movs	r5, #2
 8008990:	2e00      	cmp	r6, #0
 8008992:	d17c      	bne.n	8008a8e <_dtoa_r+0x49e>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d191      	bne.n	80088bc <_dtoa_r+0x2cc>
 8008998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8084 	beq.w	8008aa8 <_dtoa_r+0x4b8>
 80089a0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80089a4:	2200      	movs	r2, #0
 80089a6:	4b93      	ldr	r3, [pc, #588]	; (8008bf4 <_dtoa_r+0x604>)
 80089a8:	4640      	mov	r0, r8
 80089aa:	4649      	mov	r1, r9
 80089ac:	f7f8 f892 	bl	8000ad4 <__aeabi_dcmplt>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d079      	beq.n	8008aa8 <_dtoa_r+0x4b8>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d076      	beq.n	8008aa8 <_dtoa_r+0x4b8>
 80089ba:	9b04      	ldr	r3, [sp, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd34      	ble.n	8008a2a <_dtoa_r+0x43a>
 80089c0:	2200      	movs	r2, #0
 80089c2:	4b8d      	ldr	r3, [pc, #564]	; (8008bf8 <_dtoa_r+0x608>)
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f7 fe12 	bl	80005f0 <__aeabi_dmul>
 80089cc:	e9cd 0100 	strd	r0, r1, [sp]
 80089d0:	9e04      	ldr	r6, [sp, #16]
 80089d2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089d6:	3501      	adds	r5, #1
 80089d8:	4628      	mov	r0, r5
 80089da:	f7f7 fda3 	bl	8000524 <__aeabi_i2d>
 80089de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e2:	f7f7 fe05 	bl	80005f0 <__aeabi_dmul>
 80089e6:	2200      	movs	r2, #0
 80089e8:	4b84      	ldr	r3, [pc, #528]	; (8008bfc <_dtoa_r+0x60c>)
 80089ea:	f7f7 fc4f 	bl	800028c <__adddf3>
 80089ee:	4680      	mov	r8, r0
 80089f0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	d15a      	bne.n	8008aae <_dtoa_r+0x4be>
 80089f8:	2200      	movs	r2, #0
 80089fa:	4b81      	ldr	r3, [pc, #516]	; (8008c00 <_dtoa_r+0x610>)
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fc42 	bl	8000288 <__aeabi_dsub>
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	e9cd 0100 	strd	r0, r1, [sp]
 8008a0c:	f7f8 f880 	bl	8000b10 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 829b 	bne.w	8008f4c <_dtoa_r+0x95c>
 8008a16:	4642      	mov	r2, r8
 8008a18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a20:	f7f8 f858 	bl	8000ad4 <__aeabi_dcmplt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 828f 	bne.w	8008f48 <_dtoa_r+0x958>
 8008a2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8008a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f2c0 8150 	blt.w	8008cda <_dtoa_r+0x6ea>
 8008a3a:	f1bb 0f0e 	cmp.w	fp, #14
 8008a3e:	f300 814c 	bgt.w	8008cda <_dtoa_r+0x6ea>
 8008a42:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <_dtoa_r+0x5fc>)
 8008a44:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f280 80da 	bge.w	8008c08 <_dtoa_r+0x618>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f300 80d6 	bgt.w	8008c08 <_dtoa_r+0x618>
 8008a5c:	f040 8273 	bne.w	8008f46 <_dtoa_r+0x956>
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b67      	ldr	r3, [pc, #412]	; (8008c00 <_dtoa_r+0x610>)
 8008a64:	4640      	mov	r0, r8
 8008a66:	4649      	mov	r1, r9
 8008a68:	f7f7 fdc2 	bl	80005f0 <__aeabi_dmul>
 8008a6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a70:	f7f8 f844 	bl	8000afc <__aeabi_dcmpge>
 8008a74:	9e03      	ldr	r6, [sp, #12]
 8008a76:	4637      	mov	r7, r6
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f040 824a 	bne.w	8008f12 <_dtoa_r+0x922>
 8008a7e:	9b02      	ldr	r3, [sp, #8]
 8008a80:	9a02      	ldr	r2, [sp, #8]
 8008a82:	1c5d      	adds	r5, r3, #1
 8008a84:	2331      	movs	r3, #49	; 0x31
 8008a86:	7013      	strb	r3, [r2, #0]
 8008a88:	f10b 0b01 	add.w	fp, fp, #1
 8008a8c:	e245      	b.n	8008f1a <_dtoa_r+0x92a>
 8008a8e:	07f2      	lsls	r2, r6, #31
 8008a90:	d505      	bpl.n	8008a9e <_dtoa_r+0x4ae>
 8008a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a96:	f7f7 fdab 	bl	80005f0 <__aeabi_dmul>
 8008a9a:	3501      	adds	r5, #1
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	1076      	asrs	r6, r6, #1
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	e775      	b.n	8008990 <_dtoa_r+0x3a0>
 8008aa4:	2502      	movs	r5, #2
 8008aa6:	e777      	b.n	8008998 <_dtoa_r+0x3a8>
 8008aa8:	465f      	mov	r7, fp
 8008aaa:	9e03      	ldr	r6, [sp, #12]
 8008aac:	e794      	b.n	80089d8 <_dtoa_r+0x3e8>
 8008aae:	9a02      	ldr	r2, [sp, #8]
 8008ab0:	4b4e      	ldr	r3, [pc, #312]	; (8008bec <_dtoa_r+0x5fc>)
 8008ab2:	4432      	add	r2, r6
 8008ab4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab8:	1e71      	subs	r1, r6, #1
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	d048      	beq.n	8008b50 <_dtoa_r+0x560>
 8008abe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	494e      	ldr	r1, [pc, #312]	; (8008c04 <_dtoa_r+0x614>)
 8008aca:	f7f7 febb 	bl	8000844 <__aeabi_ddiv>
 8008ace:	4642      	mov	r2, r8
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	f7f7 fbd9 	bl	8000288 <__aeabi_dsub>
 8008ad6:	9d02      	ldr	r5, [sp, #8]
 8008ad8:	4680      	mov	r8, r0
 8008ada:	4689      	mov	r9, r1
 8008adc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ae0:	f7f8 f836 	bl	8000b50 <__aeabi_d2iz>
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	f7f7 fd1d 	bl	8000524 <__aeabi_i2d>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008af2:	f7f7 fbc9 	bl	8000288 <__aeabi_dsub>
 8008af6:	3630      	adds	r6, #48	; 0x30
 8008af8:	f805 6b01 	strb.w	r6, [r5], #1
 8008afc:	4642      	mov	r2, r8
 8008afe:	464b      	mov	r3, r9
 8008b00:	e9cd 0100 	strd	r0, r1, [sp]
 8008b04:	f7f7 ffe6 	bl	8000ad4 <__aeabi_dcmplt>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d165      	bne.n	8008bd8 <_dtoa_r+0x5e8>
 8008b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b10:	2000      	movs	r0, #0
 8008b12:	4938      	ldr	r1, [pc, #224]	; (8008bf4 <_dtoa_r+0x604>)
 8008b14:	f7f7 fbb8 	bl	8000288 <__aeabi_dsub>
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	f7f7 ffda 	bl	8000ad4 <__aeabi_dcmplt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f040 80ba 	bne.w	8008c9a <_dtoa_r+0x6aa>
 8008b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b28:	429d      	cmp	r5, r3
 8008b2a:	f43f af7e 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	4b31      	ldr	r3, [pc, #196]	; (8008bf8 <_dtoa_r+0x608>)
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fd5b 	bl	80005f0 <__aeabi_dmul>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	4689      	mov	r9, r1
 8008b40:	4b2d      	ldr	r3, [pc, #180]	; (8008bf8 <_dtoa_r+0x608>)
 8008b42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b46:	f7f7 fd53 	bl	80005f0 <__aeabi_dmul>
 8008b4a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b4e:	e7c5      	b.n	8008adc <_dtoa_r+0x4ec>
 8008b50:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008b54:	4642      	mov	r2, r8
 8008b56:	464b      	mov	r3, r9
 8008b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b5c:	f7f7 fd48 	bl	80005f0 <__aeabi_dmul>
 8008b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b64:	9d02      	ldr	r5, [sp, #8]
 8008b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b6a:	f7f7 fff1 	bl	8000b50 <__aeabi_d2iz>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	f7f7 fcd8 	bl	8000524 <__aeabi_i2d>
 8008b74:	3630      	adds	r6, #48	; 0x30
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b7e:	f7f7 fb83 	bl	8000288 <__aeabi_dsub>
 8008b82:	f805 6b01 	strb.w	r6, [r5], #1
 8008b86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	d125      	bne.n	8008be0 <_dtoa_r+0x5f0>
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <_dtoa_r+0x614>)
 8008b96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b9a:	f7f7 fb77 	bl	800028c <__adddf3>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	f7f7 ffb3 	bl	8000b10 <__aeabi_dcmpgt>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d175      	bne.n	8008c9a <_dtoa_r+0x6aa>
 8008bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	4913      	ldr	r1, [pc, #76]	; (8008c04 <_dtoa_r+0x614>)
 8008bb6:	f7f7 fb67 	bl	8000288 <__aeabi_dsub>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	f7f7 ff87 	bl	8000ad4 <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f af2f 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bd0:	2b30      	cmp	r3, #48	; 0x30
 8008bd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008bd6:	d001      	beq.n	8008bdc <_dtoa_r+0x5ec>
 8008bd8:	46bb      	mov	fp, r7
 8008bda:	e04d      	b.n	8008c78 <_dtoa_r+0x688>
 8008bdc:	4615      	mov	r5, r2
 8008bde:	e7f5      	b.n	8008bcc <_dtoa_r+0x5dc>
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <_dtoa_r+0x608>)
 8008be2:	f7f7 fd05 	bl	80005f0 <__aeabi_dmul>
 8008be6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bea:	e7bc      	b.n	8008b66 <_dtoa_r+0x576>
 8008bec:	0800a838 	.word	0x0800a838
 8008bf0:	0800a810 	.word	0x0800a810
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	401c0000 	.word	0x401c0000
 8008c00:	40140000 	.word	0x40140000
 8008c04:	3fe00000 	.word	0x3fe00000
 8008c08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c0c:	9d02      	ldr	r5, [sp, #8]
 8008c0e:	4642      	mov	r2, r8
 8008c10:	464b      	mov	r3, r9
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fe15 	bl	8000844 <__aeabi_ddiv>
 8008c1a:	f7f7 ff99 	bl	8000b50 <__aeabi_d2iz>
 8008c1e:	9000      	str	r0, [sp, #0]
 8008c20:	f7f7 fc80 	bl	8000524 <__aeabi_i2d>
 8008c24:	4642      	mov	r2, r8
 8008c26:	464b      	mov	r3, r9
 8008c28:	f7f7 fce2 	bl	80005f0 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 fb28 	bl	8000288 <__aeabi_dsub>
 8008c38:	9e00      	ldr	r6, [sp, #0]
 8008c3a:	9f03      	ldr	r7, [sp, #12]
 8008c3c:	3630      	adds	r6, #48	; 0x30
 8008c3e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c42:	9e02      	ldr	r6, [sp, #8]
 8008c44:	1bae      	subs	r6, r5, r6
 8008c46:	42b7      	cmp	r7, r6
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	d138      	bne.n	8008cc0 <_dtoa_r+0x6d0>
 8008c4e:	f7f7 fb1d 	bl	800028c <__adddf3>
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	f7f7 ff39 	bl	8000ad4 <__aeabi_dcmplt>
 8008c62:	b9c8      	cbnz	r0, 8008c98 <_dtoa_r+0x6a8>
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	4640      	mov	r0, r8
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	f7f7 ff28 	bl	8000ac0 <__aeabi_dcmpeq>
 8008c70:	b110      	cbz	r0, 8008c78 <_dtoa_r+0x688>
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	07db      	lsls	r3, r3, #31
 8008c76:	d40f      	bmi.n	8008c98 <_dtoa_r+0x6a8>
 8008c78:	4651      	mov	r1, sl
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fcb0 	bl	80095e0 <_Bfree>
 8008c80:	2300      	movs	r3, #0
 8008c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c84:	702b      	strb	r3, [r5, #0]
 8008c86:	f10b 0301 	add.w	r3, fp, #1
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f43f acf8 	beq.w	8008684 <_dtoa_r+0x94>
 8008c94:	601d      	str	r5, [r3, #0]
 8008c96:	e4f5      	b.n	8008684 <_dtoa_r+0x94>
 8008c98:	465f      	mov	r7, fp
 8008c9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c9e:	2a39      	cmp	r2, #57	; 0x39
 8008ca0:	f105 33ff 	add.w	r3, r5, #4294967295
 8008ca4:	d106      	bne.n	8008cb4 <_dtoa_r+0x6c4>
 8008ca6:	9a02      	ldr	r2, [sp, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d107      	bne.n	8008cbc <_dtoa_r+0x6cc>
 8008cac:	2330      	movs	r3, #48	; 0x30
 8008cae:	7013      	strb	r3, [r2, #0]
 8008cb0:	3701      	adds	r7, #1
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	3201      	adds	r2, #1
 8008cb8:	701a      	strb	r2, [r3, #0]
 8008cba:	e78d      	b.n	8008bd8 <_dtoa_r+0x5e8>
 8008cbc:	461d      	mov	r5, r3
 8008cbe:	e7ec      	b.n	8008c9a <_dtoa_r+0x6aa>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4ba4      	ldr	r3, [pc, #656]	; (8008f54 <_dtoa_r+0x964>)
 8008cc4:	f7f7 fc94 	bl	80005f0 <__aeabi_dmul>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2300      	movs	r3, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	f7f7 fef6 	bl	8000ac0 <__aeabi_dcmpeq>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d09a      	beq.n	8008c0e <_dtoa_r+0x61e>
 8008cd8:	e7ce      	b.n	8008c78 <_dtoa_r+0x688>
 8008cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cdc:	2a00      	cmp	r2, #0
 8008cde:	f000 80cd 	beq.w	8008e7c <_dtoa_r+0x88c>
 8008ce2:	9a07      	ldr	r2, [sp, #28]
 8008ce4:	2a01      	cmp	r2, #1
 8008ce6:	f300 80af 	bgt.w	8008e48 <_dtoa_r+0x858>
 8008cea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	f000 80a7 	beq.w	8008e40 <_dtoa_r+0x850>
 8008cf2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cf6:	9e08      	ldr	r6, [sp, #32]
 8008cf8:	9d05      	ldr	r5, [sp, #20]
 8008cfa:	9a05      	ldr	r2, [sp, #20]
 8008cfc:	441a      	add	r2, r3
 8008cfe:	9205      	str	r2, [sp, #20]
 8008d00:	9a06      	ldr	r2, [sp, #24]
 8008d02:	2101      	movs	r1, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	4620      	mov	r0, r4
 8008d08:	9206      	str	r2, [sp, #24]
 8008d0a:	f000 fd09 	bl	8009720 <__i2b>
 8008d0e:	4607      	mov	r7, r0
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	dd0c      	ble.n	8008d2e <_dtoa_r+0x73e>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd09      	ble.n	8008d2e <_dtoa_r+0x73e>
 8008d1a:	42ab      	cmp	r3, r5
 8008d1c:	9a05      	ldr	r2, [sp, #20]
 8008d1e:	bfa8      	it	ge
 8008d20:	462b      	movge	r3, r5
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	9205      	str	r2, [sp, #20]
 8008d26:	9a06      	ldr	r2, [sp, #24]
 8008d28:	1aed      	subs	r5, r5, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	9b08      	ldr	r3, [sp, #32]
 8008d30:	b1f3      	cbz	r3, 8008d70 <_dtoa_r+0x780>
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80a5 	beq.w	8008e84 <_dtoa_r+0x894>
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	dd10      	ble.n	8008d60 <_dtoa_r+0x770>
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4632      	mov	r2, r6
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 fd82 	bl	800984c <__pow5mult>
 8008d48:	4652      	mov	r2, sl
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fcef 	bl	8009732 <__multiply>
 8008d54:	4651      	mov	r1, sl
 8008d56:	4680      	mov	r8, r0
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fc41 	bl	80095e0 <_Bfree>
 8008d5e:	46c2      	mov	sl, r8
 8008d60:	9b08      	ldr	r3, [sp, #32]
 8008d62:	1b9a      	subs	r2, r3, r6
 8008d64:	d004      	beq.n	8008d70 <_dtoa_r+0x780>
 8008d66:	4651      	mov	r1, sl
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fd6f 	bl	800984c <__pow5mult>
 8008d6e:	4682      	mov	sl, r0
 8008d70:	2101      	movs	r1, #1
 8008d72:	4620      	mov	r0, r4
 8008d74:	f000 fcd4 	bl	8009720 <__i2b>
 8008d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	f340 8083 	ble.w	8008e88 <_dtoa_r+0x898>
 8008d82:	461a      	mov	r2, r3
 8008d84:	4601      	mov	r1, r0
 8008d86:	4620      	mov	r0, r4
 8008d88:	f000 fd60 	bl	800984c <__pow5mult>
 8008d8c:	9b07      	ldr	r3, [sp, #28]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	4606      	mov	r6, r0
 8008d92:	dd7c      	ble.n	8008e8e <_dtoa_r+0x89e>
 8008d94:	f04f 0800 	mov.w	r8, #0
 8008d98:	6933      	ldr	r3, [r6, #16]
 8008d9a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d9e:	6918      	ldr	r0, [r3, #16]
 8008da0:	f000 fc70 	bl	8009684 <__hi0bits>
 8008da4:	f1c0 0020 	rsb	r0, r0, #32
 8008da8:	9b06      	ldr	r3, [sp, #24]
 8008daa:	4418      	add	r0, r3
 8008dac:	f010 001f 	ands.w	r0, r0, #31
 8008db0:	f000 8096 	beq.w	8008ee0 <_dtoa_r+0x8f0>
 8008db4:	f1c0 0320 	rsb	r3, r0, #32
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	f340 8087 	ble.w	8008ecc <_dtoa_r+0x8dc>
 8008dbe:	9b05      	ldr	r3, [sp, #20]
 8008dc0:	f1c0 001c 	rsb	r0, r0, #28
 8008dc4:	4403      	add	r3, r0
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	9b06      	ldr	r3, [sp, #24]
 8008dca:	4405      	add	r5, r0
 8008dcc:	4403      	add	r3, r0
 8008dce:	9306      	str	r3, [sp, #24]
 8008dd0:	9b05      	ldr	r3, [sp, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dd05      	ble.n	8008de2 <_dtoa_r+0x7f2>
 8008dd6:	4651      	mov	r1, sl
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 fd84 	bl	80098e8 <__lshift>
 8008de0:	4682      	mov	sl, r0
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd05      	ble.n	8008df4 <_dtoa_r+0x804>
 8008de8:	4631      	mov	r1, r6
 8008dea:	461a      	mov	r2, r3
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 fd7b 	bl	80098e8 <__lshift>
 8008df2:	4606      	mov	r6, r0
 8008df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d074      	beq.n	8008ee4 <_dtoa_r+0x8f4>
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	4650      	mov	r0, sl
 8008dfe:	f000 fdc4 	bl	800998a <__mcmp>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	da6e      	bge.n	8008ee4 <_dtoa_r+0x8f4>
 8008e06:	2300      	movs	r3, #0
 8008e08:	4651      	mov	r1, sl
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fbfe 	bl	800960e <__multadd>
 8008e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e18:	4682      	mov	sl, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 81a8 	beq.w	8009170 <_dtoa_r+0xb80>
 8008e20:	2300      	movs	r3, #0
 8008e22:	4639      	mov	r1, r7
 8008e24:	220a      	movs	r2, #10
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fbf1 	bl	800960e <__multadd>
 8008e2c:	9b04      	ldr	r3, [sp, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	4607      	mov	r7, r0
 8008e32:	f300 80c8 	bgt.w	8008fc6 <_dtoa_r+0x9d6>
 8008e36:	9b07      	ldr	r3, [sp, #28]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	f340 80c4 	ble.w	8008fc6 <_dtoa_r+0x9d6>
 8008e3e:	e059      	b.n	8008ef4 <_dtoa_r+0x904>
 8008e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e42:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e46:	e756      	b.n	8008cf6 <_dtoa_r+0x706>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	1e5e      	subs	r6, r3, #1
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	42b3      	cmp	r3, r6
 8008e50:	bfbf      	itttt	lt
 8008e52:	9b08      	ldrlt	r3, [sp, #32]
 8008e54:	9608      	strlt	r6, [sp, #32]
 8008e56:	1af2      	sublt	r2, r6, r3
 8008e58:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008e5a:	bfb6      	itet	lt
 8008e5c:	189b      	addlt	r3, r3, r2
 8008e5e:	1b9e      	subge	r6, r3, r6
 8008e60:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	bfb8      	it	lt
 8008e66:	2600      	movlt	r6, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfb9      	ittee	lt
 8008e6c:	9b05      	ldrlt	r3, [sp, #20]
 8008e6e:	9a03      	ldrlt	r2, [sp, #12]
 8008e70:	9d05      	ldrge	r5, [sp, #20]
 8008e72:	9b03      	ldrge	r3, [sp, #12]
 8008e74:	bfbc      	itt	lt
 8008e76:	1a9d      	sublt	r5, r3, r2
 8008e78:	2300      	movlt	r3, #0
 8008e7a:	e73e      	b.n	8008cfa <_dtoa_r+0x70a>
 8008e7c:	9e08      	ldr	r6, [sp, #32]
 8008e7e:	9d05      	ldr	r5, [sp, #20]
 8008e80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e82:	e745      	b.n	8008d10 <_dtoa_r+0x720>
 8008e84:	9a08      	ldr	r2, [sp, #32]
 8008e86:	e76e      	b.n	8008d66 <_dtoa_r+0x776>
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	dc19      	bgt.n	8008ec2 <_dtoa_r+0x8d2>
 8008e8e:	9b00      	ldr	r3, [sp, #0]
 8008e90:	b9bb      	cbnz	r3, 8008ec2 <_dtoa_r+0x8d2>
 8008e92:	9b01      	ldr	r3, [sp, #4]
 8008e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e98:	b99b      	cbnz	r3, 8008ec2 <_dtoa_r+0x8d2>
 8008e9a:	9b01      	ldr	r3, [sp, #4]
 8008e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ea0:	0d1b      	lsrs	r3, r3, #20
 8008ea2:	051b      	lsls	r3, r3, #20
 8008ea4:	b183      	cbz	r3, 8008ec8 <_dtoa_r+0x8d8>
 8008ea6:	9b05      	ldr	r3, [sp, #20]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	9b06      	ldr	r3, [sp, #24]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	f04f 0801 	mov.w	r8, #1
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f47f af6d 	bne.w	8008d98 <_dtoa_r+0x7a8>
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	e772      	b.n	8008da8 <_dtoa_r+0x7b8>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	e7f6      	b.n	8008eb6 <_dtoa_r+0x8c6>
 8008ec8:	4698      	mov	r8, r3
 8008eca:	e7f4      	b.n	8008eb6 <_dtoa_r+0x8c6>
 8008ecc:	d080      	beq.n	8008dd0 <_dtoa_r+0x7e0>
 8008ece:	9a05      	ldr	r2, [sp, #20]
 8008ed0:	331c      	adds	r3, #28
 8008ed2:	441a      	add	r2, r3
 8008ed4:	9205      	str	r2, [sp, #20]
 8008ed6:	9a06      	ldr	r2, [sp, #24]
 8008ed8:	441a      	add	r2, r3
 8008eda:	441d      	add	r5, r3
 8008edc:	4613      	mov	r3, r2
 8008ede:	e776      	b.n	8008dce <_dtoa_r+0x7de>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	e7f4      	b.n	8008ece <_dtoa_r+0x8de>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dc36      	bgt.n	8008f58 <_dtoa_r+0x968>
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	dd33      	ble.n	8008f58 <_dtoa_r+0x968>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	9304      	str	r3, [sp, #16]
 8008ef4:	9b04      	ldr	r3, [sp, #16]
 8008ef6:	b963      	cbnz	r3, 8008f12 <_dtoa_r+0x922>
 8008ef8:	4631      	mov	r1, r6
 8008efa:	2205      	movs	r2, #5
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fb86 	bl	800960e <__multadd>
 8008f02:	4601      	mov	r1, r0
 8008f04:	4606      	mov	r6, r0
 8008f06:	4650      	mov	r0, sl
 8008f08:	f000 fd3f 	bl	800998a <__mcmp>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f73f adb6 	bgt.w	8008a7e <_dtoa_r+0x48e>
 8008f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f14:	9d02      	ldr	r5, [sp, #8]
 8008f16:	ea6f 0b03 	mvn.w	fp, r3
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fb5d 	bl	80095e0 <_Bfree>
 8008f26:	2f00      	cmp	r7, #0
 8008f28:	f43f aea6 	beq.w	8008c78 <_dtoa_r+0x688>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	b12b      	cbz	r3, 8008f3c <_dtoa_r+0x94c>
 8008f30:	42bb      	cmp	r3, r7
 8008f32:	d003      	beq.n	8008f3c <_dtoa_r+0x94c>
 8008f34:	4619      	mov	r1, r3
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 fb52 	bl	80095e0 <_Bfree>
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 fb4e 	bl	80095e0 <_Bfree>
 8008f44:	e698      	b.n	8008c78 <_dtoa_r+0x688>
 8008f46:	2600      	movs	r6, #0
 8008f48:	4637      	mov	r7, r6
 8008f4a:	e7e2      	b.n	8008f12 <_dtoa_r+0x922>
 8008f4c:	46bb      	mov	fp, r7
 8008f4e:	4637      	mov	r7, r6
 8008f50:	e595      	b.n	8008a7e <_dtoa_r+0x48e>
 8008f52:	bf00      	nop
 8008f54:	40240000 	.word	0x40240000
 8008f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5a:	bb93      	cbnz	r3, 8008fc2 <_dtoa_r+0x9d2>
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	9d02      	ldr	r5, [sp, #8]
 8008f62:	4631      	mov	r1, r6
 8008f64:	4650      	mov	r0, sl
 8008f66:	f7ff fab5 	bl	80084d4 <quorem>
 8008f6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f6e:	f805 9b01 	strb.w	r9, [r5], #1
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	9a04      	ldr	r2, [sp, #16]
 8008f76:	1aeb      	subs	r3, r5, r3
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	f300 80dc 	bgt.w	8009136 <_dtoa_r+0xb46>
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	2a01      	cmp	r2, #1
 8008f82:	bfac      	ite	ge
 8008f84:	189b      	addge	r3, r3, r2
 8008f86:	3301      	addlt	r3, #1
 8008f88:	4698      	mov	r8, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	4651      	mov	r1, sl
 8008f90:	2201      	movs	r2, #1
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fca8 	bl	80098e8 <__lshift>
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4682      	mov	sl, r0
 8008f9c:	f000 fcf5 	bl	800998a <__mcmp>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f300 808d 	bgt.w	80090c0 <_dtoa_r+0xad0>
 8008fa6:	d103      	bne.n	8008fb0 <_dtoa_r+0x9c0>
 8008fa8:	f019 0f01 	tst.w	r9, #1
 8008fac:	f040 8088 	bne.w	80090c0 <_dtoa_r+0xad0>
 8008fb0:	4645      	mov	r5, r8
 8008fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fb6:	2b30      	cmp	r3, #48	; 0x30
 8008fb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008fbc:	d1af      	bne.n	8008f1e <_dtoa_r+0x92e>
 8008fbe:	4615      	mov	r5, r2
 8008fc0:	e7f7      	b.n	8008fb2 <_dtoa_r+0x9c2>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	dd05      	ble.n	8008fd6 <_dtoa_r+0x9e6>
 8008fca:	4639      	mov	r1, r7
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 fc8a 	bl	80098e8 <__lshift>
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	f1b8 0f00 	cmp.w	r8, #0
 8008fda:	d04c      	beq.n	8009076 <_dtoa_r+0xa86>
 8008fdc:	6879      	ldr	r1, [r7, #4]
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f000 faca 	bl	8009578 <_Balloc>
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	3202      	adds	r2, #2
 8008fe8:	4605      	mov	r5, r0
 8008fea:	0092      	lsls	r2, r2, #2
 8008fec:	f107 010c 	add.w	r1, r7, #12
 8008ff0:	300c      	adds	r0, #12
 8008ff2:	f7fe fc87 	bl	8007904 <memcpy>
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fc74 	bl	80098e8 <__lshift>
 8009000:	9b00      	ldr	r3, [sp, #0]
 8009002:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009006:	9703      	str	r7, [sp, #12]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	4607      	mov	r7, r0
 800900e:	9305      	str	r3, [sp, #20]
 8009010:	4631      	mov	r1, r6
 8009012:	4650      	mov	r0, sl
 8009014:	f7ff fa5e 	bl	80084d4 <quorem>
 8009018:	9903      	ldr	r1, [sp, #12]
 800901a:	4605      	mov	r5, r0
 800901c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009020:	4650      	mov	r0, sl
 8009022:	f000 fcb2 	bl	800998a <__mcmp>
 8009026:	463a      	mov	r2, r7
 8009028:	9000      	str	r0, [sp, #0]
 800902a:	4631      	mov	r1, r6
 800902c:	4620      	mov	r0, r4
 800902e:	f000 fcc6 	bl	80099be <__mdiff>
 8009032:	68c3      	ldr	r3, [r0, #12]
 8009034:	4602      	mov	r2, r0
 8009036:	bb03      	cbnz	r3, 800907a <_dtoa_r+0xa8a>
 8009038:	4601      	mov	r1, r0
 800903a:	9006      	str	r0, [sp, #24]
 800903c:	4650      	mov	r0, sl
 800903e:	f000 fca4 	bl	800998a <__mcmp>
 8009042:	9a06      	ldr	r2, [sp, #24]
 8009044:	4603      	mov	r3, r0
 8009046:	4611      	mov	r1, r2
 8009048:	4620      	mov	r0, r4
 800904a:	9306      	str	r3, [sp, #24]
 800904c:	f000 fac8 	bl	80095e0 <_Bfree>
 8009050:	9b06      	ldr	r3, [sp, #24]
 8009052:	b9a3      	cbnz	r3, 800907e <_dtoa_r+0xa8e>
 8009054:	9a07      	ldr	r2, [sp, #28]
 8009056:	b992      	cbnz	r2, 800907e <_dtoa_r+0xa8e>
 8009058:	9a05      	ldr	r2, [sp, #20]
 800905a:	b982      	cbnz	r2, 800907e <_dtoa_r+0xa8e>
 800905c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009060:	d029      	beq.n	80090b6 <_dtoa_r+0xac6>
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd01      	ble.n	800906c <_dtoa_r+0xa7c>
 8009068:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800906c:	f108 0501 	add.w	r5, r8, #1
 8009070:	f888 9000 	strb.w	r9, [r8]
 8009074:	e753      	b.n	8008f1e <_dtoa_r+0x92e>
 8009076:	4638      	mov	r0, r7
 8009078:	e7c2      	b.n	8009000 <_dtoa_r+0xa10>
 800907a:	2301      	movs	r3, #1
 800907c:	e7e3      	b.n	8009046 <_dtoa_r+0xa56>
 800907e:	9a00      	ldr	r2, [sp, #0]
 8009080:	2a00      	cmp	r2, #0
 8009082:	db04      	blt.n	800908e <_dtoa_r+0xa9e>
 8009084:	d125      	bne.n	80090d2 <_dtoa_r+0xae2>
 8009086:	9a07      	ldr	r2, [sp, #28]
 8009088:	bb1a      	cbnz	r2, 80090d2 <_dtoa_r+0xae2>
 800908a:	9a05      	ldr	r2, [sp, #20]
 800908c:	bb0a      	cbnz	r2, 80090d2 <_dtoa_r+0xae2>
 800908e:	2b00      	cmp	r3, #0
 8009090:	ddec      	ble.n	800906c <_dtoa_r+0xa7c>
 8009092:	4651      	mov	r1, sl
 8009094:	2201      	movs	r2, #1
 8009096:	4620      	mov	r0, r4
 8009098:	f000 fc26 	bl	80098e8 <__lshift>
 800909c:	4631      	mov	r1, r6
 800909e:	4682      	mov	sl, r0
 80090a0:	f000 fc73 	bl	800998a <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dc03      	bgt.n	80090b0 <_dtoa_r+0xac0>
 80090a8:	d1e0      	bne.n	800906c <_dtoa_r+0xa7c>
 80090aa:	f019 0f01 	tst.w	r9, #1
 80090ae:	d0dd      	beq.n	800906c <_dtoa_r+0xa7c>
 80090b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090b4:	d1d8      	bne.n	8009068 <_dtoa_r+0xa78>
 80090b6:	2339      	movs	r3, #57	; 0x39
 80090b8:	f888 3000 	strb.w	r3, [r8]
 80090bc:	f108 0801 	add.w	r8, r8, #1
 80090c0:	4645      	mov	r5, r8
 80090c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090c6:	2b39      	cmp	r3, #57	; 0x39
 80090c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80090cc:	d03b      	beq.n	8009146 <_dtoa_r+0xb56>
 80090ce:	3301      	adds	r3, #1
 80090d0:	e040      	b.n	8009154 <_dtoa_r+0xb64>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f108 0501 	add.w	r5, r8, #1
 80090d8:	dd05      	ble.n	80090e6 <_dtoa_r+0xaf6>
 80090da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090de:	d0ea      	beq.n	80090b6 <_dtoa_r+0xac6>
 80090e0:	f109 0901 	add.w	r9, r9, #1
 80090e4:	e7c4      	b.n	8009070 <_dtoa_r+0xa80>
 80090e6:	9b02      	ldr	r3, [sp, #8]
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	f805 9c01 	strb.w	r9, [r5, #-1]
 80090ee:	1aeb      	subs	r3, r5, r3
 80090f0:	4293      	cmp	r3, r2
 80090f2:	46a8      	mov	r8, r5
 80090f4:	f43f af4b 	beq.w	8008f8e <_dtoa_r+0x99e>
 80090f8:	4651      	mov	r1, sl
 80090fa:	2300      	movs	r3, #0
 80090fc:	220a      	movs	r2, #10
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 fa85 	bl	800960e <__multadd>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	9903      	ldr	r1, [sp, #12]
 8009108:	42bb      	cmp	r3, r7
 800910a:	4682      	mov	sl, r0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	f04f 020a 	mov.w	r2, #10
 8009114:	4620      	mov	r0, r4
 8009116:	d104      	bne.n	8009122 <_dtoa_r+0xb32>
 8009118:	f000 fa79 	bl	800960e <__multadd>
 800911c:	9003      	str	r0, [sp, #12]
 800911e:	4607      	mov	r7, r0
 8009120:	e776      	b.n	8009010 <_dtoa_r+0xa20>
 8009122:	f000 fa74 	bl	800960e <__multadd>
 8009126:	2300      	movs	r3, #0
 8009128:	9003      	str	r0, [sp, #12]
 800912a:	220a      	movs	r2, #10
 800912c:	4639      	mov	r1, r7
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fa6d 	bl	800960e <__multadd>
 8009134:	e7f3      	b.n	800911e <_dtoa_r+0xb2e>
 8009136:	4651      	mov	r1, sl
 8009138:	2300      	movs	r3, #0
 800913a:	220a      	movs	r2, #10
 800913c:	4620      	mov	r0, r4
 800913e:	f000 fa66 	bl	800960e <__multadd>
 8009142:	4682      	mov	sl, r0
 8009144:	e70d      	b.n	8008f62 <_dtoa_r+0x972>
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	4293      	cmp	r3, r2
 800914a:	d105      	bne.n	8009158 <_dtoa_r+0xb68>
 800914c:	9a02      	ldr	r2, [sp, #8]
 800914e:	f10b 0b01 	add.w	fp, fp, #1
 8009152:	2331      	movs	r3, #49	; 0x31
 8009154:	7013      	strb	r3, [r2, #0]
 8009156:	e6e2      	b.n	8008f1e <_dtoa_r+0x92e>
 8009158:	4615      	mov	r5, r2
 800915a:	e7b2      	b.n	80090c2 <_dtoa_r+0xad2>
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <_dtoa_r+0xb94>)
 800915e:	f7ff baae 	b.w	80086be <_dtoa_r+0xce>
 8009162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f aa88 	bne.w	800867a <_dtoa_r+0x8a>
 800916a:	4b07      	ldr	r3, [pc, #28]	; (8009188 <_dtoa_r+0xb98>)
 800916c:	f7ff baa7 	b.w	80086be <_dtoa_r+0xce>
 8009170:	9b04      	ldr	r3, [sp, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f73f aef4 	bgt.w	8008f60 <_dtoa_r+0x970>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	2b02      	cmp	r3, #2
 800917c:	f77f aef0 	ble.w	8008f60 <_dtoa_r+0x970>
 8009180:	e6b8      	b.n	8008ef4 <_dtoa_r+0x904>
 8009182:	bf00      	nop
 8009184:	0800a5fe 	.word	0x0800a5fe
 8009188:	0800a79e 	.word	0x0800a79e

0800918c <__sflush_r>:
 800918c:	898a      	ldrh	r2, [r1, #12]
 800918e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009192:	4605      	mov	r5, r0
 8009194:	0710      	lsls	r0, r2, #28
 8009196:	460c      	mov	r4, r1
 8009198:	d45a      	bmi.n	8009250 <__sflush_r+0xc4>
 800919a:	684b      	ldr	r3, [r1, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	dc05      	bgt.n	80091ac <__sflush_r+0x20>
 80091a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dc02      	bgt.n	80091ac <__sflush_r+0x20>
 80091a6:	2000      	movs	r0, #0
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	d0f9      	beq.n	80091a6 <__sflush_r+0x1a>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091b8:	682f      	ldr	r7, [r5, #0]
 80091ba:	602b      	str	r3, [r5, #0]
 80091bc:	d033      	beq.n	8009226 <__sflush_r+0x9a>
 80091be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	075a      	lsls	r2, r3, #29
 80091c4:	d505      	bpl.n	80091d2 <__sflush_r+0x46>
 80091c6:	6863      	ldr	r3, [r4, #4]
 80091c8:	1ac0      	subs	r0, r0, r3
 80091ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091cc:	b10b      	cbz	r3, 80091d2 <__sflush_r+0x46>
 80091ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091d0:	1ac0      	subs	r0, r0, r3
 80091d2:	2300      	movs	r3, #0
 80091d4:	4602      	mov	r2, r0
 80091d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	4628      	mov	r0, r5
 80091dc:	47b0      	blx	r6
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	d106      	bne.n	80091f2 <__sflush_r+0x66>
 80091e4:	6829      	ldr	r1, [r5, #0]
 80091e6:	291d      	cmp	r1, #29
 80091e8:	d84b      	bhi.n	8009282 <__sflush_r+0xf6>
 80091ea:	4a2b      	ldr	r2, [pc, #172]	; (8009298 <__sflush_r+0x10c>)
 80091ec:	40ca      	lsrs	r2, r1
 80091ee:	07d6      	lsls	r6, r2, #31
 80091f0:	d547      	bpl.n	8009282 <__sflush_r+0xf6>
 80091f2:	2200      	movs	r2, #0
 80091f4:	6062      	str	r2, [r4, #4]
 80091f6:	04d9      	lsls	r1, r3, #19
 80091f8:	6922      	ldr	r2, [r4, #16]
 80091fa:	6022      	str	r2, [r4, #0]
 80091fc:	d504      	bpl.n	8009208 <__sflush_r+0x7c>
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	d101      	bne.n	8009206 <__sflush_r+0x7a>
 8009202:	682b      	ldr	r3, [r5, #0]
 8009204:	b903      	cbnz	r3, 8009208 <__sflush_r+0x7c>
 8009206:	6560      	str	r0, [r4, #84]	; 0x54
 8009208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800920a:	602f      	str	r7, [r5, #0]
 800920c:	2900      	cmp	r1, #0
 800920e:	d0ca      	beq.n	80091a6 <__sflush_r+0x1a>
 8009210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009214:	4299      	cmp	r1, r3
 8009216:	d002      	beq.n	800921e <__sflush_r+0x92>
 8009218:	4628      	mov	r0, r5
 800921a:	f000 fc8b 	bl	8009b34 <_free_r>
 800921e:	2000      	movs	r0, #0
 8009220:	6360      	str	r0, [r4, #52]	; 0x34
 8009222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009226:	6a21      	ldr	r1, [r4, #32]
 8009228:	2301      	movs	r3, #1
 800922a:	4628      	mov	r0, r5
 800922c:	47b0      	blx	r6
 800922e:	1c41      	adds	r1, r0, #1
 8009230:	d1c6      	bne.n	80091c0 <__sflush_r+0x34>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0c3      	beq.n	80091c0 <__sflush_r+0x34>
 8009238:	2b1d      	cmp	r3, #29
 800923a:	d001      	beq.n	8009240 <__sflush_r+0xb4>
 800923c:	2b16      	cmp	r3, #22
 800923e:	d101      	bne.n	8009244 <__sflush_r+0xb8>
 8009240:	602f      	str	r7, [r5, #0]
 8009242:	e7b0      	b.n	80091a6 <__sflush_r+0x1a>
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924a:	81a3      	strh	r3, [r4, #12]
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	690f      	ldr	r7, [r1, #16]
 8009252:	2f00      	cmp	r7, #0
 8009254:	d0a7      	beq.n	80091a6 <__sflush_r+0x1a>
 8009256:	0793      	lsls	r3, r2, #30
 8009258:	680e      	ldr	r6, [r1, #0]
 800925a:	bf08      	it	eq
 800925c:	694b      	ldreq	r3, [r1, #20]
 800925e:	600f      	str	r7, [r1, #0]
 8009260:	bf18      	it	ne
 8009262:	2300      	movne	r3, #0
 8009264:	eba6 0807 	sub.w	r8, r6, r7
 8009268:	608b      	str	r3, [r1, #8]
 800926a:	f1b8 0f00 	cmp.w	r8, #0
 800926e:	dd9a      	ble.n	80091a6 <__sflush_r+0x1a>
 8009270:	4643      	mov	r3, r8
 8009272:	463a      	mov	r2, r7
 8009274:	6a21      	ldr	r1, [r4, #32]
 8009276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009278:	4628      	mov	r0, r5
 800927a:	47b0      	blx	r6
 800927c:	2800      	cmp	r0, #0
 800927e:	dc07      	bgt.n	8009290 <__sflush_r+0x104>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	4407      	add	r7, r0
 8009292:	eba8 0800 	sub.w	r8, r8, r0
 8009296:	e7e8      	b.n	800926a <__sflush_r+0xde>
 8009298:	20400001 	.word	0x20400001

0800929c <_fflush_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	690b      	ldr	r3, [r1, #16]
 80092a0:	4605      	mov	r5, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	b1db      	cbz	r3, 80092de <_fflush_r+0x42>
 80092a6:	b118      	cbz	r0, 80092b0 <_fflush_r+0x14>
 80092a8:	6983      	ldr	r3, [r0, #24]
 80092aa:	b90b      	cbnz	r3, 80092b0 <_fflush_r+0x14>
 80092ac:	f000 f860 	bl	8009370 <__sinit>
 80092b0:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <_fflush_r+0x48>)
 80092b2:	429c      	cmp	r4, r3
 80092b4:	d109      	bne.n	80092ca <_fflush_r+0x2e>
 80092b6:	686c      	ldr	r4, [r5, #4]
 80092b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092bc:	b17b      	cbz	r3, 80092de <_fflush_r+0x42>
 80092be:	4621      	mov	r1, r4
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092c6:	f7ff bf61 	b.w	800918c <__sflush_r>
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <_fflush_r+0x4c>)
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d101      	bne.n	80092d4 <_fflush_r+0x38>
 80092d0:	68ac      	ldr	r4, [r5, #8]
 80092d2:	e7f1      	b.n	80092b8 <_fflush_r+0x1c>
 80092d4:	4b05      	ldr	r3, [pc, #20]	; (80092ec <_fflush_r+0x50>)
 80092d6:	429c      	cmp	r4, r3
 80092d8:	bf08      	it	eq
 80092da:	68ec      	ldreq	r4, [r5, #12]
 80092dc:	e7ec      	b.n	80092b8 <_fflush_r+0x1c>
 80092de:	2000      	movs	r0, #0
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	0800a7cc 	.word	0x0800a7cc
 80092e8:	0800a7ec 	.word	0x0800a7ec
 80092ec:	0800a7ac 	.word	0x0800a7ac

080092f0 <_cleanup_r>:
 80092f0:	4901      	ldr	r1, [pc, #4]	; (80092f8 <_cleanup_r+0x8>)
 80092f2:	f000 b8a9 	b.w	8009448 <_fwalk_reent>
 80092f6:	bf00      	nop
 80092f8:	0800929d 	.word	0x0800929d

080092fc <std.isra.0>:
 80092fc:	2300      	movs	r3, #0
 80092fe:	b510      	push	{r4, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	6003      	str	r3, [r0, #0]
 8009304:	6043      	str	r3, [r0, #4]
 8009306:	6083      	str	r3, [r0, #8]
 8009308:	8181      	strh	r1, [r0, #12]
 800930a:	6643      	str	r3, [r0, #100]	; 0x64
 800930c:	81c2      	strh	r2, [r0, #14]
 800930e:	6103      	str	r3, [r0, #16]
 8009310:	6143      	str	r3, [r0, #20]
 8009312:	6183      	str	r3, [r0, #24]
 8009314:	4619      	mov	r1, r3
 8009316:	2208      	movs	r2, #8
 8009318:	305c      	adds	r0, #92	; 0x5c
 800931a:	f7fe fafe 	bl	800791a <memset>
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <std.isra.0+0x38>)
 8009320:	6263      	str	r3, [r4, #36]	; 0x24
 8009322:	4b05      	ldr	r3, [pc, #20]	; (8009338 <std.isra.0+0x3c>)
 8009324:	62a3      	str	r3, [r4, #40]	; 0x28
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <std.isra.0+0x40>)
 8009328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <std.isra.0+0x44>)
 800932c:	6224      	str	r4, [r4, #32]
 800932e:	6323      	str	r3, [r4, #48]	; 0x30
 8009330:	bd10      	pop	{r4, pc}
 8009332:	bf00      	nop
 8009334:	0800a1cd 	.word	0x0800a1cd
 8009338:	0800a1ef 	.word	0x0800a1ef
 800933c:	0800a227 	.word	0x0800a227
 8009340:	0800a24b 	.word	0x0800a24b

08009344 <__sfmoreglue>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	1e4a      	subs	r2, r1, #1
 8009348:	2568      	movs	r5, #104	; 0x68
 800934a:	4355      	muls	r5, r2
 800934c:	460e      	mov	r6, r1
 800934e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009352:	f000 fc3d 	bl	8009bd0 <_malloc_r>
 8009356:	4604      	mov	r4, r0
 8009358:	b140      	cbz	r0, 800936c <__sfmoreglue+0x28>
 800935a:	2100      	movs	r1, #0
 800935c:	e880 0042 	stmia.w	r0, {r1, r6}
 8009360:	300c      	adds	r0, #12
 8009362:	60a0      	str	r0, [r4, #8]
 8009364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009368:	f7fe fad7 	bl	800791a <memset>
 800936c:	4620      	mov	r0, r4
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <__sinit>:
 8009370:	6983      	ldr	r3, [r0, #24]
 8009372:	b510      	push	{r4, lr}
 8009374:	4604      	mov	r4, r0
 8009376:	bb33      	cbnz	r3, 80093c6 <__sinit+0x56>
 8009378:	6483      	str	r3, [r0, #72]	; 0x48
 800937a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800937c:	6503      	str	r3, [r0, #80]	; 0x50
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <__sinit+0x58>)
 8009380:	4a12      	ldr	r2, [pc, #72]	; (80093cc <__sinit+0x5c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6282      	str	r2, [r0, #40]	; 0x28
 8009386:	4298      	cmp	r0, r3
 8009388:	bf04      	itt	eq
 800938a:	2301      	moveq	r3, #1
 800938c:	6183      	streq	r3, [r0, #24]
 800938e:	f000 f81f 	bl	80093d0 <__sfp>
 8009392:	6060      	str	r0, [r4, #4]
 8009394:	4620      	mov	r0, r4
 8009396:	f000 f81b 	bl	80093d0 <__sfp>
 800939a:	60a0      	str	r0, [r4, #8]
 800939c:	4620      	mov	r0, r4
 800939e:	f000 f817 	bl	80093d0 <__sfp>
 80093a2:	2200      	movs	r2, #0
 80093a4:	60e0      	str	r0, [r4, #12]
 80093a6:	2104      	movs	r1, #4
 80093a8:	6860      	ldr	r0, [r4, #4]
 80093aa:	f7ff ffa7 	bl	80092fc <std.isra.0>
 80093ae:	2201      	movs	r2, #1
 80093b0:	2109      	movs	r1, #9
 80093b2:	68a0      	ldr	r0, [r4, #8]
 80093b4:	f7ff ffa2 	bl	80092fc <std.isra.0>
 80093b8:	2202      	movs	r2, #2
 80093ba:	2112      	movs	r1, #18
 80093bc:	68e0      	ldr	r0, [r4, #12]
 80093be:	f7ff ff9d 	bl	80092fc <std.isra.0>
 80093c2:	2301      	movs	r3, #1
 80093c4:	61a3      	str	r3, [r4, #24]
 80093c6:	bd10      	pop	{r4, pc}
 80093c8:	0800a768 	.word	0x0800a768
 80093cc:	080092f1 	.word	0x080092f1

080093d0 <__sfp>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <__sfp+0x74>)
 80093d4:	681e      	ldr	r6, [r3, #0]
 80093d6:	69b3      	ldr	r3, [r6, #24]
 80093d8:	4607      	mov	r7, r0
 80093da:	b913      	cbnz	r3, 80093e2 <__sfp+0x12>
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff ffc7 	bl	8009370 <__sinit>
 80093e2:	3648      	adds	r6, #72	; 0x48
 80093e4:	68b4      	ldr	r4, [r6, #8]
 80093e6:	6873      	ldr	r3, [r6, #4]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	d503      	bpl.n	80093f4 <__sfp+0x24>
 80093ec:	6833      	ldr	r3, [r6, #0]
 80093ee:	b133      	cbz	r3, 80093fe <__sfp+0x2e>
 80093f0:	6836      	ldr	r6, [r6, #0]
 80093f2:	e7f7      	b.n	80093e4 <__sfp+0x14>
 80093f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093f8:	b16d      	cbz	r5, 8009416 <__sfp+0x46>
 80093fa:	3468      	adds	r4, #104	; 0x68
 80093fc:	e7f4      	b.n	80093e8 <__sfp+0x18>
 80093fe:	2104      	movs	r1, #4
 8009400:	4638      	mov	r0, r7
 8009402:	f7ff ff9f 	bl	8009344 <__sfmoreglue>
 8009406:	6030      	str	r0, [r6, #0]
 8009408:	2800      	cmp	r0, #0
 800940a:	d1f1      	bne.n	80093f0 <__sfp+0x20>
 800940c:	230c      	movs	r3, #12
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	4604      	mov	r4, r0
 8009412:	4620      	mov	r0, r4
 8009414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800941a:	81e3      	strh	r3, [r4, #14]
 800941c:	2301      	movs	r3, #1
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	6665      	str	r5, [r4, #100]	; 0x64
 8009422:	6025      	str	r5, [r4, #0]
 8009424:	60a5      	str	r5, [r4, #8]
 8009426:	6065      	str	r5, [r4, #4]
 8009428:	6125      	str	r5, [r4, #16]
 800942a:	6165      	str	r5, [r4, #20]
 800942c:	61a5      	str	r5, [r4, #24]
 800942e:	2208      	movs	r2, #8
 8009430:	4629      	mov	r1, r5
 8009432:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009436:	f7fe fa70 	bl	800791a <memset>
 800943a:	6365      	str	r5, [r4, #52]	; 0x34
 800943c:	63a5      	str	r5, [r4, #56]	; 0x38
 800943e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009440:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009442:	e7e6      	b.n	8009412 <__sfp+0x42>
 8009444:	0800a768 	.word	0x0800a768

08009448 <_fwalk_reent>:
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009454:	2600      	movs	r6, #0
 8009456:	b914      	cbnz	r4, 800945e <_fwalk_reent+0x16>
 8009458:	4630      	mov	r0, r6
 800945a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945e:	68a5      	ldr	r5, [r4, #8]
 8009460:	6867      	ldr	r7, [r4, #4]
 8009462:	3f01      	subs	r7, #1
 8009464:	d501      	bpl.n	800946a <_fwalk_reent+0x22>
 8009466:	6824      	ldr	r4, [r4, #0]
 8009468:	e7f5      	b.n	8009456 <_fwalk_reent+0xe>
 800946a:	89ab      	ldrh	r3, [r5, #12]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d907      	bls.n	8009480 <_fwalk_reent+0x38>
 8009470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009474:	3301      	adds	r3, #1
 8009476:	d003      	beq.n	8009480 <_fwalk_reent+0x38>
 8009478:	4629      	mov	r1, r5
 800947a:	4640      	mov	r0, r8
 800947c:	47c8      	blx	r9
 800947e:	4306      	orrs	r6, r0
 8009480:	3568      	adds	r5, #104	; 0x68
 8009482:	e7ee      	b.n	8009462 <_fwalk_reent+0x1a>

08009484 <_localeconv_r>:
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <_localeconv_r+0x14>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6a18      	ldr	r0, [r3, #32]
 800948a:	4b04      	ldr	r3, [pc, #16]	; (800949c <_localeconv_r+0x18>)
 800948c:	2800      	cmp	r0, #0
 800948e:	bf08      	it	eq
 8009490:	4618      	moveq	r0, r3
 8009492:	30f0      	adds	r0, #240	; 0xf0
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000514 	.word	0x20000514
 800949c:	20000578 	.word	0x20000578

080094a0 <__swhatbuf_r>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	460e      	mov	r6, r1
 80094a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a8:	2900      	cmp	r1, #0
 80094aa:	b090      	sub	sp, #64	; 0x40
 80094ac:	4614      	mov	r4, r2
 80094ae:	461d      	mov	r5, r3
 80094b0:	da07      	bge.n	80094c2 <__swhatbuf_r+0x22>
 80094b2:	2300      	movs	r3, #0
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	89b3      	ldrh	r3, [r6, #12]
 80094b8:	061a      	lsls	r2, r3, #24
 80094ba:	d410      	bmi.n	80094de <__swhatbuf_r+0x3e>
 80094bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c0:	e00e      	b.n	80094e0 <__swhatbuf_r+0x40>
 80094c2:	aa01      	add	r2, sp, #4
 80094c4:	f000 fee8 	bl	800a298 <_fstat_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dbf2      	blt.n	80094b2 <__swhatbuf_r+0x12>
 80094cc:	9a02      	ldr	r2, [sp, #8]
 80094ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094d6:	425a      	negs	r2, r3
 80094d8:	415a      	adcs	r2, r3
 80094da:	602a      	str	r2, [r5, #0]
 80094dc:	e7ee      	b.n	80094bc <__swhatbuf_r+0x1c>
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	2000      	movs	r0, #0
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	b010      	add	sp, #64	; 0x40
 80094e6:	bd70      	pop	{r4, r5, r6, pc}

080094e8 <__smakebuf_r>:
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094ec:	079d      	lsls	r5, r3, #30
 80094ee:	4606      	mov	r6, r0
 80094f0:	460c      	mov	r4, r1
 80094f2:	d507      	bpl.n	8009504 <__smakebuf_r+0x1c>
 80094f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	2301      	movs	r3, #1
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	b002      	add	sp, #8
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	ab01      	add	r3, sp, #4
 8009506:	466a      	mov	r2, sp
 8009508:	f7ff ffca 	bl	80094a0 <__swhatbuf_r>
 800950c:	9900      	ldr	r1, [sp, #0]
 800950e:	4605      	mov	r5, r0
 8009510:	4630      	mov	r0, r6
 8009512:	f000 fb5d 	bl	8009bd0 <_malloc_r>
 8009516:	b948      	cbnz	r0, 800952c <__smakebuf_r+0x44>
 8009518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800951c:	059a      	lsls	r2, r3, #22
 800951e:	d4ef      	bmi.n	8009500 <__smakebuf_r+0x18>
 8009520:	f023 0303 	bic.w	r3, r3, #3
 8009524:	f043 0302 	orr.w	r3, r3, #2
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	e7e3      	b.n	80094f4 <__smakebuf_r+0xc>
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <__smakebuf_r+0x7c>)
 800952e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	6020      	str	r0, [r4, #0]
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	9b00      	ldr	r3, [sp, #0]
 800953c:	6163      	str	r3, [r4, #20]
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	6120      	str	r0, [r4, #16]
 8009542:	b15b      	cbz	r3, 800955c <__smakebuf_r+0x74>
 8009544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009548:	4630      	mov	r0, r6
 800954a:	f000 feb7 	bl	800a2bc <_isatty_r>
 800954e:	b128      	cbz	r0, 800955c <__smakebuf_r+0x74>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	431d      	orrs	r5, r3
 8009560:	81a5      	strh	r5, [r4, #12]
 8009562:	e7cd      	b.n	8009500 <__smakebuf_r+0x18>
 8009564:	080092f1 	.word	0x080092f1

08009568 <malloc>:
 8009568:	4b02      	ldr	r3, [pc, #8]	; (8009574 <malloc+0xc>)
 800956a:	4601      	mov	r1, r0
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	f000 bb2f 	b.w	8009bd0 <_malloc_r>
 8009572:	bf00      	nop
 8009574:	20000514 	.word	0x20000514

08009578 <_Balloc>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800957c:	4604      	mov	r4, r0
 800957e:	460e      	mov	r6, r1
 8009580:	b93d      	cbnz	r5, 8009592 <_Balloc+0x1a>
 8009582:	2010      	movs	r0, #16
 8009584:	f7ff fff0 	bl	8009568 <malloc>
 8009588:	6260      	str	r0, [r4, #36]	; 0x24
 800958a:	6045      	str	r5, [r0, #4]
 800958c:	6085      	str	r5, [r0, #8]
 800958e:	6005      	str	r5, [r0, #0]
 8009590:	60c5      	str	r5, [r0, #12]
 8009592:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009594:	68eb      	ldr	r3, [r5, #12]
 8009596:	b183      	cbz	r3, 80095ba <_Balloc+0x42>
 8009598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095a0:	b9b8      	cbnz	r0, 80095d2 <_Balloc+0x5a>
 80095a2:	2101      	movs	r1, #1
 80095a4:	fa01 f506 	lsl.w	r5, r1, r6
 80095a8:	1d6a      	adds	r2, r5, #5
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fab3 	bl	8009b18 <_calloc_r>
 80095b2:	b160      	cbz	r0, 80095ce <_Balloc+0x56>
 80095b4:	6046      	str	r6, [r0, #4]
 80095b6:	6085      	str	r5, [r0, #8]
 80095b8:	e00e      	b.n	80095d8 <_Balloc+0x60>
 80095ba:	2221      	movs	r2, #33	; 0x21
 80095bc:	2104      	movs	r1, #4
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 faaa 	bl	8009b18 <_calloc_r>
 80095c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c6:	60e8      	str	r0, [r5, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e4      	bne.n	8009598 <_Balloc+0x20>
 80095ce:	2000      	movs	r0, #0
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
 80095d2:	6802      	ldr	r2, [r0, #0]
 80095d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80095d8:	2300      	movs	r3, #0
 80095da:	6103      	str	r3, [r0, #16]
 80095dc:	60c3      	str	r3, [r0, #12]
 80095de:	bd70      	pop	{r4, r5, r6, pc}

080095e0 <_Bfree>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80095e4:	4606      	mov	r6, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	b93c      	cbnz	r4, 80095fa <_Bfree+0x1a>
 80095ea:	2010      	movs	r0, #16
 80095ec:	f7ff ffbc 	bl	8009568 <malloc>
 80095f0:	6270      	str	r0, [r6, #36]	; 0x24
 80095f2:	6044      	str	r4, [r0, #4]
 80095f4:	6084      	str	r4, [r0, #8]
 80095f6:	6004      	str	r4, [r0, #0]
 80095f8:	60c4      	str	r4, [r0, #12]
 80095fa:	b13d      	cbz	r5, 800960c <_Bfree+0x2c>
 80095fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095fe:	686a      	ldr	r2, [r5, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009606:	6029      	str	r1, [r5, #0]
 8009608:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800960c:	bd70      	pop	{r4, r5, r6, pc}

0800960e <__multadd>:
 800960e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	690d      	ldr	r5, [r1, #16]
 8009614:	461f      	mov	r7, r3
 8009616:	4606      	mov	r6, r0
 8009618:	460c      	mov	r4, r1
 800961a:	f101 0e14 	add.w	lr, r1, #20
 800961e:	2300      	movs	r3, #0
 8009620:	f8de 0000 	ldr.w	r0, [lr]
 8009624:	b281      	uxth	r1, r0
 8009626:	fb02 7101 	mla	r1, r2, r1, r7
 800962a:	0c0f      	lsrs	r7, r1, #16
 800962c:	0c00      	lsrs	r0, r0, #16
 800962e:	fb02 7000 	mla	r0, r2, r0, r7
 8009632:	b289      	uxth	r1, r1
 8009634:	3301      	adds	r3, #1
 8009636:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800963a:	429d      	cmp	r5, r3
 800963c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009640:	f84e 1b04 	str.w	r1, [lr], #4
 8009644:	dcec      	bgt.n	8009620 <__multadd+0x12>
 8009646:	b1d7      	cbz	r7, 800967e <__multadd+0x70>
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	429d      	cmp	r5, r3
 800964c:	db12      	blt.n	8009674 <__multadd+0x66>
 800964e:	6861      	ldr	r1, [r4, #4]
 8009650:	4630      	mov	r0, r6
 8009652:	3101      	adds	r1, #1
 8009654:	f7ff ff90 	bl	8009578 <_Balloc>
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	3202      	adds	r2, #2
 800965c:	f104 010c 	add.w	r1, r4, #12
 8009660:	4680      	mov	r8, r0
 8009662:	0092      	lsls	r2, r2, #2
 8009664:	300c      	adds	r0, #12
 8009666:	f7fe f94d 	bl	8007904 <memcpy>
 800966a:	4621      	mov	r1, r4
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffb7 	bl	80095e0 <_Bfree>
 8009672:	4644      	mov	r4, r8
 8009674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009678:	3501      	adds	r5, #1
 800967a:	615f      	str	r7, [r3, #20]
 800967c:	6125      	str	r5, [r4, #16]
 800967e:	4620      	mov	r0, r4
 8009680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009684 <__hi0bits>:
 8009684:	0c02      	lsrs	r2, r0, #16
 8009686:	0412      	lsls	r2, r2, #16
 8009688:	4603      	mov	r3, r0
 800968a:	b9b2      	cbnz	r2, 80096ba <__hi0bits+0x36>
 800968c:	0403      	lsls	r3, r0, #16
 800968e:	2010      	movs	r0, #16
 8009690:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009694:	bf04      	itt	eq
 8009696:	021b      	lsleq	r3, r3, #8
 8009698:	3008      	addeq	r0, #8
 800969a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800969e:	bf04      	itt	eq
 80096a0:	011b      	lsleq	r3, r3, #4
 80096a2:	3004      	addeq	r0, #4
 80096a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096a8:	bf04      	itt	eq
 80096aa:	009b      	lsleq	r3, r3, #2
 80096ac:	3002      	addeq	r0, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	db06      	blt.n	80096c0 <__hi0bits+0x3c>
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	d503      	bpl.n	80096be <__hi0bits+0x3a>
 80096b6:	3001      	adds	r0, #1
 80096b8:	4770      	bx	lr
 80096ba:	2000      	movs	r0, #0
 80096bc:	e7e8      	b.n	8009690 <__hi0bits+0xc>
 80096be:	2020      	movs	r0, #32
 80096c0:	4770      	bx	lr

080096c2 <__lo0bits>:
 80096c2:	6803      	ldr	r3, [r0, #0]
 80096c4:	f013 0207 	ands.w	r2, r3, #7
 80096c8:	4601      	mov	r1, r0
 80096ca:	d00b      	beq.n	80096e4 <__lo0bits+0x22>
 80096cc:	07da      	lsls	r2, r3, #31
 80096ce:	d423      	bmi.n	8009718 <__lo0bits+0x56>
 80096d0:	0798      	lsls	r0, r3, #30
 80096d2:	bf49      	itett	mi
 80096d4:	085b      	lsrmi	r3, r3, #1
 80096d6:	089b      	lsrpl	r3, r3, #2
 80096d8:	2001      	movmi	r0, #1
 80096da:	600b      	strmi	r3, [r1, #0]
 80096dc:	bf5c      	itt	pl
 80096de:	600b      	strpl	r3, [r1, #0]
 80096e0:	2002      	movpl	r0, #2
 80096e2:	4770      	bx	lr
 80096e4:	b298      	uxth	r0, r3
 80096e6:	b9a8      	cbnz	r0, 8009714 <__lo0bits+0x52>
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	2010      	movs	r0, #16
 80096ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096f0:	bf04      	itt	eq
 80096f2:	0a1b      	lsreq	r3, r3, #8
 80096f4:	3008      	addeq	r0, #8
 80096f6:	071a      	lsls	r2, r3, #28
 80096f8:	bf04      	itt	eq
 80096fa:	091b      	lsreq	r3, r3, #4
 80096fc:	3004      	addeq	r0, #4
 80096fe:	079a      	lsls	r2, r3, #30
 8009700:	bf04      	itt	eq
 8009702:	089b      	lsreq	r3, r3, #2
 8009704:	3002      	addeq	r0, #2
 8009706:	07da      	lsls	r2, r3, #31
 8009708:	d402      	bmi.n	8009710 <__lo0bits+0x4e>
 800970a:	085b      	lsrs	r3, r3, #1
 800970c:	d006      	beq.n	800971c <__lo0bits+0x5a>
 800970e:	3001      	adds	r0, #1
 8009710:	600b      	str	r3, [r1, #0]
 8009712:	4770      	bx	lr
 8009714:	4610      	mov	r0, r2
 8009716:	e7e9      	b.n	80096ec <__lo0bits+0x2a>
 8009718:	2000      	movs	r0, #0
 800971a:	4770      	bx	lr
 800971c:	2020      	movs	r0, #32
 800971e:	4770      	bx	lr

08009720 <__i2b>:
 8009720:	b510      	push	{r4, lr}
 8009722:	460c      	mov	r4, r1
 8009724:	2101      	movs	r1, #1
 8009726:	f7ff ff27 	bl	8009578 <_Balloc>
 800972a:	2201      	movs	r2, #1
 800972c:	6144      	str	r4, [r0, #20]
 800972e:	6102      	str	r2, [r0, #16]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__multiply>:
 8009732:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009736:	4614      	mov	r4, r2
 8009738:	690a      	ldr	r2, [r1, #16]
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	429a      	cmp	r2, r3
 800973e:	bfb8      	it	lt
 8009740:	460b      	movlt	r3, r1
 8009742:	4689      	mov	r9, r1
 8009744:	bfbc      	itt	lt
 8009746:	46a1      	movlt	r9, r4
 8009748:	461c      	movlt	r4, r3
 800974a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800974e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009752:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009756:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800975a:	eb07 060a 	add.w	r6, r7, sl
 800975e:	429e      	cmp	r6, r3
 8009760:	bfc8      	it	gt
 8009762:	3101      	addgt	r1, #1
 8009764:	f7ff ff08 	bl	8009578 <_Balloc>
 8009768:	f100 0514 	add.w	r5, r0, #20
 800976c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009770:	462b      	mov	r3, r5
 8009772:	2200      	movs	r2, #0
 8009774:	4543      	cmp	r3, r8
 8009776:	d316      	bcc.n	80097a6 <__multiply+0x74>
 8009778:	f104 0214 	add.w	r2, r4, #20
 800977c:	f109 0114 	add.w	r1, r9, #20
 8009780:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8009784:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	9c01      	ldr	r4, [sp, #4]
 800978c:	4294      	cmp	r4, r2
 800978e:	4613      	mov	r3, r2
 8009790:	d80c      	bhi.n	80097ac <__multiply+0x7a>
 8009792:	2e00      	cmp	r6, #0
 8009794:	dd03      	ble.n	800979e <__multiply+0x6c>
 8009796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800979a:	2b00      	cmp	r3, #0
 800979c:	d054      	beq.n	8009848 <__multiply+0x116>
 800979e:	6106      	str	r6, [r0, #16]
 80097a0:	b003      	add	sp, #12
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	f843 2b04 	str.w	r2, [r3], #4
 80097aa:	e7e3      	b.n	8009774 <__multiply+0x42>
 80097ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80097b0:	3204      	adds	r2, #4
 80097b2:	f1ba 0f00 	cmp.w	sl, #0
 80097b6:	d020      	beq.n	80097fa <__multiply+0xc8>
 80097b8:	46ae      	mov	lr, r5
 80097ba:	4689      	mov	r9, r1
 80097bc:	f04f 0c00 	mov.w	ip, #0
 80097c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80097c4:	f8be b000 	ldrh.w	fp, [lr]
 80097c8:	b2a3      	uxth	r3, r4
 80097ca:	fb0a b303 	mla	r3, sl, r3, fp
 80097ce:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80097d2:	f8de 4000 	ldr.w	r4, [lr]
 80097d6:	4463      	add	r3, ip
 80097d8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80097dc:	fb0a c40b 	mla	r4, sl, fp, ip
 80097e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80097ea:	454f      	cmp	r7, r9
 80097ec:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80097f0:	f84e 3b04 	str.w	r3, [lr], #4
 80097f4:	d8e4      	bhi.n	80097c0 <__multiply+0x8e>
 80097f6:	f8ce c000 	str.w	ip, [lr]
 80097fa:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80097fe:	f1b9 0f00 	cmp.w	r9, #0
 8009802:	d01f      	beq.n	8009844 <__multiply+0x112>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	46ae      	mov	lr, r5
 8009808:	468c      	mov	ip, r1
 800980a:	f04f 0a00 	mov.w	sl, #0
 800980e:	f8bc 4000 	ldrh.w	r4, [ip]
 8009812:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009816:	fb09 b404 	mla	r4, r9, r4, fp
 800981a:	44a2      	add	sl, r4
 800981c:	b29b      	uxth	r3, r3
 800981e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8009822:	f84e 3b04 	str.w	r3, [lr], #4
 8009826:	f85c 3b04 	ldr.w	r3, [ip], #4
 800982a:	f8be 4000 	ldrh.w	r4, [lr]
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	fb09 4303 	mla	r3, r9, r3, r4
 8009834:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8009838:	4567      	cmp	r7, ip
 800983a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800983e:	d8e6      	bhi.n	800980e <__multiply+0xdc>
 8009840:	f8ce 3000 	str.w	r3, [lr]
 8009844:	3504      	adds	r5, #4
 8009846:	e7a0      	b.n	800978a <__multiply+0x58>
 8009848:	3e01      	subs	r6, #1
 800984a:	e7a2      	b.n	8009792 <__multiply+0x60>

0800984c <__pow5mult>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4615      	mov	r5, r2
 8009852:	f012 0203 	ands.w	r2, r2, #3
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	d007      	beq.n	800986c <__pow5mult+0x20>
 800985c:	3a01      	subs	r2, #1
 800985e:	4c21      	ldr	r4, [pc, #132]	; (80098e4 <__pow5mult+0x98>)
 8009860:	2300      	movs	r3, #0
 8009862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009866:	f7ff fed2 	bl	800960e <__multadd>
 800986a:	4607      	mov	r7, r0
 800986c:	10ad      	asrs	r5, r5, #2
 800986e:	d035      	beq.n	80098dc <__pow5mult+0x90>
 8009870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009872:	b93c      	cbnz	r4, 8009884 <__pow5mult+0x38>
 8009874:	2010      	movs	r0, #16
 8009876:	f7ff fe77 	bl	8009568 <malloc>
 800987a:	6270      	str	r0, [r6, #36]	; 0x24
 800987c:	6044      	str	r4, [r0, #4]
 800987e:	6084      	str	r4, [r0, #8]
 8009880:	6004      	str	r4, [r0, #0]
 8009882:	60c4      	str	r4, [r0, #12]
 8009884:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800988c:	b94c      	cbnz	r4, 80098a2 <__pow5mult+0x56>
 800988e:	f240 2171 	movw	r1, #625	; 0x271
 8009892:	4630      	mov	r0, r6
 8009894:	f7ff ff44 	bl	8009720 <__i2b>
 8009898:	2300      	movs	r3, #0
 800989a:	f8c8 0008 	str.w	r0, [r8, #8]
 800989e:	4604      	mov	r4, r0
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 0800 	mov.w	r8, #0
 80098a6:	07eb      	lsls	r3, r5, #31
 80098a8:	d50a      	bpl.n	80098c0 <__pow5mult+0x74>
 80098aa:	4639      	mov	r1, r7
 80098ac:	4622      	mov	r2, r4
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ff3f 	bl	8009732 <__multiply>
 80098b4:	4639      	mov	r1, r7
 80098b6:	4681      	mov	r9, r0
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7ff fe91 	bl	80095e0 <_Bfree>
 80098be:	464f      	mov	r7, r9
 80098c0:	106d      	asrs	r5, r5, #1
 80098c2:	d00b      	beq.n	80098dc <__pow5mult+0x90>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	b938      	cbnz	r0, 80098d8 <__pow5mult+0x8c>
 80098c8:	4622      	mov	r2, r4
 80098ca:	4621      	mov	r1, r4
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff ff30 	bl	8009732 <__multiply>
 80098d2:	6020      	str	r0, [r4, #0]
 80098d4:	f8c0 8000 	str.w	r8, [r0]
 80098d8:	4604      	mov	r4, r0
 80098da:	e7e4      	b.n	80098a6 <__pow5mult+0x5a>
 80098dc:	4638      	mov	r0, r7
 80098de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e2:	bf00      	nop
 80098e4:	0800a900 	.word	0x0800a900

080098e8 <__lshift>:
 80098e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ec:	460c      	mov	r4, r1
 80098ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	6849      	ldr	r1, [r1, #4]
 80098f6:	eb0a 0903 	add.w	r9, sl, r3
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	4607      	mov	r7, r0
 80098fe:	4616      	mov	r6, r2
 8009900:	f109 0501 	add.w	r5, r9, #1
 8009904:	42ab      	cmp	r3, r5
 8009906:	db31      	blt.n	800996c <__lshift+0x84>
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff fe35 	bl	8009578 <_Balloc>
 800990e:	2200      	movs	r2, #0
 8009910:	4680      	mov	r8, r0
 8009912:	f100 0314 	add.w	r3, r0, #20
 8009916:	4611      	mov	r1, r2
 8009918:	4552      	cmp	r2, sl
 800991a:	db2a      	blt.n	8009972 <__lshift+0x8a>
 800991c:	6920      	ldr	r0, [r4, #16]
 800991e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009922:	f104 0114 	add.w	r1, r4, #20
 8009926:	f016 021f 	ands.w	r2, r6, #31
 800992a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800992e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009932:	d022      	beq.n	800997a <__lshift+0x92>
 8009934:	f1c2 0c20 	rsb	ip, r2, #32
 8009938:	2000      	movs	r0, #0
 800993a:	680e      	ldr	r6, [r1, #0]
 800993c:	4096      	lsls	r6, r2
 800993e:	4330      	orrs	r0, r6
 8009940:	f843 0b04 	str.w	r0, [r3], #4
 8009944:	f851 0b04 	ldr.w	r0, [r1], #4
 8009948:	458e      	cmp	lr, r1
 800994a:	fa20 f00c 	lsr.w	r0, r0, ip
 800994e:	d8f4      	bhi.n	800993a <__lshift+0x52>
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	b108      	cbz	r0, 8009958 <__lshift+0x70>
 8009954:	f109 0502 	add.w	r5, r9, #2
 8009958:	3d01      	subs	r5, #1
 800995a:	4638      	mov	r0, r7
 800995c:	f8c8 5010 	str.w	r5, [r8, #16]
 8009960:	4621      	mov	r1, r4
 8009962:	f7ff fe3d 	bl	80095e0 <_Bfree>
 8009966:	4640      	mov	r0, r8
 8009968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996c:	3101      	adds	r1, #1
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	e7c8      	b.n	8009904 <__lshift+0x1c>
 8009972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009976:	3201      	adds	r2, #1
 8009978:	e7ce      	b.n	8009918 <__lshift+0x30>
 800997a:	3b04      	subs	r3, #4
 800997c:	f851 2b04 	ldr.w	r2, [r1], #4
 8009980:	f843 2f04 	str.w	r2, [r3, #4]!
 8009984:	458e      	cmp	lr, r1
 8009986:	d8f9      	bhi.n	800997c <__lshift+0x94>
 8009988:	e7e6      	b.n	8009958 <__lshift+0x70>

0800998a <__mcmp>:
 800998a:	6903      	ldr	r3, [r0, #16]
 800998c:	690a      	ldr	r2, [r1, #16]
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	b530      	push	{r4, r5, lr}
 8009992:	d10c      	bne.n	80099ae <__mcmp+0x24>
 8009994:	0092      	lsls	r2, r2, #2
 8009996:	3014      	adds	r0, #20
 8009998:	3114      	adds	r1, #20
 800999a:	1884      	adds	r4, r0, r2
 800999c:	4411      	add	r1, r2
 800999e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099a2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099a6:	4295      	cmp	r5, r2
 80099a8:	d003      	beq.n	80099b2 <__mcmp+0x28>
 80099aa:	d305      	bcc.n	80099b8 <__mcmp+0x2e>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4618      	mov	r0, r3
 80099b0:	bd30      	pop	{r4, r5, pc}
 80099b2:	42a0      	cmp	r0, r4
 80099b4:	d3f3      	bcc.n	800999e <__mcmp+0x14>
 80099b6:	e7fa      	b.n	80099ae <__mcmp+0x24>
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295
 80099bc:	e7f7      	b.n	80099ae <__mcmp+0x24>

080099be <__mdiff>:
 80099be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c2:	460d      	mov	r5, r1
 80099c4:	4607      	mov	r7, r0
 80099c6:	4611      	mov	r1, r2
 80099c8:	4628      	mov	r0, r5
 80099ca:	4614      	mov	r4, r2
 80099cc:	f7ff ffdd 	bl	800998a <__mcmp>
 80099d0:	1e06      	subs	r6, r0, #0
 80099d2:	d108      	bne.n	80099e6 <__mdiff+0x28>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4638      	mov	r0, r7
 80099d8:	f7ff fdce 	bl	8009578 <_Balloc>
 80099dc:	2301      	movs	r3, #1
 80099de:	6103      	str	r3, [r0, #16]
 80099e0:	6146      	str	r6, [r0, #20]
 80099e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e6:	bfa4      	itt	ge
 80099e8:	4623      	movge	r3, r4
 80099ea:	462c      	movge	r4, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	6861      	ldr	r1, [r4, #4]
 80099f0:	bfa6      	itte	ge
 80099f2:	461d      	movge	r5, r3
 80099f4:	2600      	movge	r6, #0
 80099f6:	2601      	movlt	r6, #1
 80099f8:	f7ff fdbe 	bl	8009578 <_Balloc>
 80099fc:	692b      	ldr	r3, [r5, #16]
 80099fe:	60c6      	str	r6, [r0, #12]
 8009a00:	6926      	ldr	r6, [r4, #16]
 8009a02:	f105 0914 	add.w	r9, r5, #20
 8009a06:	f104 0214 	add.w	r2, r4, #20
 8009a0a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a0e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a12:	f100 0514 	add.w	r5, r0, #20
 8009a16:	f04f 0c00 	mov.w	ip, #0
 8009a1a:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a22:	fa1c f18a 	uxtah	r1, ip, sl
 8009a26:	b2a3      	uxth	r3, r4
 8009a28:	1ac9      	subs	r1, r1, r3
 8009a2a:	0c23      	lsrs	r3, r4, #16
 8009a2c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a30:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a34:	b289      	uxth	r1, r1
 8009a36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a3a:	45c8      	cmp	r8, r9
 8009a3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a40:	4696      	mov	lr, r2
 8009a42:	f845 3b04 	str.w	r3, [r5], #4
 8009a46:	d8e8      	bhi.n	8009a1a <__mdiff+0x5c>
 8009a48:	45be      	cmp	lr, r7
 8009a4a:	d305      	bcc.n	8009a58 <__mdiff+0x9a>
 8009a4c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a50:	b18b      	cbz	r3, 8009a76 <__mdiff+0xb8>
 8009a52:	6106      	str	r6, [r0, #16]
 8009a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a58:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009a5c:	fa1c f381 	uxtah	r3, ip, r1
 8009a60:	141a      	asrs	r2, r3, #16
 8009a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a70:	f845 3b04 	str.w	r3, [r5], #4
 8009a74:	e7e8      	b.n	8009a48 <__mdiff+0x8a>
 8009a76:	3e01      	subs	r6, #1
 8009a78:	e7e8      	b.n	8009a4c <__mdiff+0x8e>

08009a7a <__d2b>:
 8009a7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a7e:	460e      	mov	r6, r1
 8009a80:	2101      	movs	r1, #1
 8009a82:	ec59 8b10 	vmov	r8, r9, d0
 8009a86:	4615      	mov	r5, r2
 8009a88:	f7ff fd76 	bl	8009578 <_Balloc>
 8009a8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a90:	4607      	mov	r7, r0
 8009a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a96:	bb34      	cbnz	r4, 8009ae6 <__d2b+0x6c>
 8009a98:	9301      	str	r3, [sp, #4]
 8009a9a:	f1b8 0f00 	cmp.w	r8, #0
 8009a9e:	d027      	beq.n	8009af0 <__d2b+0x76>
 8009aa0:	a802      	add	r0, sp, #8
 8009aa2:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009aa6:	f7ff fe0c 	bl	80096c2 <__lo0bits>
 8009aaa:	9900      	ldr	r1, [sp, #0]
 8009aac:	b1f0      	cbz	r0, 8009aec <__d2b+0x72>
 8009aae:	9a01      	ldr	r2, [sp, #4]
 8009ab0:	f1c0 0320 	rsb	r3, r0, #32
 8009ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	40c2      	lsrs	r2, r0
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	9201      	str	r2, [sp, #4]
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bf14      	ite	ne
 8009ac8:	2102      	movne	r1, #2
 8009aca:	2101      	moveq	r1, #1
 8009acc:	6139      	str	r1, [r7, #16]
 8009ace:	b1c4      	cbz	r4, 8009b02 <__d2b+0x88>
 8009ad0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ad4:	4404      	add	r4, r0
 8009ad6:	6034      	str	r4, [r6, #0]
 8009ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009adc:	6028      	str	r0, [r5, #0]
 8009ade:	4638      	mov	r0, r7
 8009ae0:	b003      	add	sp, #12
 8009ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aea:	e7d5      	b.n	8009a98 <__d2b+0x1e>
 8009aec:	6179      	str	r1, [r7, #20]
 8009aee:	e7e7      	b.n	8009ac0 <__d2b+0x46>
 8009af0:	a801      	add	r0, sp, #4
 8009af2:	f7ff fde6 	bl	80096c2 <__lo0bits>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	2101      	movs	r1, #1
 8009afc:	6139      	str	r1, [r7, #16]
 8009afe:	3020      	adds	r0, #32
 8009b00:	e7e5      	b.n	8009ace <__d2b+0x54>
 8009b02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009b06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b0a:	6030      	str	r0, [r6, #0]
 8009b0c:	6918      	ldr	r0, [r3, #16]
 8009b0e:	f7ff fdb9 	bl	8009684 <__hi0bits>
 8009b12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b16:	e7e1      	b.n	8009adc <__d2b+0x62>

08009b18 <_calloc_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	fb02 f401 	mul.w	r4, r2, r1
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f000 f856 	bl	8009bd0 <_malloc_r>
 8009b24:	4605      	mov	r5, r0
 8009b26:	b118      	cbz	r0, 8009b30 <_calloc_r+0x18>
 8009b28:	4622      	mov	r2, r4
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	f7fd fef5 	bl	800791a <memset>
 8009b30:	4628      	mov	r0, r5
 8009b32:	bd38      	pop	{r3, r4, r5, pc}

08009b34 <_free_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4605      	mov	r5, r0
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d045      	beq.n	8009bc8 <_free_r+0x94>
 8009b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b40:	1f0c      	subs	r4, r1, #4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	bfb8      	it	lt
 8009b46:	18e4      	addlt	r4, r4, r3
 8009b48:	f000 fc06 	bl	800a358 <__malloc_lock>
 8009b4c:	4a1f      	ldr	r2, [pc, #124]	; (8009bcc <_free_r+0x98>)
 8009b4e:	6813      	ldr	r3, [r2, #0]
 8009b50:	4610      	mov	r0, r2
 8009b52:	b933      	cbnz	r3, 8009b62 <_free_r+0x2e>
 8009b54:	6063      	str	r3, [r4, #4]
 8009b56:	6014      	str	r4, [r2, #0]
 8009b58:	4628      	mov	r0, r5
 8009b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b5e:	f000 bbfc 	b.w	800a35a <__malloc_unlock>
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	d90c      	bls.n	8009b80 <_free_r+0x4c>
 8009b66:	6821      	ldr	r1, [r4, #0]
 8009b68:	1862      	adds	r2, r4, r1
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	bf04      	itt	eq
 8009b6e:	681a      	ldreq	r2, [r3, #0]
 8009b70:	685b      	ldreq	r3, [r3, #4]
 8009b72:	6063      	str	r3, [r4, #4]
 8009b74:	bf04      	itt	eq
 8009b76:	1852      	addeq	r2, r2, r1
 8009b78:	6022      	streq	r2, [r4, #0]
 8009b7a:	6004      	str	r4, [r0, #0]
 8009b7c:	e7ec      	b.n	8009b58 <_free_r+0x24>
 8009b7e:	4613      	mov	r3, r2
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	b10a      	cbz	r2, 8009b88 <_free_r+0x54>
 8009b84:	42a2      	cmp	r2, r4
 8009b86:	d9fa      	bls.n	8009b7e <_free_r+0x4a>
 8009b88:	6819      	ldr	r1, [r3, #0]
 8009b8a:	1858      	adds	r0, r3, r1
 8009b8c:	42a0      	cmp	r0, r4
 8009b8e:	d10b      	bne.n	8009ba8 <_free_r+0x74>
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	4401      	add	r1, r0
 8009b94:	1858      	adds	r0, r3, r1
 8009b96:	4282      	cmp	r2, r0
 8009b98:	6019      	str	r1, [r3, #0]
 8009b9a:	d1dd      	bne.n	8009b58 <_free_r+0x24>
 8009b9c:	6810      	ldr	r0, [r2, #0]
 8009b9e:	6852      	ldr	r2, [r2, #4]
 8009ba0:	605a      	str	r2, [r3, #4]
 8009ba2:	4401      	add	r1, r0
 8009ba4:	6019      	str	r1, [r3, #0]
 8009ba6:	e7d7      	b.n	8009b58 <_free_r+0x24>
 8009ba8:	d902      	bls.n	8009bb0 <_free_r+0x7c>
 8009baa:	230c      	movs	r3, #12
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	e7d3      	b.n	8009b58 <_free_r+0x24>
 8009bb0:	6820      	ldr	r0, [r4, #0]
 8009bb2:	1821      	adds	r1, r4, r0
 8009bb4:	428a      	cmp	r2, r1
 8009bb6:	bf04      	itt	eq
 8009bb8:	6811      	ldreq	r1, [r2, #0]
 8009bba:	6852      	ldreq	r2, [r2, #4]
 8009bbc:	6062      	str	r2, [r4, #4]
 8009bbe:	bf04      	itt	eq
 8009bc0:	1809      	addeq	r1, r1, r0
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	605c      	str	r4, [r3, #4]
 8009bc6:	e7c7      	b.n	8009b58 <_free_r+0x24>
 8009bc8:	bd38      	pop	{r3, r4, r5, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000748 	.word	0x20000748

08009bd0 <_malloc_r>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	1ccd      	adds	r5, r1, #3
 8009bd4:	f025 0503 	bic.w	r5, r5, #3
 8009bd8:	3508      	adds	r5, #8
 8009bda:	2d0c      	cmp	r5, #12
 8009bdc:	bf38      	it	cc
 8009bde:	250c      	movcc	r5, #12
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	4606      	mov	r6, r0
 8009be4:	db01      	blt.n	8009bea <_malloc_r+0x1a>
 8009be6:	42a9      	cmp	r1, r5
 8009be8:	d903      	bls.n	8009bf2 <_malloc_r+0x22>
 8009bea:	230c      	movs	r3, #12
 8009bec:	6033      	str	r3, [r6, #0]
 8009bee:	2000      	movs	r0, #0
 8009bf0:	bd70      	pop	{r4, r5, r6, pc}
 8009bf2:	f000 fbb1 	bl	800a358 <__malloc_lock>
 8009bf6:	4a23      	ldr	r2, [pc, #140]	; (8009c84 <_malloc_r+0xb4>)
 8009bf8:	6814      	ldr	r4, [r2, #0]
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	b991      	cbnz	r1, 8009c24 <_malloc_r+0x54>
 8009bfe:	4c22      	ldr	r4, [pc, #136]	; (8009c88 <_malloc_r+0xb8>)
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	b91b      	cbnz	r3, 8009c0c <_malloc_r+0x3c>
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 fad1 	bl	800a1ac <_sbrk_r>
 8009c0a:	6020      	str	r0, [r4, #0]
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f000 facc 	bl	800a1ac <_sbrk_r>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d126      	bne.n	8009c66 <_malloc_r+0x96>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	6033      	str	r3, [r6, #0]
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 fb9c 	bl	800a35a <__malloc_unlock>
 8009c22:	e7e4      	b.n	8009bee <_malloc_r+0x1e>
 8009c24:	680b      	ldr	r3, [r1, #0]
 8009c26:	1b5b      	subs	r3, r3, r5
 8009c28:	d41a      	bmi.n	8009c60 <_malloc_r+0x90>
 8009c2a:	2b0b      	cmp	r3, #11
 8009c2c:	d90f      	bls.n	8009c4e <_malloc_r+0x7e>
 8009c2e:	600b      	str	r3, [r1, #0]
 8009c30:	50cd      	str	r5, [r1, r3]
 8009c32:	18cc      	adds	r4, r1, r3
 8009c34:	4630      	mov	r0, r6
 8009c36:	f000 fb90 	bl	800a35a <__malloc_unlock>
 8009c3a:	f104 000b 	add.w	r0, r4, #11
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	f020 0007 	bic.w	r0, r0, #7
 8009c44:	1ac3      	subs	r3, r0, r3
 8009c46:	d01b      	beq.n	8009c80 <_malloc_r+0xb0>
 8009c48:	425a      	negs	r2, r3
 8009c4a:	50e2      	str	r2, [r4, r3]
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
 8009c4e:	428c      	cmp	r4, r1
 8009c50:	bf0d      	iteet	eq
 8009c52:	6863      	ldreq	r3, [r4, #4]
 8009c54:	684b      	ldrne	r3, [r1, #4]
 8009c56:	6063      	strne	r3, [r4, #4]
 8009c58:	6013      	streq	r3, [r2, #0]
 8009c5a:	bf18      	it	ne
 8009c5c:	460c      	movne	r4, r1
 8009c5e:	e7e9      	b.n	8009c34 <_malloc_r+0x64>
 8009c60:	460c      	mov	r4, r1
 8009c62:	6849      	ldr	r1, [r1, #4]
 8009c64:	e7ca      	b.n	8009bfc <_malloc_r+0x2c>
 8009c66:	1cc4      	adds	r4, r0, #3
 8009c68:	f024 0403 	bic.w	r4, r4, #3
 8009c6c:	42a0      	cmp	r0, r4
 8009c6e:	d005      	beq.n	8009c7c <_malloc_r+0xac>
 8009c70:	1a21      	subs	r1, r4, r0
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 fa9a 	bl	800a1ac <_sbrk_r>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d0cd      	beq.n	8009c18 <_malloc_r+0x48>
 8009c7c:	6025      	str	r5, [r4, #0]
 8009c7e:	e7d9      	b.n	8009c34 <_malloc_r+0x64>
 8009c80:	bd70      	pop	{r4, r5, r6, pc}
 8009c82:	bf00      	nop
 8009c84:	20000748 	.word	0x20000748
 8009c88:	2000074c 	.word	0x2000074c

08009c8c <__ssputs_r>:
 8009c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	688e      	ldr	r6, [r1, #8]
 8009c92:	429e      	cmp	r6, r3
 8009c94:	4682      	mov	sl, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4691      	mov	r9, r2
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	d835      	bhi.n	8009d0a <__ssputs_r+0x7e>
 8009c9e:	898a      	ldrh	r2, [r1, #12]
 8009ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ca4:	d031      	beq.n	8009d0a <__ssputs_r+0x7e>
 8009ca6:	6825      	ldr	r5, [r4, #0]
 8009ca8:	6909      	ldr	r1, [r1, #16]
 8009caa:	1a6f      	subs	r7, r5, r1
 8009cac:	6965      	ldr	r5, [r4, #20]
 8009cae:	2302      	movs	r3, #2
 8009cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cb8:	f108 0301 	add.w	r3, r8, #1
 8009cbc:	443b      	add	r3, r7
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf38      	it	cc
 8009cc2:	461d      	movcc	r5, r3
 8009cc4:	0553      	lsls	r3, r2, #21
 8009cc6:	d531      	bpl.n	8009d2c <__ssputs_r+0xa0>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7ff ff81 	bl	8009bd0 <_malloc_r>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	b950      	cbnz	r0, 8009ce8 <__ssputs_r+0x5c>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	f8ca 3000 	str.w	r3, [sl]
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	463a      	mov	r2, r7
 8009cea:	6921      	ldr	r1, [r4, #16]
 8009cec:	f7fd fe0a 	bl	8007904 <memcpy>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	6126      	str	r6, [r4, #16]
 8009cfe:	6165      	str	r5, [r4, #20]
 8009d00:	443e      	add	r6, r7
 8009d02:	1bed      	subs	r5, r5, r7
 8009d04:	6026      	str	r6, [r4, #0]
 8009d06:	60a5      	str	r5, [r4, #8]
 8009d08:	4646      	mov	r6, r8
 8009d0a:	4546      	cmp	r6, r8
 8009d0c:	bf28      	it	cs
 8009d0e:	4646      	movcs	r6, r8
 8009d10:	4632      	mov	r2, r6
 8009d12:	4649      	mov	r1, r9
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	f000 fb05 	bl	800a324 <memmove>
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	441e      	add	r6, r3
 8009d24:	6026      	str	r6, [r4, #0]
 8009d26:	2000      	movs	r0, #0
 8009d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2c:	462a      	mov	r2, r5
 8009d2e:	f000 fb15 	bl	800a35c <_realloc_r>
 8009d32:	4606      	mov	r6, r0
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d1e1      	bne.n	8009cfc <__ssputs_r+0x70>
 8009d38:	6921      	ldr	r1, [r4, #16]
 8009d3a:	4650      	mov	r0, sl
 8009d3c:	f7ff fefa 	bl	8009b34 <_free_r>
 8009d40:	e7c7      	b.n	8009cd2 <__ssputs_r+0x46>
	...

08009d44 <_svfiprintf_r>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	b09d      	sub	sp, #116	; 0x74
 8009d4a:	4680      	mov	r8, r0
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	898b      	ldrh	r3, [r1, #12]
 8009d50:	061c      	lsls	r4, r3, #24
 8009d52:	460d      	mov	r5, r1
 8009d54:	4616      	mov	r6, r2
 8009d56:	d50f      	bpl.n	8009d78 <_svfiprintf_r+0x34>
 8009d58:	690b      	ldr	r3, [r1, #16]
 8009d5a:	b96b      	cbnz	r3, 8009d78 <_svfiprintf_r+0x34>
 8009d5c:	2140      	movs	r1, #64	; 0x40
 8009d5e:	f7ff ff37 	bl	8009bd0 <_malloc_r>
 8009d62:	6028      	str	r0, [r5, #0]
 8009d64:	6128      	str	r0, [r5, #16]
 8009d66:	b928      	cbnz	r0, 8009d74 <_svfiprintf_r+0x30>
 8009d68:	230c      	movs	r3, #12
 8009d6a:	f8c8 3000 	str.w	r3, [r8]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	e0c5      	b.n	8009f00 <_svfiprintf_r+0x1bc>
 8009d74:	2340      	movs	r3, #64	; 0x40
 8009d76:	616b      	str	r3, [r5, #20]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d82:	2330      	movs	r3, #48	; 0x30
 8009d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d88:	f04f 0b01 	mov.w	fp, #1
 8009d8c:	4637      	mov	r7, r6
 8009d8e:	463c      	mov	r4, r7
 8009d90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d13c      	bne.n	8009e12 <_svfiprintf_r+0xce>
 8009d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d9c:	d00b      	beq.n	8009db6 <_svfiprintf_r+0x72>
 8009d9e:	4653      	mov	r3, sl
 8009da0:	4632      	mov	r2, r6
 8009da2:	4629      	mov	r1, r5
 8009da4:	4640      	mov	r0, r8
 8009da6:	f7ff ff71 	bl	8009c8c <__ssputs_r>
 8009daa:	3001      	adds	r0, #1
 8009dac:	f000 80a3 	beq.w	8009ef6 <_svfiprintf_r+0x1b2>
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	4453      	add	r3, sl
 8009db4:	9309      	str	r3, [sp, #36]	; 0x24
 8009db6:	783b      	ldrb	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 809c 	beq.w	8009ef6 <_svfiprintf_r+0x1b2>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	9205      	str	r2, [sp, #20]
 8009dca:	9306      	str	r3, [sp, #24]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd2:	2205      	movs	r2, #5
 8009dd4:	7821      	ldrb	r1, [r4, #0]
 8009dd6:	4850      	ldr	r0, [pc, #320]	; (8009f18 <_svfiprintf_r+0x1d4>)
 8009dd8:	f7f6 fa02 	bl	80001e0 <memchr>
 8009ddc:	1c67      	adds	r7, r4, #1
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	b9d8      	cbnz	r0, 8009e1a <_svfiprintf_r+0xd6>
 8009de2:	06d9      	lsls	r1, r3, #27
 8009de4:	bf44      	itt	mi
 8009de6:	2220      	movmi	r2, #32
 8009de8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dec:	071a      	lsls	r2, r3, #28
 8009dee:	bf44      	itt	mi
 8009df0:	222b      	movmi	r2, #43	; 0x2b
 8009df2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009df6:	7822      	ldrb	r2, [r4, #0]
 8009df8:	2a2a      	cmp	r2, #42	; 0x2a
 8009dfa:	d016      	beq.n	8009e2a <_svfiprintf_r+0xe6>
 8009dfc:	9a07      	ldr	r2, [sp, #28]
 8009dfe:	2100      	movs	r1, #0
 8009e00:	200a      	movs	r0, #10
 8009e02:	4627      	mov	r7, r4
 8009e04:	3401      	adds	r4, #1
 8009e06:	783b      	ldrb	r3, [r7, #0]
 8009e08:	3b30      	subs	r3, #48	; 0x30
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	d951      	bls.n	8009eb2 <_svfiprintf_r+0x16e>
 8009e0e:	b1c9      	cbz	r1, 8009e44 <_svfiprintf_r+0x100>
 8009e10:	e011      	b.n	8009e36 <_svfiprintf_r+0xf2>
 8009e12:	2b25      	cmp	r3, #37	; 0x25
 8009e14:	d0c0      	beq.n	8009d98 <_svfiprintf_r+0x54>
 8009e16:	4627      	mov	r7, r4
 8009e18:	e7b9      	b.n	8009d8e <_svfiprintf_r+0x4a>
 8009e1a:	4a3f      	ldr	r2, [pc, #252]	; (8009f18 <_svfiprintf_r+0x1d4>)
 8009e1c:	1a80      	subs	r0, r0, r2
 8009e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8009e22:	4318      	orrs	r0, r3
 8009e24:	9004      	str	r0, [sp, #16]
 8009e26:	463c      	mov	r4, r7
 8009e28:	e7d3      	b.n	8009dd2 <_svfiprintf_r+0x8e>
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	1d11      	adds	r1, r2, #4
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	9103      	str	r1, [sp, #12]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	db01      	blt.n	8009e3a <_svfiprintf_r+0xf6>
 8009e36:	9207      	str	r2, [sp, #28]
 8009e38:	e004      	b.n	8009e44 <_svfiprintf_r+0x100>
 8009e3a:	4252      	negs	r2, r2
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	783b      	ldrb	r3, [r7, #0]
 8009e46:	2b2e      	cmp	r3, #46	; 0x2e
 8009e48:	d10e      	bne.n	8009e68 <_svfiprintf_r+0x124>
 8009e4a:	787b      	ldrb	r3, [r7, #1]
 8009e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4e:	f107 0101 	add.w	r1, r7, #1
 8009e52:	d132      	bne.n	8009eba <_svfiprintf_r+0x176>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	9203      	str	r2, [sp, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfb8      	it	lt
 8009e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e64:	3702      	adds	r7, #2
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	4c2c      	ldr	r4, [pc, #176]	; (8009f1c <_svfiprintf_r+0x1d8>)
 8009e6a:	7839      	ldrb	r1, [r7, #0]
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f7f6 f9b6 	bl	80001e0 <memchr>
 8009e74:	b138      	cbz	r0, 8009e86 <_svfiprintf_r+0x142>
 8009e76:	2340      	movs	r3, #64	; 0x40
 8009e78:	1b00      	subs	r0, r0, r4
 8009e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e7e:	9b04      	ldr	r3, [sp, #16]
 8009e80:	4303      	orrs	r3, r0
 8009e82:	9304      	str	r3, [sp, #16]
 8009e84:	3701      	adds	r7, #1
 8009e86:	7839      	ldrb	r1, [r7, #0]
 8009e88:	4825      	ldr	r0, [pc, #148]	; (8009f20 <_svfiprintf_r+0x1dc>)
 8009e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8e:	2206      	movs	r2, #6
 8009e90:	1c7e      	adds	r6, r7, #1
 8009e92:	f7f6 f9a5 	bl	80001e0 <memchr>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d035      	beq.n	8009f06 <_svfiprintf_r+0x1c2>
 8009e9a:	4b22      	ldr	r3, [pc, #136]	; (8009f24 <_svfiprintf_r+0x1e0>)
 8009e9c:	b9fb      	cbnz	r3, 8009ede <_svfiprintf_r+0x19a>
 8009e9e:	9b03      	ldr	r3, [sp, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	f023 0307 	bic.w	r3, r3, #7
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eac:	444b      	add	r3, r9
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	e76c      	b.n	8009d8c <_svfiprintf_r+0x48>
 8009eb2:	fb00 3202 	mla	r2, r0, r2, r3
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	e7a3      	b.n	8009e02 <_svfiprintf_r+0xbe>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	240a      	movs	r4, #10
 8009ec2:	460f      	mov	r7, r1
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	783a      	ldrb	r2, [r7, #0]
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d903      	bls.n	8009ed6 <_svfiprintf_r+0x192>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0ca      	beq.n	8009e68 <_svfiprintf_r+0x124>
 8009ed2:	9005      	str	r0, [sp, #20]
 8009ed4:	e7c8      	b.n	8009e68 <_svfiprintf_r+0x124>
 8009ed6:	fb04 2000 	mla	r0, r4, r0, r2
 8009eda:	2301      	movs	r3, #1
 8009edc:	e7f1      	b.n	8009ec2 <_svfiprintf_r+0x17e>
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4b10      	ldr	r3, [pc, #64]	; (8009f28 <_svfiprintf_r+0x1e4>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	4640      	mov	r0, r8
 8009eea:	f7fd fdb5 	bl	8007a58 <_printf_float>
 8009eee:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ef2:	4681      	mov	r9, r0
 8009ef4:	d1d9      	bne.n	8009eaa <_svfiprintf_r+0x166>
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	065b      	lsls	r3, r3, #25
 8009efa:	f53f af38 	bmi.w	8009d6e <_svfiprintf_r+0x2a>
 8009efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f00:	b01d      	add	sp, #116	; 0x74
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f06:	ab03      	add	r3, sp, #12
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <_svfiprintf_r+0x1e4>)
 8009f0e:	a904      	add	r1, sp, #16
 8009f10:	4640      	mov	r0, r8
 8009f12:	f7fe f857 	bl	8007fc4 <_printf_i>
 8009f16:	e7ea      	b.n	8009eee <_svfiprintf_r+0x1aa>
 8009f18:	0800a90c 	.word	0x0800a90c
 8009f1c:	0800a912 	.word	0x0800a912
 8009f20:	0800a916 	.word	0x0800a916
 8009f24:	08007a59 	.word	0x08007a59
 8009f28:	08009c8d 	.word	0x08009c8d

08009f2c <__sfputc_r>:
 8009f2c:	6893      	ldr	r3, [r2, #8]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	b410      	push	{r4}
 8009f34:	6093      	str	r3, [r2, #8]
 8009f36:	da09      	bge.n	8009f4c <__sfputc_r+0x20>
 8009f38:	6994      	ldr	r4, [r2, #24]
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	db02      	blt.n	8009f44 <__sfputc_r+0x18>
 8009f3e:	b2cb      	uxtb	r3, r1
 8009f40:	2b0a      	cmp	r3, #10
 8009f42:	d103      	bne.n	8009f4c <__sfputc_r+0x20>
 8009f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f48:	f7fe ba04 	b.w	8008354 <__swbuf_r>
 8009f4c:	6813      	ldr	r3, [r2, #0]
 8009f4e:	1c58      	adds	r0, r3, #1
 8009f50:	6010      	str	r0, [r2, #0]
 8009f52:	7019      	strb	r1, [r3, #0]
 8009f54:	b2c8      	uxtb	r0, r1
 8009f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <__sfputs_r>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	4614      	mov	r4, r2
 8009f64:	18d5      	adds	r5, r2, r3
 8009f66:	42ac      	cmp	r4, r5
 8009f68:	d101      	bne.n	8009f6e <__sfputs_r+0x12>
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	e007      	b.n	8009f7e <__sfputs_r+0x22>
 8009f6e:	463a      	mov	r2, r7
 8009f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7ff ffd9 	bl	8009f2c <__sfputc_r>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	d1f3      	bne.n	8009f66 <__sfputs_r+0xa>
 8009f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f80 <_vfiprintf_r>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	b09d      	sub	sp, #116	; 0x74
 8009f86:	460c      	mov	r4, r1
 8009f88:	4617      	mov	r7, r2
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	b118      	cbz	r0, 8009f98 <_vfiprintf_r+0x18>
 8009f90:	6983      	ldr	r3, [r0, #24]
 8009f92:	b90b      	cbnz	r3, 8009f98 <_vfiprintf_r+0x18>
 8009f94:	f7ff f9ec 	bl	8009370 <__sinit>
 8009f98:	4b7c      	ldr	r3, [pc, #496]	; (800a18c <_vfiprintf_r+0x20c>)
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	d157      	bne.n	800a04e <_vfiprintf_r+0xce>
 8009f9e:	6874      	ldr	r4, [r6, #4]
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	0718      	lsls	r0, r3, #28
 8009fa4:	d55d      	bpl.n	800a062 <_vfiprintf_r+0xe2>
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d05a      	beq.n	800a062 <_vfiprintf_r+0xe2>
 8009fac:	2300      	movs	r3, #0
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb6:	2330      	movs	r3, #48	; 0x30
 8009fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fbc:	f04f 0b01 	mov.w	fp, #1
 8009fc0:	46b8      	mov	r8, r7
 8009fc2:	4645      	mov	r5, r8
 8009fc4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d155      	bne.n	800a078 <_vfiprintf_r+0xf8>
 8009fcc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009fd0:	d00b      	beq.n	8009fea <_vfiprintf_r+0x6a>
 8009fd2:	4653      	mov	r3, sl
 8009fd4:	463a      	mov	r2, r7
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f7ff ffbf 	bl	8009f5c <__sfputs_r>
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f000 80c4 	beq.w	800a16c <_vfiprintf_r+0x1ec>
 8009fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fe6:	4453      	add	r3, sl
 8009fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fea:	f898 3000 	ldrb.w	r3, [r8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80bc 	beq.w	800a16c <_vfiprintf_r+0x1ec>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	9307      	str	r3, [sp, #28]
 8009ffe:	9205      	str	r2, [sp, #20]
 800a000:	9306      	str	r3, [sp, #24]
 800a002:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a006:	931a      	str	r3, [sp, #104]	; 0x68
 800a008:	2205      	movs	r2, #5
 800a00a:	7829      	ldrb	r1, [r5, #0]
 800a00c:	4860      	ldr	r0, [pc, #384]	; (800a190 <_vfiprintf_r+0x210>)
 800a00e:	f7f6 f8e7 	bl	80001e0 <memchr>
 800a012:	f105 0801 	add.w	r8, r5, #1
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	2800      	cmp	r0, #0
 800a01a:	d131      	bne.n	800a080 <_vfiprintf_r+0x100>
 800a01c:	06d9      	lsls	r1, r3, #27
 800a01e:	bf44      	itt	mi
 800a020:	2220      	movmi	r2, #32
 800a022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a026:	071a      	lsls	r2, r3, #28
 800a028:	bf44      	itt	mi
 800a02a:	222b      	movmi	r2, #43	; 0x2b
 800a02c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a030:	782a      	ldrb	r2, [r5, #0]
 800a032:	2a2a      	cmp	r2, #42	; 0x2a
 800a034:	d02c      	beq.n	800a090 <_vfiprintf_r+0x110>
 800a036:	9a07      	ldr	r2, [sp, #28]
 800a038:	2100      	movs	r1, #0
 800a03a:	200a      	movs	r0, #10
 800a03c:	46a8      	mov	r8, r5
 800a03e:	3501      	adds	r5, #1
 800a040:	f898 3000 	ldrb.w	r3, [r8]
 800a044:	3b30      	subs	r3, #48	; 0x30
 800a046:	2b09      	cmp	r3, #9
 800a048:	d96d      	bls.n	800a126 <_vfiprintf_r+0x1a6>
 800a04a:	b371      	cbz	r1, 800a0aa <_vfiprintf_r+0x12a>
 800a04c:	e026      	b.n	800a09c <_vfiprintf_r+0x11c>
 800a04e:	4b51      	ldr	r3, [pc, #324]	; (800a194 <_vfiprintf_r+0x214>)
 800a050:	429c      	cmp	r4, r3
 800a052:	d101      	bne.n	800a058 <_vfiprintf_r+0xd8>
 800a054:	68b4      	ldr	r4, [r6, #8]
 800a056:	e7a3      	b.n	8009fa0 <_vfiprintf_r+0x20>
 800a058:	4b4f      	ldr	r3, [pc, #316]	; (800a198 <_vfiprintf_r+0x218>)
 800a05a:	429c      	cmp	r4, r3
 800a05c:	bf08      	it	eq
 800a05e:	68f4      	ldreq	r4, [r6, #12]
 800a060:	e79e      	b.n	8009fa0 <_vfiprintf_r+0x20>
 800a062:	4621      	mov	r1, r4
 800a064:	4630      	mov	r0, r6
 800a066:	f7fe f9c7 	bl	80083f8 <__swsetup_r>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d09e      	beq.n	8009fac <_vfiprintf_r+0x2c>
 800a06e:	f04f 30ff 	mov.w	r0, #4294967295
 800a072:	b01d      	add	sp, #116	; 0x74
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a078:	2b25      	cmp	r3, #37	; 0x25
 800a07a:	d0a7      	beq.n	8009fcc <_vfiprintf_r+0x4c>
 800a07c:	46a8      	mov	r8, r5
 800a07e:	e7a0      	b.n	8009fc2 <_vfiprintf_r+0x42>
 800a080:	4a43      	ldr	r2, [pc, #268]	; (800a190 <_vfiprintf_r+0x210>)
 800a082:	1a80      	subs	r0, r0, r2
 800a084:	fa0b f000 	lsl.w	r0, fp, r0
 800a088:	4318      	orrs	r0, r3
 800a08a:	9004      	str	r0, [sp, #16]
 800a08c:	4645      	mov	r5, r8
 800a08e:	e7bb      	b.n	800a008 <_vfiprintf_r+0x88>
 800a090:	9a03      	ldr	r2, [sp, #12]
 800a092:	1d11      	adds	r1, r2, #4
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	9103      	str	r1, [sp, #12]
 800a098:	2a00      	cmp	r2, #0
 800a09a:	db01      	blt.n	800a0a0 <_vfiprintf_r+0x120>
 800a09c:	9207      	str	r2, [sp, #28]
 800a09e:	e004      	b.n	800a0aa <_vfiprintf_r+0x12a>
 800a0a0:	4252      	negs	r2, r2
 800a0a2:	f043 0302 	orr.w	r3, r3, #2
 800a0a6:	9207      	str	r2, [sp, #28]
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	f898 3000 	ldrb.w	r3, [r8]
 800a0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b0:	d110      	bne.n	800a0d4 <_vfiprintf_r+0x154>
 800a0b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b8:	f108 0101 	add.w	r1, r8, #1
 800a0bc:	d137      	bne.n	800a12e <_vfiprintf_r+0x1ae>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	9203      	str	r2, [sp, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfb8      	it	lt
 800a0ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0ce:	f108 0802 	add.w	r8, r8, #2
 800a0d2:	9305      	str	r3, [sp, #20]
 800a0d4:	4d31      	ldr	r5, [pc, #196]	; (800a19c <_vfiprintf_r+0x21c>)
 800a0d6:	f898 1000 	ldrb.w	r1, [r8]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f7f6 f87f 	bl	80001e0 <memchr>
 800a0e2:	b140      	cbz	r0, 800a0f6 <_vfiprintf_r+0x176>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	1b40      	subs	r0, r0, r5
 800a0e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	4303      	orrs	r3, r0
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	f108 0801 	add.w	r8, r8, #1
 800a0f6:	f898 1000 	ldrb.w	r1, [r8]
 800a0fa:	4829      	ldr	r0, [pc, #164]	; (800a1a0 <_vfiprintf_r+0x220>)
 800a0fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a100:	2206      	movs	r2, #6
 800a102:	f108 0701 	add.w	r7, r8, #1
 800a106:	f7f6 f86b 	bl	80001e0 <memchr>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d034      	beq.n	800a178 <_vfiprintf_r+0x1f8>
 800a10e:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <_vfiprintf_r+0x224>)
 800a110:	bb03      	cbnz	r3, 800a154 <_vfiprintf_r+0x1d4>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	3307      	adds	r3, #7
 800a116:	f023 0307 	bic.w	r3, r3, #7
 800a11a:	3308      	adds	r3, #8
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	444b      	add	r3, r9
 800a122:	9309      	str	r3, [sp, #36]	; 0x24
 800a124:	e74c      	b.n	8009fc0 <_vfiprintf_r+0x40>
 800a126:	fb00 3202 	mla	r2, r0, r2, r3
 800a12a:	2101      	movs	r1, #1
 800a12c:	e786      	b.n	800a03c <_vfiprintf_r+0xbc>
 800a12e:	2300      	movs	r3, #0
 800a130:	9305      	str	r3, [sp, #20]
 800a132:	4618      	mov	r0, r3
 800a134:	250a      	movs	r5, #10
 800a136:	4688      	mov	r8, r1
 800a138:	3101      	adds	r1, #1
 800a13a:	f898 2000 	ldrb.w	r2, [r8]
 800a13e:	3a30      	subs	r2, #48	; 0x30
 800a140:	2a09      	cmp	r2, #9
 800a142:	d903      	bls.n	800a14c <_vfiprintf_r+0x1cc>
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0c5      	beq.n	800a0d4 <_vfiprintf_r+0x154>
 800a148:	9005      	str	r0, [sp, #20]
 800a14a:	e7c3      	b.n	800a0d4 <_vfiprintf_r+0x154>
 800a14c:	fb05 2000 	mla	r0, r5, r0, r2
 800a150:	2301      	movs	r3, #1
 800a152:	e7f0      	b.n	800a136 <_vfiprintf_r+0x1b6>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	4622      	mov	r2, r4
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <_vfiprintf_r+0x228>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4630      	mov	r0, r6
 800a160:	f7fd fc7a 	bl	8007a58 <_printf_float>
 800a164:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a168:	4681      	mov	r9, r0
 800a16a:	d1d8      	bne.n	800a11e <_vfiprintf_r+0x19e>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	065b      	lsls	r3, r3, #25
 800a170:	f53f af7d 	bmi.w	800a06e <_vfiprintf_r+0xee>
 800a174:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a176:	e77c      	b.n	800a072 <_vfiprintf_r+0xf2>
 800a178:	ab03      	add	r3, sp, #12
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4622      	mov	r2, r4
 800a17e:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <_vfiprintf_r+0x228>)
 800a180:	a904      	add	r1, sp, #16
 800a182:	4630      	mov	r0, r6
 800a184:	f7fd ff1e 	bl	8007fc4 <_printf_i>
 800a188:	e7ec      	b.n	800a164 <_vfiprintf_r+0x1e4>
 800a18a:	bf00      	nop
 800a18c:	0800a7cc 	.word	0x0800a7cc
 800a190:	0800a90c 	.word	0x0800a90c
 800a194:	0800a7ec 	.word	0x0800a7ec
 800a198:	0800a7ac 	.word	0x0800a7ac
 800a19c:	0800a912 	.word	0x0800a912
 800a1a0:	0800a916 	.word	0x0800a916
 800a1a4:	08007a59 	.word	0x08007a59
 800a1a8:	08009f5d 	.word	0x08009f5d

0800a1ac <_sbrk_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	4c06      	ldr	r4, [pc, #24]	; (800a1c8 <_sbrk_r+0x1c>)
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	f000 f946 	bl	800a448 <_sbrk>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d102      	bne.n	800a1c6 <_sbrk_r+0x1a>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	b103      	cbz	r3, 800a1c6 <_sbrk_r+0x1a>
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	20000f88 	.word	0x20000f88

0800a1cc <__sread>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d4:	f000 f8e8 	bl	800a3a8 <_read_r>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	bfab      	itete	ge
 800a1dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1de:	89a3      	ldrhlt	r3, [r4, #12]
 800a1e0:	181b      	addge	r3, r3, r0
 800a1e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1e6:	bfac      	ite	ge
 800a1e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ea:	81a3      	strhlt	r3, [r4, #12]
 800a1ec:	bd10      	pop	{r4, pc}

0800a1ee <__swrite>:
 800a1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f2:	461f      	mov	r7, r3
 800a1f4:	898b      	ldrh	r3, [r1, #12]
 800a1f6:	05db      	lsls	r3, r3, #23
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	d505      	bpl.n	800a20c <__swrite+0x1e>
 800a200:	2302      	movs	r3, #2
 800a202:	2200      	movs	r2, #0
 800a204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a208:	f000 f868 	bl	800a2dc <_lseek_r>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	4632      	mov	r2, r6
 800a21a:	463b      	mov	r3, r7
 800a21c:	4628      	mov	r0, r5
 800a21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a222:	f000 b817 	b.w	800a254 <_write_r>

0800a226 <__sseek>:
 800a226:	b510      	push	{r4, lr}
 800a228:	460c      	mov	r4, r1
 800a22a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22e:	f000 f855 	bl	800a2dc <_lseek_r>
 800a232:	1c43      	adds	r3, r0, #1
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	bf15      	itete	ne
 800a238:	6560      	strne	r0, [r4, #84]	; 0x54
 800a23a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a23e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a242:	81a3      	strheq	r3, [r4, #12]
 800a244:	bf18      	it	ne
 800a246:	81a3      	strhne	r3, [r4, #12]
 800a248:	bd10      	pop	{r4, pc}

0800a24a <__sclose>:
 800a24a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24e:	f000 b813 	b.w	800a278 <_close_r>
	...

0800a254 <_write_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4c07      	ldr	r4, [pc, #28]	; (800a274 <_write_r+0x20>)
 800a258:	4605      	mov	r5, r0
 800a25a:	4608      	mov	r0, r1
 800a25c:	4611      	mov	r1, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	6022      	str	r2, [r4, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	f000 f8fe 	bl	800a464 <_write>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_write_r+0x1e>
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_write_r+0x1e>
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000f88 	.word	0x20000f88

0800a278 <_close_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4c06      	ldr	r4, [pc, #24]	; (800a294 <_close_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4605      	mov	r5, r0
 800a280:	4608      	mov	r0, r1
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	f000 f8b8 	bl	800a3f8 <_close>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_close_r+0x1a>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_close_r+0x1a>
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000f88 	.word	0x20000f88

0800a298 <_fstat_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4c07      	ldr	r4, [pc, #28]	; (800a2b8 <_fstat_r+0x20>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4605      	mov	r5, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	f000 f8af 	bl	800a408 <_fstat>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d102      	bne.n	800a2b4 <_fstat_r+0x1c>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	b103      	cbz	r3, 800a2b4 <_fstat_r+0x1c>
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20000f88 	.word	0x20000f88

0800a2bc <_isatty_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4c06      	ldr	r4, [pc, #24]	; (800a2d8 <_isatty_r+0x1c>)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	f000 f8a6 	bl	800a418 <_isatty>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_isatty_r+0x1a>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_isatty_r+0x1a>
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20000f88 	.word	0x20000f88

0800a2dc <_lseek_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4c07      	ldr	r4, [pc, #28]	; (800a2fc <_lseek_r+0x20>)
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	6022      	str	r2, [r4, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 f89c 	bl	800a428 <_lseek>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_lseek_r+0x1e>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_lseek_r+0x1e>
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	20000f88 	.word	0x20000f88

0800a300 <__ascii_mbtowc>:
 800a300:	b082      	sub	sp, #8
 800a302:	b901      	cbnz	r1, 800a306 <__ascii_mbtowc+0x6>
 800a304:	a901      	add	r1, sp, #4
 800a306:	b142      	cbz	r2, 800a31a <__ascii_mbtowc+0x1a>
 800a308:	b14b      	cbz	r3, 800a31e <__ascii_mbtowc+0x1e>
 800a30a:	7813      	ldrb	r3, [r2, #0]
 800a30c:	600b      	str	r3, [r1, #0]
 800a30e:	7812      	ldrb	r2, [r2, #0]
 800a310:	1c10      	adds	r0, r2, #0
 800a312:	bf18      	it	ne
 800a314:	2001      	movne	r0, #1
 800a316:	b002      	add	sp, #8
 800a318:	4770      	bx	lr
 800a31a:	4610      	mov	r0, r2
 800a31c:	e7fb      	b.n	800a316 <__ascii_mbtowc+0x16>
 800a31e:	f06f 0001 	mvn.w	r0, #1
 800a322:	e7f8      	b.n	800a316 <__ascii_mbtowc+0x16>

0800a324 <memmove>:
 800a324:	4288      	cmp	r0, r1
 800a326:	b510      	push	{r4, lr}
 800a328:	eb01 0302 	add.w	r3, r1, r2
 800a32c:	d803      	bhi.n	800a336 <memmove+0x12>
 800a32e:	1e42      	subs	r2, r0, #1
 800a330:	4299      	cmp	r1, r3
 800a332:	d10c      	bne.n	800a34e <memmove+0x2a>
 800a334:	bd10      	pop	{r4, pc}
 800a336:	4298      	cmp	r0, r3
 800a338:	d2f9      	bcs.n	800a32e <memmove+0xa>
 800a33a:	1881      	adds	r1, r0, r2
 800a33c:	1ad2      	subs	r2, r2, r3
 800a33e:	42d3      	cmn	r3, r2
 800a340:	d100      	bne.n	800a344 <memmove+0x20>
 800a342:	bd10      	pop	{r4, pc}
 800a344:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a348:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a34c:	e7f7      	b.n	800a33e <memmove+0x1a>
 800a34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a352:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a356:	e7eb      	b.n	800a330 <memmove+0xc>

0800a358 <__malloc_lock>:
 800a358:	4770      	bx	lr

0800a35a <__malloc_unlock>:
 800a35a:	4770      	bx	lr

0800a35c <_realloc_r>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	4607      	mov	r7, r0
 800a360:	4614      	mov	r4, r2
 800a362:	460e      	mov	r6, r1
 800a364:	b921      	cbnz	r1, 800a370 <_realloc_r+0x14>
 800a366:	4611      	mov	r1, r2
 800a368:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a36c:	f7ff bc30 	b.w	8009bd0 <_malloc_r>
 800a370:	b922      	cbnz	r2, 800a37c <_realloc_r+0x20>
 800a372:	f7ff fbdf 	bl	8009b34 <_free_r>
 800a376:	4625      	mov	r5, r4
 800a378:	4628      	mov	r0, r5
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37c:	f000 f833 	bl	800a3e6 <_malloc_usable_size_r>
 800a380:	4284      	cmp	r4, r0
 800a382:	d90f      	bls.n	800a3a4 <_realloc_r+0x48>
 800a384:	4621      	mov	r1, r4
 800a386:	4638      	mov	r0, r7
 800a388:	f7ff fc22 	bl	8009bd0 <_malloc_r>
 800a38c:	4605      	mov	r5, r0
 800a38e:	2800      	cmp	r0, #0
 800a390:	d0f2      	beq.n	800a378 <_realloc_r+0x1c>
 800a392:	4631      	mov	r1, r6
 800a394:	4622      	mov	r2, r4
 800a396:	f7fd fab5 	bl	8007904 <memcpy>
 800a39a:	4631      	mov	r1, r6
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff fbc9 	bl	8009b34 <_free_r>
 800a3a2:	e7e9      	b.n	800a378 <_realloc_r+0x1c>
 800a3a4:	4635      	mov	r5, r6
 800a3a6:	e7e7      	b.n	800a378 <_realloc_r+0x1c>

0800a3a8 <_read_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4c07      	ldr	r4, [pc, #28]	; (800a3c8 <_read_r+0x20>)
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	4608      	mov	r0, r1
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 f83e 	bl	800a438 <_read>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_read_r+0x1e>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_read_r+0x1e>
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20000f88 	.word	0x20000f88

0800a3cc <__ascii_wctomb>:
 800a3cc:	b149      	cbz	r1, 800a3e2 <__ascii_wctomb+0x16>
 800a3ce:	2aff      	cmp	r2, #255	; 0xff
 800a3d0:	bf85      	ittet	hi
 800a3d2:	238a      	movhi	r3, #138	; 0x8a
 800a3d4:	6003      	strhi	r3, [r0, #0]
 800a3d6:	700a      	strbls	r2, [r1, #0]
 800a3d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3dc:	bf98      	it	ls
 800a3de:	2001      	movls	r0, #1
 800a3e0:	4770      	bx	lr
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	4770      	bx	lr

0800a3e6 <_malloc_usable_size_r>:
 800a3e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	f1a0 0004 	sub.w	r0, r0, #4
 800a3f0:	bfbc      	itt	lt
 800a3f2:	580b      	ldrlt	r3, [r1, r0]
 800a3f4:	18c0      	addlt	r0, r0, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <_close>:
 800a3f8:	4b02      	ldr	r3, [pc, #8]	; (800a404 <_close+0xc>)
 800a3fa:	2258      	movs	r2, #88	; 0x58
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a402:	4770      	bx	lr
 800a404:	20000f88 	.word	0x20000f88

0800a408 <_fstat>:
 800a408:	4b02      	ldr	r3, [pc, #8]	; (800a414 <_fstat+0xc>)
 800a40a:	2258      	movs	r2, #88	; 0x58
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	f04f 30ff 	mov.w	r0, #4294967295
 800a412:	4770      	bx	lr
 800a414:	20000f88 	.word	0x20000f88

0800a418 <_isatty>:
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <_isatty+0xc>)
 800a41a:	2258      	movs	r2, #88	; 0x58
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20000f88 	.word	0x20000f88

0800a428 <_lseek>:
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <_lseek+0xc>)
 800a42a:	2258      	movs	r2, #88	; 0x58
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295
 800a432:	4770      	bx	lr
 800a434:	20000f88 	.word	0x20000f88

0800a438 <_read>:
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <_read+0xc>)
 800a43a:	2258      	movs	r2, #88	; 0x58
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	4770      	bx	lr
 800a444:	20000f88 	.word	0x20000f88

0800a448 <_sbrk>:
 800a448:	4b04      	ldr	r3, [pc, #16]	; (800a45c <_sbrk+0x14>)
 800a44a:	6819      	ldr	r1, [r3, #0]
 800a44c:	4602      	mov	r2, r0
 800a44e:	b909      	cbnz	r1, 800a454 <_sbrk+0xc>
 800a450:	4903      	ldr	r1, [pc, #12]	; (800a460 <_sbrk+0x18>)
 800a452:	6019      	str	r1, [r3, #0]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	4402      	add	r2, r0
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	4770      	bx	lr
 800a45c:	20000750 	.word	0x20000750
 800a460:	20000f8c 	.word	0x20000f8c

0800a464 <_write>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <_write+0xc>)
 800a466:	2258      	movs	r2, #88	; 0x58
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295
 800a46e:	4770      	bx	lr
 800a470:	20000f88 	.word	0x20000f88

0800a474 <_init>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr

0800a480 <_fini>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	bf00      	nop
 800a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a486:	bc08      	pop	{r3}
 800a488:	469e      	mov	lr, r3
 800a48a:	4770      	bx	lr
